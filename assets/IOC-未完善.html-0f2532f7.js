import{_ as n,Q as s,S as a,a5 as e}from"./framework-ec2af7a3.js";const t={},o=e(`<h1 id="ioc" tabindex="-1"><a class="header-anchor" href="#ioc" aria-hidden="true">#</a> IOC</h1><h2 id="ioc-servive-provider" tabindex="-1"><a class="header-anchor" href="#ioc-servive-provider" aria-hidden="true">#</a> IoC Servive Provider</h2><blockquote><p>理念是：让别人为你服务</p></blockquote><h3 id="三种注入方式" tabindex="-1"><a class="header-anchor" href="#三种注入方式" aria-hidden="true">#</a> 三种注入方式</h3><p><strong>1.构造方法注入（construct injection）</strong></p><blockquote><p>进酒吧就有酒送上</p></blockquote><ul><li><p>被注入对象可以通过在其构造方法中声明依赖对象的参数列表，让外部（通常是IoC容器）知道它需要哪些依赖对象</p></li><li><p>IoC Service Provider会检查被注入对象的构造方法，取得它所需要的依赖对象列表，进而为其注</p><p>入相应的对象</p></li><li><p>同一个对象是不可能被构造两次的，因此，被注入对象的构造乃至其整个生命周期，应该是由IoC Service Provider来管理的</p></li></ul><p>优点：</p><ul><li>方便，开箱即用</li></ul><p>缺点：</p><ul><li>注入的方法太多，构造方法参数会过长</li><li>使用反射创建该对象时可能会很麻烦</li><li>构造方法无法继承，无法设置默认值</li><li>对于非必要的依赖，如果使用构造方法进行依赖注入可能需要构建多个不同参数的构造方法，对之后的维护不利</li></ul><p><strong>2.setter 方法注入（setter injection）</strong></p><blockquote><p>进酒吧先选择喝什么</p></blockquote><ul><li>象只要为其依赖对象所对应的属性添加setter方法，就可以通过setter方法将相应的依赖对象设置到被注入对象中</li></ul><p>优点：</p><ul><li>可以被继承</li><li>可以设置默认值</li></ul><p>缺点：</p><ul><li>不能立即使用</li></ul><p><strong>3.接口注入（interface injection）</strong></p><blockquote><p>你不是来喝酒的</p></blockquote><ul><li>如果需要注入依赖对象，被注入对象就必须声明和实现另外的接口。</li><li>接口注入是现在不甚提倡的一种方式，基本处于“退役状态”。因为它强制被注入对象实现不必要的接口，带有侵入性。而构造方法注入和setter方法注入则不需要如此</li></ul><h3 id="职责" tabindex="-1"><a class="header-anchor" href="#职责" aria-hidden="true">#</a> 职责</h3><ul><li>业务对象的构建管理</li><li>业务对象间的依赖绑定</li></ul><h3 id="管理依赖的方法" tabindex="-1"><a class="header-anchor" href="#管理依赖的方法" aria-hidden="true">#</a> 管理依赖的方法</h3><ul><li>直接编码</li><li>编写配置文件（早期常使用 XML 配置文件的方式）</li><li>元数据方式（通过注解说明依赖关系，可以看作编码方式的一种特殊情况）</li></ul><h2 id="ioc-container" tabindex="-1"><a class="header-anchor" href="#ioc-container" aria-hidden="true">#</a> IoC Container</h2><blockquote><p>IoC 容器除了是一个 IoC Servive Provider 外，还提供了其他服务（衍生的高级特性），如：AOP 支持、对象生命周期管理、线程管理、查找服务...</p><p>Spring 的 IoC 容器提供了两种容器：BeanFactory 和 ApplicationContext</p></blockquote><h3 id="beanfactory" tabindex="-1"><a class="header-anchor" href="#beanfactory" aria-hidden="true">#</a> BeanFactory</h3><ul><li>基础类型容器，提供基本的但完整的 IoC 服务</li><li>采用延迟初始化策略（lazy-load），即：需要使用时才初始化并注入依赖</li><li>可以完成作为 IoC Servive Provider 的所有职责，包括了对象的注册和对象间依赖关系的绑定</li></ul><p><strong>依赖管理：</strong></p><p>XML 依赖管理（使用 Properties 配置文件管理的与 xml 类似）：</p><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//ioc/20230210/依赖管理.png" alt="image-20220930085813531" tabindex="0" loading="lazy"><figcaption>image-20220930085813531</figcaption></figure><div class="language-cml line-numbers-mode" data-ext="cml"><pre class="language-cml"><code>&lt;beans&gt; 
	&lt;bean id=&quot;djNewsProvider&quot; class=&quot;..FXNewsProvider&quot;&gt; 
 		&lt;constructor-arg index=&quot;0&quot;&gt; 
 			&lt;ref bean=&quot;djNewsListener&quot;/&gt; 
 		&lt;/constructor-arg&gt; 
		&lt;constructor-arg index=&quot;1&quot;&gt; 
 			&lt;ref bean=&quot;djNewsPersister&quot;/&gt; 
 		&lt;/constructor-arg&gt; 
 	&lt;/bean&gt; 
 	... 
&lt;/beans&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ApplicationContext</span> container <span class="token operator">=</span>
<span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;配置文件路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">FXNewsProvider</span> newsProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FXNewsProvider</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;djNewsProvider&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> newsProvider<span class="token punctuation">.</span><span class="token function">getAndPersistNews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接编码依赖管理：</p><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//ioc/20230210/直接编码依赖管理.png" alt="image-20220930083408110" tabindex="0" loading="lazy"><figcaption>image-20220930083408110</figcaption></figure><ul><li>BeanFactory 是图书管理员</li><li>BeanDefinitionRegistry 是书架</li><li>BeanDefinition 是书，每一个受管的对象，容器内都有一个对应的 BeanDefinition 实例</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BeanFactory</span> <span class="token function">bindViaCode</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token class-name">AbstractBeanDefinition</span> newsProvider <span class="token operator">=</span>
 <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">FXNewsProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token class-name">AbstractBeanDefinition</span> newsListener <span class="token operator">=</span>
 <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">DowJonesNewsListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token class-name">AbstractBeanDefinition</span> newsPersister <span class="token operator">=</span>
 <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">DowJonesNewsPersister</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token comment">// 将bean定义注册到容器中</span>
 registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;djNewsProvider&quot;</span><span class="token punctuation">,</span> newsProvider<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;djListener&quot;</span><span class="token punctuation">,</span> newsListener<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;djPersister&quot;</span><span class="token punctuation">,</span> newsPersister<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 指定依赖关系</span>
 <span class="token comment">// 1. 可以通过构造方法注入方式</span>
 <span class="token class-name">ConstructorArgumentValues</span> argValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 argValues<span class="token punctuation">.</span><span class="token function">addIndexedArgumentValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> newsListener<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 argValues<span class="token punctuation">.</span><span class="token function">addIndexedArgumentValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> newsPersister<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 newsProvider<span class="token punctuation">.</span><span class="token function">setConstructorArgumentValues</span><span class="token punctuation">(</span>argValues<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token comment">// 2. 或者通过setter方法注入方式</span>
    <span class="token class-name">MutablePropertyValues</span> propertyValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 propertyValues<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">ropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;newsListener&quot;</span><span class="token punctuation">,</span>newsListener<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 propertyValues<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;newPersistener&quot;</span><span class="token punctuation">,</span>newsPersister<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 newsProvider<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span>propertyValues<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token comment">// 绑定完成</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">BeanFactory</span><span class="token punctuation">)</span>registry<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解管理方式（spring 2.5 之后才支持）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// @Autowired 告知容器为当前对象注入哪些依赖对象 </span>
<span class="token comment">// @Component 配合 classpath-scanning 标注需要被注入的对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>classpath-scanning 触发器</p><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; 
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; ➥
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; ➥
xmlns:context=&quot;http://www.springframework.org/schema/context&quot; ➥
xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; ➥
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans ➥
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd ➥
http://www.springframework.org/schema/context ➥
http://www.springframework.org/schema/context/spring-context-2.5.xsd ➥
http://www.springframework.org/schema/tx ➥
http://www.springframework.org/schema/tx/spring-tx-2.5.xsd&quot;&gt;
&lt;context:component-scan base-package=&quot;cn.spring21.project.base.package&quot;/&gt; 
&lt;/beans&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BeanFactory 的 Bean scope：</strong></p><ul><li>BeanFactory 作为轻量级的 IoC 容器，还可以管理对象的生命周期</li><li>scope 有 5 种范围（后三种是 2.0 之后引入的，只能在 Web 容器中使用）： <ul><li>singleton：同一个容器中只存在一个共享实例（不要和单例模式弄混，单例模式是保证在同一个 ClassLoader 中只存在一个这样的实例），初始化后一直存活到容器退出</li><li>prototype：每次接收到请求后都生成一个新的对象实例给请求方，容器没有该实例的引用，即需要请求方自己管理该实例的声明周期</li><li>request：为每个 HTTP 请求创建一个全新的对象，当请求结束之后，这个实例的生命周期即告结束，可以看作是 prototype 的特例（场景更加具体，但是语义差不多）</li><li>session：经常将用户的登录信息放到 session 中。容器会为每个 session 创建数据它的全新的对象实例，存活的时间比使用 request 范围的对象长，其余的差不多</li><li>global session：只有应用在基于 pertlet 的 Web 应用程序中才有意义，它映射到 portlet 的 global 范围的 session；如果在普通的基于 servlet 的 Web 应用中使用这个类型的话，容器会将其作为普通的 session 类型对待</li></ul></li><li>scope 属性只能在 XSD 哥哥是的文档声明中使用</li><li>scope 属性可以自定义，这里省略不谈</li></ul><p>p69</p><h3 id="applicationcontext" tabindex="-1"><a class="header-anchor" href="#applicationcontext" aria-hidden="true">#</a> ApplicationContext</h3><ul><li>在 BeanFactory 的基础上构建（间接继承 BeanFactory，还额外继承了几个接口），是高级的容器实现</li><li>提供了其他的高级特性</li><li>管理的对象在容器启动后全部初始化完毕并绑定完成</li></ul>`,47),i=[o];function p(l,c){return s(),a("div",null,i)}const u=n(t,[["render",p],["__file","IOC-未完善.html.vue"]]);export{u as default};
