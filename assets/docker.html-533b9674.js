import{_ as d,Q as s,S as a,U as t,a4 as o,W as r,a5 as e,H as c}from"./framework-ec2af7a3.js";const l={},i=e('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//icon/20230209/docker-small.png" alt="What is Docker?" style="zoom:50%;"><h1 id="docker-常用命令-持续更新" tabindex="-1"><a class="header-anchor" href="#docker-常用命令-持续更新" aria-hidden="true">#</a> Docker 常用命令（持续更新...）</h1>',3),p={href:"https://docs.docker.com/docker-hub/",target:"_blank",rel:"noopener noreferrer"},u=e(`<img src="http://gitee.com/gzwrrr/typora-img/raw/master/images/docker.png" alt="docker" style="zoom:50%;"><h2 id="_1-命令" tabindex="-1"><a class="header-anchor" href="#_1-命令" aria-hidden="true">#</a> 1.命令</h2><p><strong>命令中带中文的都需要替换</strong></p><p>(除了括号前有 $ 符号的，括号中的内容都是可选项)</p><h3 id="_1-1-安装与启动" tabindex="-1"><a class="header-anchor" href="#_1-1-安装与启动" aria-hidden="true">#</a> 1.1 安装与启动</h3><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">命令</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;"><code>yum remove docker \\</code></td><td style="text-align:center;">卸载旧版本</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;"><code>yum install -y yum-utils</code></td><td style="text-align:center;">下载工具包</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;"><code>yum install docker-ce doceker-ce-cli containerd.io</code></td><td style="text-align:center;">安装 docker</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;"><code>systemctl start docker</code></td><td style="text-align:center;">启动 docker</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;"><code>docker version</code></td><td style="text-align:center;">查看版本</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;"><code>docker run hello-world</code></td><td style="text-align:center;">运行 hello-world</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;"><code>yum remove docker-ce docker-ce-cli containerd.io</code></td><td style="text-align:center;">卸载 docker</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;"><code>sudo systemctl daemon-reload</code></td><td style="text-align:center;">重新加载守护进程</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;"><code>sudo systemctl restart docker</code></td><td style="text-align:center;">重启 docker</td></tr></tbody></table><h3 id="_1-2-常用基本命令" tabindex="-1"><a class="header-anchor" href="#_1-2-常用基本命令" aria-hidden="true">#</a> 1.2 常用基本命令</h3><table><thead><tr><th style="text-align:center;">序号</th><th>命令</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td><code>docker info</code></td><td>查看信息</td></tr><tr><td style="text-align:center;">2</td><td><code>docker 命令 --help</code></td><td>帮助文档</td></tr></tbody></table><p><strong>常用镜像命令</strong></p><table><thead><tr><th style="text-align:center;">序号</th><th>命令</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td><code>docker images</code></td><td>查看镜像</td></tr><tr><td style="text-align:center;">2</td><td><code>docker images -aq</code></td><td>列出所有的镜像（id）</td></tr><tr><td style="text-align:center;">3</td><td><code>docker search images名 (--filter=字段=限定值)</code></td><td>搜索镜像（如: --filter=STARS=300 指显示 stars 不小于 3000 的结果）</td></tr><tr><td style="text-align:center;">4</td><td><code>docker pull 镜像(:版本)</code></td><td>下载镜像（默认下载最新版，下载指定版本如: docker pull mysql:5.7）</td></tr><tr><td style="text-align:center;">5</td><td><code>docker rmi -f (id)</code></td><td>删除所有镜像（加上 id 则删除对应的镜像）</td></tr></tbody></table><p><strong>常用容器命令</strong></p><table><thead><tr><th style="text-align:center;">序号</th><th>命令</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td><code>docker run (可选参数，具体用 --help 查看) image名</code></td><td>运行容器</td></tr><tr><td style="text-align:center;">2</td><td><code>docker run -it 镜像名 /bin/bash</code></td><td>运行并进入该容器</td></tr><tr><td style="text-align:center;">3</td><td><code>exit</code></td><td>容器停止并退出容器</td></tr><tr><td style="text-align:center;">4</td><td><code>快捷键[ctrl + p + q]</code></td><td>退出容器，但容器不停止</td></tr><tr><td style="text-align:center;">4</td><td><code>docker ps</code></td><td>查看正在运行的容器</td></tr><tr><td style="text-align:center;">5</td><td><code>docker rm -f $(docker ps -aq)</code></td><td>递归删除所有容器</td></tr><tr><td style="text-align:center;">6</td><td>\`docker ps -a -q</td><td>xargs docker rm\`</td></tr><tr><td style="text-align:center;">7</td><td><code>docker start 容器id</code></td><td>启动容器</td></tr><tr><td style="text-align:center;">8</td><td><code>docker restart 容器id</code></td><td>重启容器</td></tr><tr><td style="text-align:center;">9</td><td><code>docker stop 容器id</code></td><td>停止当前正在运行的容器</td></tr><tr><td style="text-align:center;">10</td><td><code>docker kill 容器id</code></td><td>强制停止当前容器</td></tr><tr><td style="text-align:center;">11</td><td><code>docker run -d 镜像名</code></td><td>后台运行容器，但是如果没有前台，后台容器会直接结束</td></tr><tr><td style="text-align:center;">12</td><td><code>docker logs -f -t --tail 容器id</code></td><td>查看日志</td></tr><tr><td style="text-align:center;">13</td><td><code>docker top 容器id</code></td><td>查看容器进程</td></tr><tr><td style="text-align:center;">14</td><td><code>docker inspect 容器id</code></td><td>查看容器的信息</td></tr><tr><td style="text-align:center;">15</td><td><code>docker exec -it 容器id bash路径</code></td><td>进入容器并开启了新的终端</td></tr><tr><td style="text-align:center;">16</td><td><code>docker exec -it 容器id ip addr</code></td><td>查看容器的内部网络地址</td></tr><tr><td style="text-align:center;">17</td><td><code>docker attach 容器id</code></td><td>进入容器但不会开启新的终端</td></tr><tr><td style="text-align:center;">18</td><td><code>docker cp 容器id:容器内的路径 主机目录 </code></td><td>拷贝文件到主机</td></tr></tbody></table><h2 id="_2-容器数据卷" tabindex="-1"><a class="header-anchor" href="#_2-容器数据卷" aria-hidden="true">#</a> 2.容器数据卷</h2><blockquote><p>docker 容器中的数据可以同步到本地，就是将容器内的目录挂载到 Linux 中</p></blockquote><table><thead><tr><th>序号</th><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td><code>docker run -it -v 本地目录:容器目录 镜像名 bash路径</code></td><td>将容器中的目录挂载到本地目录上</td></tr><tr><td>2</td><td><code>docker run -it --name 容器名1 --volumes-from 容器名2 容器镜像(:版本)</code></td><td>相当于容器1继承容器二，数据共享（双向复制）</td></tr></tbody></table><h2 id="_3-dockerfile" tabindex="-1"><a class="header-anchor" href="#_3-dockerfile" aria-hidden="true">#</a> 3.dockerfile</h2><blockquote><p>脚本生成镜像</p></blockquote><table><thead><tr><th style="text-align:center;">序号</th><th>命令</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td>FROM</td><td>指定镜像的基础镜像</td></tr><tr><td style="text-align:center;">2</td><td>MAINTAINER</td><td>说明作者和邮箱</td></tr><tr><td style="text-align:center;">3</td><td>RUN</td><td>镜像运行执行的脚本</td></tr><tr><td style="text-align:center;">4</td><td>ADD</td><td>编译镜像时复制文件到镜像中</td></tr><tr><td style="text-align:center;">5</td><td>CMD</td><td>设置容器的启动命令</td></tr><tr><td style="text-align:center;">6</td><td>LABEL</td><td>添加镜像标签</td></tr><tr><td style="text-align:center;">7</td><td>ENV</td><td>设置容器的环境变量</td></tr><tr><td style="text-align:center;">8</td><td>EXPOESE</td><td>镜像暴露的端口</td></tr><tr><td style="text-align:center;">9</td><td>COPY</td><td>编译时复制文件到镜像中</td></tr><tr><td style="text-align:center;">10</td><td>ENTRYPOINT</td><td>设置容器的入口程序</td></tr><tr><td style="text-align:center;">11</td><td>VOLUME</td><td>设置容器的挂载卷</td></tr><tr><td style="text-align:center;">12</td><td>USER</td><td>设置运行 RUN CMD ENTRYPOIN 的用户名</td></tr><tr><td style="text-align:center;">13</td><td>WORKDIR</td><td>设置 RUN CMD ENTRYPOINT COPY ADD 的工作目录</td></tr><tr><td style="text-align:center;">14</td><td>ARG</td><td>设置编译镜像时加入的参数</td></tr><tr><td style="text-align:center;">15</td><td>ONBUILD</td><td>设置镜像的构建命令</td></tr><tr><td style="text-align:center;">16</td><td>STOPSIGNAL</td><td>设置容器的退出信号量</td></tr></tbody></table><h2 id="_4-docker-网络" tabindex="-1"><a class="header-anchor" href="#_4-docker-网络" aria-hidden="true">#</a> 4.docker 网络</h2><blockquote><ol><li>安装了 docker 后，主机上就会多出一个 docker0 网卡，该网卡是桥接模式，使用了 evth-pair 技术，相当于连通各个容器的路由器</li><li>每启动一个 docker 容器，docker 就会给 docker 容器分配一个容器 ip，容器网卡都是成对出现的，因为 evth-pair 就是一对虚拟设备接口，一端连接协议，另一端成对的网卡彼此相连</li></ol></blockquote><h3 id="_4-1-自定义网络" tabindex="-1"><a class="header-anchor" href="#_4-1-自定义网络" aria-hidden="true">#</a> 4.1 自定义网络</h3><blockquote><ul><li><p>自己创建网络使用「桥接模式」</p></li><li><p>自定义网络可以直接使用「容器名」ping 通其他容器</p></li></ul></blockquote><table><thead><tr><th style="text-align:center;">序号</th><th>命令</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td><code>docker network ls</code></td><td>列出所有 docker 网络</td></tr><tr><td style="text-align:center;">2</td><td><code>docker network inspect 网络名</code></td><td>查看网络的配置信息</td></tr><tr><td style="text-align:center;">3</td><td><code>docker network create --driver bridge --subnet 自定ip --gateway 自定网关 网络名</code></td><td>自定义一个网络并指定 ip 、网关、网络名</td></tr><tr><td style="text-align:center;">4</td><td><code>docker run -d -P --name 容器名 --net 网络名 镜像名</code></td><td>在自定义网络中启动容器</td></tr><tr><td style="text-align:center;">5</td><td><code>docker network connect 网络名 容器名</code></td><td>将一个网络下的容器与另一个网络连通，这样命令中的容器就相当于到了指定的网络中，即一个容器两个 ip</td></tr></tbody></table><h3 id="_4-2-docker-compose" tabindex="-1"><a class="header-anchor" href="#_4-2-docker-compose" aria-hidden="true">#</a> 4.2 docker compose</h3><blockquote><p>docker compose 可以管理编排容器</p><p>使用 yml 文件配置</p><p>三个步骤：</p><ol><li>docker file</li><li>docker-compose.yml</li><li>docker-compose up</li></ol></blockquote><h4>4.2.1 安装步骤</h4><ol><li>下载 docker-compose</li></ol><blockquote><p>官方下载地址，很慢，而且版本太高后续案例可能会启动失败</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>国内镜像地址，版本也比较低，推荐使用这个</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">\`</span></span>-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">\`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>授权</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>查看版本</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4>4.2.2 测试案例（官网案例）</h4><ol><li>创建并进入目录</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">mkdir</span> composetest
 <span class="token builtin class-name">cd</span> composetest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建测试文件 ( python 应用 )</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> app.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>在 app.py 中写入服务内容</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">import</span> redis
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
cache <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_hit_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    retries <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> cache<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">&#39;hits&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError <span class="token keyword">as</span> exc<span class="token punctuation">:</span>
            <span class="token keyword">if</span> retries <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> exc
            retries <span class="token operator">-=</span> <span class="token number">1</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Hello World! I have been seen {} times.\\n&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>创建 requirements.txt ，在其中说明使用到的依赖</li></ol><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>flask
redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>创建并编写 Dockerfile</li></ol><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code># syntax=docker/dockerfile:1
FROM python:3.7-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD [&quot;flask&quot;, &quot;run&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>创建 docker-compose.yml 文件并定义服务</li></ol><blockquote><p>version 版本过高，例如使用 3.9 ，之后 docker-compose up 可能会失败</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;5000:5000&quot;</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;redis:alpine&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>确认所有文件准备完毕</li></ol><figure><img src="http://gitee.com/gzwrrr/typora-img/raw/master/images/image-20220319110958738.png" alt="image-20220319110958738" tabindex="0" loading="lazy"><figcaption>image-20220319110958738</figcaption></figure><ol start="8"><li>执行启动命令</li></ol><blockquote><p>这一步可能会特别慢，主要是拉取镜像的问题，就算可以科学上网也可能构建失败，需要多试几次</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li>在 docker-compose 所在的目录下停止服务</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4>4.2.3 docker-compose 编写规则</h4><blockquote><p>docker-compose 核心概念：</p><ol><li>服务 service：一个个容器示例</li><li>工程 project：由一组关联的应用容器组成的一个「完整业务单元」，在 docker-compose.yml 文件中定义</li></ol><p>docker-compose 核心配置有三层：</p><ol><li>version: ‘xx’</li><li>services: <ul><li>...</li></ul></li><li>其他：</li></ol><p>​ volumes:</p><p>​ networks:</p><p>​ config:</p></blockquote><p><strong>常用命令</strong>：</p><table><thead><tr><th style="text-align:center;">序号</th><th>命令</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td><code>docker-compose -h</code></td><td>查看帮助</td></tr><tr><td style="text-align:center;">2</td><td><code>docker-compose up</code></td><td>启动所有 docker-compose 服务</td></tr><tr><td style="text-align:center;">3</td><td><code>docker-compose up -d</code></td><td>启动所有 docker-compose 服务并在后台运行</td></tr><tr><td style="text-align:center;">4</td><td><code>docker-compose down</code></td><td>停止并删除容器、网络、卷、镜像等</td></tr><tr><td style="text-align:center;">5</td><td><code>docker-compose exec yml里的服务id</code></td><td>进入容器示例内部</td></tr><tr><td style="text-align:center;">6</td><td><code>docker-compose ps</code></td><td>展示当前 docker-compose 编排过的运行的所有容器</td></tr><tr><td style="text-align:center;">7</td><td><code>docker-compose top</code></td><td>展示当前 docker-compose 编排过的容器进程</td></tr><tr><td style="text-align:center;">8</td><td><code>docker-compose logs yml里的服务id</code></td><td>查看容器输出日志</td></tr><tr><td style="text-align:center;">9</td><td><code>docker-compose config</code></td><td>检查配置</td></tr><tr><td style="text-align:center;">10</td><td><code>docker-compose config -q</code></td><td>检查配置，有问题才输出</td></tr><tr><td style="text-align:center;">11</td><td><code>docker-compose restart</code></td><td>重启服务</td></tr><tr><td style="text-align:center;">12</td><td><code>docker-compose start</code></td><td>启动服务</td></tr><tr><td style="text-align:center;">13</td><td><code>docker-compose stop</code></td><td>停止服务</td></tr></tbody></table><h3 id="_4-3-docker-swarm" tabindex="-1"><a class="header-anchor" href="#_4-3-docker-swarm" aria-hidden="true">#</a> 4.3 docker swarm</h3><blockquote><p>集群部署</p></blockquote>`,62);function k(m,h){const n=c("ExternalLinkIcon");return s(),a("div",null,[i,t("p",null,[t("a",p,[o("官方文档地址"),r(n)])]),u])}const b=d(l,[["render",k],["__file","docker.html.vue"]]);export{b as default};
