import{_ as e,Q as a,S as t,a5 as r}from"./framework-ec2af7a3.js";const d={},n=r(`<h1 id="数据库及其语言" tabindex="-1"><a class="header-anchor" href="#数据库及其语言" aria-hidden="true">#</a> 数据库及其语言</h1><p>注：中文括号（）代表补充说明，英文括号()是语句的内容，不是补充不可省略。</p><h2 id="一、数据库的优点" tabindex="-1"><a class="header-anchor" href="#一、数据库的优点" aria-hidden="true">#</a> 一、数据库的优点：</h2><ol><li>可以持久化数据到本地</li><li>结构化查询</li></ol><h2 id="二、数据库的常见概念" tabindex="-1"><a class="header-anchor" href="#二、数据库的常见概念" aria-hidden="true">#</a> 二、数据库的常见概念：</h2><ol><li>DB：数据库，存储数据的仓库</li><li>DBMS：数据库管理系统，又称为数据库软件或数据库产品，用于创建与管理数据库</li><li>SQL：结构化查询语言，用于和数据库通讯的语言，不是某个数据库软件特有的，而是几乎所有的主流数据库软件的通用语言</li></ol><h2 id="三、数据库存储数据的特点" tabindex="-1"><a class="header-anchor" href="#三、数据库存储数据的特点" aria-hidden="true">#</a> 三、数据库存储数据的特点：</h2><ol><li>数据存放到表中，然后表再放到库中</li><li>一个库中可以有多张表，每张表具有唯一的表名来表示自身</li><li>表中有一个或多个列，列又被称为“字段”，相当于Java中的“属性”</li><li>表中的每一行数据，相当于Java中的“对象”</li></ol><h2 id="四、常见的数据库管理系统" tabindex="-1"><a class="header-anchor" href="#四、常见的数据库管理系统" aria-hidden="true">#</a> 四、常见的数据库管理系统</h2><p>1.MySQL 2.Oracle<br> 3.DB2<br> 4.SQLserver</p><h2 id="五、mysql的背景" tabindex="-1"><a class="header-anchor" href="#五、mysql的背景" aria-hidden="true">#</a> 五、MySQL的背景</h2><ul><li>前身属于瑞典的一家公司，MySQL AB，后被Sun公司收购，最后Sun公司被Oracle收购</li></ul><h2 id="六、mysql的优点" tabindex="-1"><a class="header-anchor" href="#六、mysql的优点" aria-hidden="true">#</a> 六、MySQL的优点</h2><ul><li>开源、免费、成本低</li><li>性能高、移植性好</li><li>体积小，便于安装</li></ul><h2 id="七、mysql的安装" tabindex="-1"><a class="header-anchor" href="#七、mysql的安装" aria-hidden="true">#</a> 七、MySQL的安装</h2><blockquote><p>属于c/s架构的软件，既有服务端又有客户端，一般安装服务端</p></blockquote><h2 id="八、相关命令" tabindex="-1"><a class="header-anchor" href="#八、相关命令" aria-hidden="true">#</a> 八、相关命令</h2><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">命令</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">net start mysql</td><td style="text-align:center;">启动 mysql</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">net stop mysql</td><td style="text-align:center;">关闭 mysql</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">mysql -uroot -p / mysql -h localhost -P 3306 -u root -p (+password)</td><td style="text-align:center;">登入 MySQL</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">mysql --version / mysql -V</td><td style="text-align:center;">查看数据库版本</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">exit / ctrl+c</td><td style="text-align:center;">退出 MySQL</td></tr></tbody></table><h2 id="事务四大特性与隔离级别" tabindex="-1"><a class="header-anchor" href="#事务四大特性与隔离级别" aria-hidden="true">#</a> 事务四大特性与隔离级别</h2><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><table><thead><tr><th style="text-align:center;">隔离级别（Isolation Level）</th><th style="text-align:center;">脏读（Dirty Reads）</th><th style="text-align:center;">不可重复读（Nonrepeatable Reads）</th><th style="text-align:center;">幻读（Phantoms）</th></tr></thead><tbody><tr><td style="text-align:center;">读未提交</td><td style="text-align:center;">允许</td><td style="text-align:center;">允许</td><td style="text-align:center;">允许</td></tr><tr><td style="text-align:center;">读已提交</td><td style="text-align:center;">不允许</td><td style="text-align:center;">允许</td><td style="text-align:center;">允许</td></tr><tr><td style="text-align:center;">可重复读</td><td style="text-align:center;">不允许</td><td style="text-align:center;">不允许</td><td style="text-align:center;">允许</td></tr><tr><td style="text-align:center;">串行化</td><td style="text-align:center;">不允许</td><td style="text-align:center;">不允许</td><td style="text-align:center;">不允许</td></tr></tbody></table><h2 id="数据库的备份-命令行方式" tabindex="-1"><a class="header-anchor" href="#数据库的备份-命令行方式" aria-hidden="true">#</a> 数据库的备份（命令行方式）</h2><h3 id="备份" tabindex="-1"><a class="header-anchor" href="#备份" aria-hidden="true">#</a> 备份</h3><ul><li>进入 <code>mysql</code> 的 <code>bin</code> 目录，输入如下命令</li><li>将其中的 <code>username</code> 替换成 <code>root</code> 或其他用户，<code>password</code> 替换成数据库的真实密码，<code>databasename</code> 替换成需要备份的数据库名</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqldump <span class="token operator">-</span>u username <span class="token operator">-</span>ppassword databasename <span class="token operator">&gt;</span> databasename<span class="token punctuation">.</span><span class="token keyword">sql</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="恢复" tabindex="-1"><a class="header-anchor" href="#恢复" aria-hidden="true">#</a> 恢复</h3><ul><li><p>进入 <code>mysql</code> 的 <code>bin</code> 目录，再登入mysql，输入如下命令</p></li><li><p>将其中的 <code>databasename</code> 更换成对应的备份文件的名称</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>source databasename<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="mysql中的注意点" tabindex="-1"><a class="header-anchor" href="#mysql中的注意点" aria-hidden="true">#</a> MySQL中的注意点</h2><ol><li>MySQL中没有字符串的概念，只有字符，用‘’单引号表示（不区分单双引号，一般用单引号）</li><li>MySQL中+只是运算符，若字符相加则先将字符转化成数值再相加，若是转化失败，则将字符直接转换成数值0再相加；若用+的表达式中有一个值为null，结果一定为null</li><li>MySQL中为了区别特殊字段和关键字时，有时会将特殊字段用双引号区别开来</li><li>着重符号为：\`\`</li><li>转义符为：\\ 或者自己指定转义符（见下面的模糊查询）</li></ol><hr><h2 id="mysql的语法规范" tabindex="-1"><a class="header-anchor" href="#mysql的语法规范" aria-hidden="true">#</a> MySQL的语法规范</h2><p>1、不区分大小写，但是建议关键字大写，表名列名小写<br> 2、每条命令用 “;” 结尾<br> 3、根据每条命令的需要，可以进行换行或者缩进<br> 4、注释：</p><blockquote><p>（1） 单行注释：#注释文字<br> （2） 单行注释：--注释文字<br> （3） 多行注释：/* 注释文字 */</p></blockquote><hr><h3 id="_1、显示数据库" tabindex="-1"><a class="header-anchor" href="#_1、显示数据库" aria-hidden="true">#</a> 1、显示数据库</h3><pre><code>show databases;
</code></pre><h3 id="_2、进入指定数据库" tabindex="-1"><a class="header-anchor" href="#_2、进入指定数据库" aria-hidden="true">#</a> 2、进入指定数据库</h3><pre><code>use 指定数据库名;
</code></pre><h3 id="_3、显示表" tabindex="-1"><a class="header-anchor" href="#_3、显示表" aria-hidden="true">#</a> 3、显示表</h3><pre><code>show tables;
</code></pre><h3 id="_4、直接查看指定数据库" tabindex="-1"><a class="header-anchor" href="#_4、直接查看指定数据库" aria-hidden="true">#</a> 4、直接查看指定数据库</h3><pre><code>show tables from 指定数据库名;
</code></pre><h3 id="_5、查看当前处于哪个库-调用函数" tabindex="-1"><a class="header-anchor" href="#_5、查看当前处于哪个库-调用函数" aria-hidden="true">#</a> 5、查看当前处于哪个库(调用函数)</h3><pre><code>select database();
</code></pre><h3 id="_6、创建表-需要指定有哪些列" tabindex="-1"><a class="header-anchor" href="#_6、创建表-需要指定有哪些列" aria-hidden="true">#</a> 6、创建表（需要指定有哪些列）</h3><pre><code>create table 表名(
    列名 类型,
    id int,
    name varchar(20)
);
</code></pre><h3 id="_7、查看表的结构" tabindex="-1"><a class="header-anchor" href="#_7、查看表的结构" aria-hidden="true">#</a> 7、查看表的结构</h3><pre><code>desc 表名
</code></pre><h3 id="_8、查看表中的数据" tabindex="-1"><a class="header-anchor" href="#_8、查看表中的数据" aria-hidden="true">#</a> 8、查看表中的数据</h3><pre><code>select * from 表名
</code></pre><h3 id="_9、想表中插入数据" tabindex="-1"><a class="header-anchor" href="#_9、想表中插入数据" aria-hidden="true">#</a> 9、想表中插入数据</h3><pre><code>insert into 表名 (列名,列名) values(数据,数据);
</code></pre><h3 id="_10、修改表中的数据" tabindex="-1"><a class="header-anchor" href="#_10、修改表中的数据" aria-hidden="true">#</a> 10、修改表中的数据</h3><pre><code>update 表名 set 列名=值 where 限定条件（如id=1）
</code></pre><hr><h1 id="_1、dql语言-data-query-language" tabindex="-1"><a class="header-anchor" href="#_1、dql语言-data-query-language" aria-hidden="true">#</a> 1、DQL语言（Data Query Language）</h1><blockquote><p>1.基础查询（注意：查询的表格是一个虚拟的表格）<br> 查询的列表可以是：<br> （1）表中的字段<br> （2）常量值<br> （3）表达式<br> （4）函数</p><blockquote><p>语法：<br> select 查询列表<br> from 查询的表名</p></blockquote></blockquote><h3 id="_1、查询表中的单个字段" tabindex="-1"><a class="header-anchor" href="#_1、查询表中的单个字段" aria-hidden="true">#</a> 1、查询表中的单个字段</h3><pre><code>select 单个字段名 from 表名;  
</code></pre><h3 id="_2、查询表中的多个字段" tabindex="-1"><a class="header-anchor" href="#_2、查询表中的多个字段" aria-hidden="true">#</a> 2、查询表中的多个字段</h3><pre><code>select 字段名,字段名,... from 表名;
</code></pre><h3 id="_3、查询表中的全部字段" tabindex="-1"><a class="header-anchor" href="#_3、查询表中的全部字段" aria-hidden="true">#</a> 3、查询表中的全部字段</h3><pre><code>select * from 表名;
</code></pre><h3 id="_4、查询表中的常量" tabindex="-1"><a class="header-anchor" href="#_4、查询表中的常量" aria-hidden="true">#</a> 4、查询表中的常量</h3><pre><code>select 常量;
</code></pre><h3 id="_5、查询表达式-表达式如-100-10" tabindex="-1"><a class="header-anchor" href="#_5、查询表达式-表达式如-100-10" aria-hidden="true">#</a> 5、查询表达式（表达式如：100*10）</h3><pre><code>select 表达式;
</code></pre><h3 id="_5、查询函数" tabindex="-1"><a class="header-anchor" href="#_5、查询函数" aria-hidden="true">#</a> 5、查询函数</h3><pre><code>select 函数名();
</code></pre><h3 id="_6、查询数据时起别名-便于理解-如果要查询的字段有重名的情况-使用别名可以区分开来" tabindex="-1"><a class="header-anchor" href="#_6、查询数据时起别名-便于理解-如果要查询的字段有重名的情况-使用别名可以区分开来" aria-hidden="true">#</a> 6、查询数据时起别名（便于理解，如果要查询的字段有重名的情况，使用别名可以区分开来）</h3><pre><code>1、select 表达式 as 别名, 表达式 as 别名,... from 表名;
2、select 表达式 别名, 表达式 别名,... from 表名;
</code></pre><h3 id="_7、去除重复的数据" tabindex="-1"><a class="header-anchor" href="#_7、去除重复的数据" aria-hidden="true">#</a> 7、去除重复的数据</h3><pre><code>select distinct 字段 from 表名;
</code></pre><h3 id="_8、mysql中的-只是运算符-字段拼接则需要" tabindex="-1"><a class="header-anchor" href="#_8、mysql中的-只是运算符-字段拼接则需要" aria-hidden="true">#</a> 8、mysql中的+只是运算符，字段拼接则需要：</h3><pre><code>select concat(字段，字段，字段) as 结果 from 表名;
</code></pre><h3 id="_9、判断是否为null-如果是则给出其他结果" tabindex="-1"><a class="header-anchor" href="#_9、判断是否为null-如果是则给出其他结果" aria-hidden="true">#</a> 9、判断是否为null，如果是则给出其他结果</h3><pre><code>select ifnull(可能为空的字段,希望的输出的结果) as 字段的别名 （可加原来的字段做对比） from 表名;
</code></pre><hr><blockquote><p>2.条件查询<br> 分类：<br> 1.按条件表达式筛选:<br> 条件运算符：<code>&gt; &lt; = （不等于）&lt;&gt; &gt;= &lt;= （安全等于）&lt;=&gt;</code> 2.按逻辑表达式筛选<br> 逻辑运算符：（&amp;&amp; || ! ） 标准的是：and or not<br> 3.模糊查询：<br> 涉及的关键词：like (between and) in (is null)</p><blockquote><p>通配符：<br> （1）% 代表任意多个字符（包含0个字符）<br> （2）_ 代表任意单个字符<br> （3）转义符可以为：\\ 或者指定任意字符为转义符（以指定#为转义符为例）：</p><blockquote><p>语法：... like &#39;任意通配符#任意通配符&#39; escape &#39;#&#39;;</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>语法：<br> select 查询列表 from 表名 where 筛选条件;</p></blockquote></blockquote><h3 id="_1、按条件表达式筛选" tabindex="-1"><a class="header-anchor" href="#_1、按条件表达式筛选" aria-hidden="true">#</a> 1、按条件表达式筛选：</h3><pre><code>select 查询列表 from 表名 where 条件表达式语句（包含但不全有：\`&gt; &lt; = &lt;&gt; &gt;= &lt;= &lt;=&gt;\`）;
</code></pre><h3 id="_2、按逻辑表达式子" tabindex="-1"><a class="header-anchor" href="#_2、按逻辑表达式子" aria-hidden="true">#</a> 2、按逻辑表达式子：</h3><pre><code>select 查询列表 from 表名 where 逻辑表达式语句（包含但不全有：\`and or not &gt; &lt; = &lt;&gt; &gt;= &lt;= &lt;=&gt;\`）;
</code></pre><h3 id="_3、模糊查询-为通配符-注意-like后的模糊匹配字符必须用单引号" tabindex="-1"><a class="header-anchor" href="#_3、模糊查询-为通配符-注意-like后的模糊匹配字符必须用单引号" aria-hidden="true">#</a> 3、模糊查询（%为通配符；注意：like后的模糊匹配字符必须用单引号）：</h3><pre><code>（1）like（一般和通配符一起使用）：  
    select 查询列表 from 表名 where 字段名 like &#39;%包含的字符%&#39;（用通配符筛选出字段应该包含的内容）;  
（2）between .. and .. （包含临界值，相当于：字段名&gt;=条件1 and 字段名&lt;=条件2）：  
    select 查询列表 from 表名 where 字段名 between 条件 and 条件;  
（3）in（注意：不支持通配符，且相当于：字段名=字段1 or 字段名=字段2 or ...）：  
     select 查询列表 from 表名 where 字段名 in(字段,字段,...);  
（4）is null：  
    select 查询列表 from 表名 where 字段名 is （not） null;  
    注：用\`&lt;=&gt;\`表示判断是否等于（既可以判断null又可以判断具体的值，但可读性较差），返回true或false，如：  
    select 查询列表 from 表名 where 字段名 \`&lt;=&gt;\` 值;
</code></pre><hr><h1 id="_2、dml语言-data-manipulation-language" tabindex="-1"><a class="header-anchor" href="#_2、dml语言-data-manipulation-language" aria-hidden="true">#</a> 2、DML语言（Data Manipulation Language）</h1><hr><h1 id="_3、ddl语言-data-define-language" tabindex="-1"><a class="header-anchor" href="#_3、ddl语言-data-define-language" aria-hidden="true">#</a> 3、DDL语言（Data Define Language）</h1><hr><h1 id="_4、tcl语言-transaction-control-language" tabindex="-1"><a class="header-anchor" href="#_4、tcl语言-transaction-control-language" aria-hidden="true">#</a> 4、TCL语言（Transaction Control Language）</h1>`,93),l=[n];function i(h,s){return a(),t("div",null,l)}const o=e(d,[["render",i],["__file","MySQLStudy-已发布-未完善.html.vue"]]);export{o as default};
