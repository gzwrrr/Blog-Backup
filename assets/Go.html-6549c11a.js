import{_ as e,Q as o,S as i,U as n,a4 as a,W as t,a5 as p,H as c}from"./framework-ec2af7a3.js";const l={},u=p('<h1 id="go-简单使用" tabindex="-1"><a class="header-anchor" href="#go-简单使用" aria-hidden="true">#</a> Go 简单使用</h1><h2 id="go-的特点" tabindex="-1"><a class="header-anchor" href="#go-的特点" aria-hidden="true">#</a> Go 的特点</h2><ul><li>犹如 C + Python，具有垃圾回收机制，是强类型语言，也是静态语言，编译型语言</li><li>天然支持并发</li><li>管道通信机制</li><li>支持返回多值</li></ul><p>GO 中没有 <code>public</code> 或者 <code>private</code> 等关键字，作为代替的是：如果变量名、函数名、常量名的「首字母大写」，则表明可以被其他的包访问；如果「首字母小写」，则表明只能在本包中使用</p><p>注意：GO 有很强的语法规范，设计理念是一种事情有且只有一种方法完成，目的是让代码不产生太多歧义，比如 GO 中不支持「三目运算符」</p><p>【补充】</p><p>GO 语言中有跳转控制语句 <code>goto</code>，可以无条件的转移到程序中指定的行</p><p>该语句通常与条件语句配合使用，实现跳转转移，跳出循环等功能</p><p>虽然有该特性，但是 GO 官方不建议使用 goto 语句，这样可以避免程序流程的混乱</p><p>GO 的优势：</p><ul><li>易上手，有丰富的标准库</li><li>基于 goroutines 和 channels 的简单并发编程</li><li>性能优越（与 Java 相比 Go 打败 Java 地方是内存使用和垃圾回收）</li><li>在语言层面定义了源码的格式化</li><li>有标准化的测试框架</li><li>defer 延时处理</li><li>有垃圾回收机制（这点有些人也认为是缺点，因为有经验的工程师宁愿掌握对内存的管理；另外一点就是 Rust 也有内存管理机制，但是并没有使用 GC）</li></ul><p>GO 的缺陷：</p><ul><li>目前还没有泛型、枚举、函数式编程（2022 之后就有了）</li><li>忽略现代语言设计需要的进步，可能导致少即是多的情况</li><li>异常处理比较复杂且痛苦（Rust 中也没有真正的异常，但是通过泛型和宏规避了这一点）</li><li>依赖管理痛苦（2022 及之后就改善了）</li><li>结构体易变，需要使用到深拷贝</li><li>除了 map 和 slice 之外几乎没有其他的数据结构</li></ul><h2 id="生态" tabindex="-1"><a class="header-anchor" href="#生态" aria-hidden="true">#</a> 生态</h2>',14),r=n("thead",null,[n("tr",null,[n("th",null,"软件"),n("th",null,"描述"),n("th",null,"链接")])],-1),d=n("td",null,"docker",-1),k=n("td",null,"家喻户晓的容器技术",-1),v={href:"https://github.com/moby/moby",target:"_blank",rel:"noopener noreferrer"},m=n("td",null,"kubernetes",-1),b=n("td",null,"容器编排引擎，google出品",-1),g={href:"https://github.com/kubernetes/kubernetes",target:"_blank",rel:"noopener noreferrer"},f=n("td",null,"etcd",-1),h=n("td",null,"分布式服务注册发现系统",-1),q={href:"https://github.com/etcd-io/etcd",target:"_blank",rel:"noopener noreferrer"},y=n("td",null,"influxdb",-1),w=n("td",null,"时序数据库",-1),_={href:"https://github.com/influxdata/influxdb",target:"_blank",rel:"noopener noreferrer"},x=n("td",null,"grafana",-1),G=n("td",null,"数据监控可视化看板",-1),P={href:"https://github.com/grafana/grafana",target:"_blank",rel:"noopener noreferrer"},O=n("td",null,"prometheus",-1),S=n("td",null,"开源监控系统",-1),I={href:"https://github.com/prometheus/prometheus",target:"_blank",rel:"noopener noreferrer"},A=n("td",null,"consul",-1),C=n("td",null,"分布式服务发现系统",-1),T={href:"https://github.com/hashicorp/consul",target:"_blank",rel:"noopener noreferrer"},F=n("td",null,"nsq",-1),N=n("td",null,"亿级消息队列",-1),U={href:"https://github.com/nsqio/nsq",target:"_blank",rel:"noopener noreferrer"},B=n("td",null,"TiDB",-1),V=n("td",null,"分布式数据库, go + rust 打造",-1),E={href:"https://github.com/pingcap/tidb",target:"_blank",rel:"noopener noreferrer"},H=p(`<h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p><strong>变量三种使用细节：</strong></p><ol><li>指定变量类型后不赋值，则会使用默认值</li><li>根据值自行判断变量的类型，此时不用指定变量的类型</li><li>定义变量时可以省略 <code>var</code>，可以使用 <code>i := 10</code> 的形式定义变量并自动进行类型推导</li></ol><p><strong>基本数据类型：</strong></p><ul><li>数值型 <ul><li>整数类型（int，int8，int16，int32，int64，uint，uint8，uint16，uint32，byte）</li><li>浮点类型（float32，float64）</li></ul></li><li>字符型（没有专门的字符型，是使用 byte 来保存单个字符类型的，保存的是字符的码值，超过后应该用更大的整型保存）</li><li>布尔型</li><li>字符串（官方将字符串归属到基本数据类型...）</li></ul><p><strong>派生类型/复杂类型：</strong></p><ol><li>指针</li><li>数组</li><li>结构体</li><li>管道</li><li>函数（也属于一种类型）</li><li>切片</li><li>接口</li><li>map</li></ol><p><strong>类型转化：</strong></p><p>Go 中不同类型的变量之间需要进行「显式转化」，即 Go 中数据类型不能自动转换</p><p>任意数值类型都可以相互转换，但是当超出转换到的类型的范围时，会直接做溢出处理，即不会报错，但是结果不一定是期望得到的，所以转换时需要特别小心</p><p>数值型与字符串的相互转换需要使用到两个包：<code>fmt</code> 和 <code>strconv</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	g1 <span class="token operator">=</span> <span class="token number">10</span>
	g2 <span class="token operator">=</span> <span class="token string">&quot;heehh&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ahahhaa&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

	<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>

	str2 <span class="token operator">:=</span> <span class="token string">&quot;hello2&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>

	n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3 <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;str2&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;n1&quot;</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> <span class="token string">&quot;n2&quot;</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> <span class="token string">&quot;n3&quot;</span><span class="token punctuation">,</span> n3<span class="token punctuation">)</span>

	<span class="token keyword">var</span> f1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">32.32</span>
	<span class="token keyword">var</span> f2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">.32</span>
	<span class="token keyword">var</span> f3 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">.32e2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;f1&quot;</span><span class="token punctuation">,</span> f1<span class="token punctuation">,</span> <span class="token string">&quot;f2&quot;</span><span class="token punctuation">,</span> f2<span class="token punctuation">,</span> <span class="token string">&quot;f3&quot;</span><span class="token punctuation">,</span> f3<span class="token punctuation">)</span>

	<span class="token keyword">var</span> c1 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c1&quot;</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span>

	<span class="token keyword">var</span> b1 <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;b1&quot;</span><span class="token punctuation">,</span> b1<span class="token punctuation">)</span>

	<span class="token keyword">var</span> int1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">32</span>
	<span class="token keyword">var</span> float1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token function">float32</span><span class="token punctuation">(</span>int1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;int1&quot;</span><span class="token punctuation">,</span> int1<span class="token punctuation">,</span> <span class="token string">&quot;float1&quot;</span><span class="token punctuation">,</span> float1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h2><p>值类型：基本数据类型、数组、结构体</p><p>引用类型：指针、切片、map、管道、接口</p><p>值类型与引用类型的特点：</p><ul><li>值类型：变量直接存储值，内存通常在栈中分配</li><li>引用类型：变量存储的是一个地址，这个地址对应的空间才是真正存储的数据，内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就变为了一个垃圾，在 GO 中由 GC 进行回收</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;i 的地址&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span>
    
	<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>i
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;p 的地址&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;p 指向的地址&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
	<span class="token comment">// 解引用</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;p 的值&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>GO 中的函数允许「多返回值」</p><p>在 GO 中使用函数脱离不了包的管理，包的规范包括：</p><ul><li>对文件打包时，包对应着一个文件夹，文件的包名通常和文件所在的文件夹名称一致，一般包名为小写字母</li><li>当要使用其他包函数或者变量时，需要先引入对应的包</li><li>引入包时，路径是从 <code>$GOPATH</code> 的 <code>src</code> 下开始寻找的</li><li>同一个包中（同一个文件夹中），不允许有两个重名的函数或者变量名，也就是说 GO 中没有「函数重载」的概念（会有其他方式代替）</li></ul><h3 id="函数的简单使用" tabindex="-1"><a class="header-anchor" href="#函数的简单使用" aria-hidden="true">#</a> 函数的简单使用</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> utils
<span class="token comment">// 函数名大写表示可以被其他包使用</span>
<span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>n1 <span class="token builtin">float64</span><span class="token punctuation">,</span> n2 <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在其他包中导入上面的包</span>
<span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;study_02/demo_03/utils&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> sum<span class="token punctuation">,</span> flag <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：GO 中函数也是一种数据类型，所以可以直接作为形参进行传递与调用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>myGetSum <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> num1 <span class="token builtin">float64</span><span class="token punctuation">,</span> num2 <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">myGetSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>getSum<span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了简化数据类型定义，GO 支持自定义类型，并且函数支持为「函数返回值」命名</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> myGetSumType <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>
<span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>myGetSum  myGetSumType<span class="token punctuation">,</span> num1 <span class="token builtin">float64</span><span class="token punctuation">,</span> num2 <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sum <span class="token operator">=</span> <span class="token function">myGetSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>	
	<span class="token keyword">return</span> 
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>getSum<span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数形参还可以使用可变参数，这个可变参数本质是切片（可变参数一定是形参列表中的最后一个）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> myGetSumType <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>
<span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>myGetSum  myGetSumType<span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sum <span class="token operator">=</span> <span class="token function">myGetSum</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>	
	<span class="token keyword">return</span> 
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>getSum<span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="init-函数" tabindex="-1"><a class="header-anchor" href="#init-函数" aria-hidden="true">#</a> init 函数</h3><p>每个源文件中都可以包含一个 init 函数，该函数会在 main 函数执行前被 GO 调用</p><p>如果还有全局变量的定义，那么初始化的顺序为：全局变量定义 -&gt; init 函数 -&gt; main 函数</p><p>如果是一个文件引入一个包，而这个包中有变量定义和 init 函数，且引入该包的文件也有变量定义和 init 函数，那么初始化的顺序为：被引用的包的全局变量定义 -&gt; 被引用的包的 init 函数 -&gt; 本文件的全局变量定义 -&gt; 本文件的 init 函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;init....&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h3><p>两种使用场景：</p><ul><li>定义匿名函数时就直接调用，这种函数只能调用一次</li><li>将匿名函数赋值给一个变量，再通过该变量来调用匿名函数</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 定义函数时就直接使用</span>
	sum1 <span class="token operator">:=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n1 <span class="token operator">+</span> n2
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum1&quot;</span><span class="token punctuation">,</span> sum1<span class="token punctuation">)</span>

	<span class="token comment">// 使用变量接收匿名函数</span>
	getSum <span class="token operator">:=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n1 <span class="token operator">+</span> n2
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum2&quot;</span><span class="token punctuation">,</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> n <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		n <span class="token operator">=</span> n <span class="token operator">+</span> x
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	f <span class="token operator">:=</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 11</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 12</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 11</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 11</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="defer" tabindex="-1"><a class="header-anchor" href="#defer" aria-hidden="true">#</a> defer</h3><p>在函数执行中，经常需要创建资源（数据库连接、文件句柄等），为了能够在函数执行完后即使释放资源，提供了延时机制（defer）</p><p>defer 将语句放入栈时，会把相关的值同时拷贝到并入栈</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 当执行到 defer 时，暂时不会执行，会压入到一个独立的栈中</span>
	<span class="token comment">// 当函数执行完毕后，defer 标识的操作会以先入后出的顺序执行</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;结束操作 2&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;关闭资源 1&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;执行操作...&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><p><strong>简单使用：</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;errors&quot;</span>

<span class="token keyword">func</span> <span class="token function">readConf</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">&quot;config.ini&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;读取文件错误&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	err <span class="token operator">:=</span> <span class="token function">readConf</span><span class="token punctuation">(</span><span class="token string">&quot;cogfig.ini&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;程序继续执行...&quot;</span><span class="token punctuation">)</span>
	
	err <span class="token operator">=</span> <span class="token function">readConf</span><span class="token punctuation">(</span><span class="token string">&quot;config.in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;程序继续执行...&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>数组的简单使用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">arr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> hens <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">float64</span>
	hens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>
	hens<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>
	hens<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>
	hens<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>
	sum <span class="token operator">:=</span> <span class="token number">0.0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		sum <span class="token operator">+=</span> hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span>	
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">printArrInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;arr&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
	<span class="token comment">// 数组的首地址与第一个元素的首地址一致</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;arr 的首地址: %p, 第一个元素的地址: %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	
	<span class="token comment">// 指定下标</span>
	<span class="token keyword">var</span> arr1 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;arr1&quot;</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span>

    <span class="token comment">// for-range 遍历</span>
	<span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> arr1 <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;index: &quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">&quot;value: &quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的注意事项：</p><ol><li>数组是多个「相同类型」的数据的组合，一旦声明了数组的长度，之后就不能改变</li><li><code>var arr[]int</code> 是声明了一个切片而不是数组</li><li>数组中的元素可以是任意数据类型，包括值类型和引用类型，但是不能二者混用</li><li>数组创建后，如果没有赋值则有默认零值</li><li>特别注意：GO 的数组属于「值类型」，再默认情况下进行的是值传递，因此会进行值拷贝，所以数组之间不会互相影响</li><li>如果想要在函数中修改原本的数组，需要使用「引用传递」</li></ol><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>// 形参必须写清除长度，不写的话就是切片类型
func editArr(arr *[3]int) {
	// 通过引用传递就可以直接修改原数组
	arr[0] = 100
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h2><p>切片是数组的一个引用，因此切片是引用类型，在进行传递时遵守引用传递机制</p><p>切片长度可变，可以理解成可以动态变化的数组</p><h3 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// make 是一个内置函数，可以分配并初始化一个类型为：切片、map、通道的对象，第一个参数为类型，该函数返回的并非是一个指针，而是和第一个参数相同的类型</span>
   <span class="token comment">// 对于切片，必须 make 之后才可以使用</span>
   <span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
   <span class="token function">printSlice</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">printSlice</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// cap 是切片的容量，可以动态变化</span>
   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;len=%d cap=%d slice=%v\\n&quot;</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切片示例" tabindex="-1"><a class="header-anchor" href="#切片示例" aria-hidden="true">#</a> 切片示例</h3><p>将 arr 中从下标 <code>startIndex</code> 到 <code>endIndex-1</code> 下的元素创建为一个新的切片</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认 <code>endIndex</code> 时将表示一直到arr的最后一个元素</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span><span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认 <code>startIndex</code> 时将表示从 arr 的第一个元素开始</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过切片 s 初始化切片 s1</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过内置函数 <strong>make()</strong> 初始化切片<strong>s</strong>，<strong>[]int</strong> 标识为其元素类型为 int 的切片</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token punctuation">:</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">,</span><span class="token builtin">cap</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注：string 类型底层是 byte 数组，同样可以进行切片，但是注意，字符串是不可变的，不能直接通过下标直接修改</p>`,71);function J(L,R){const s=c("ExternalLinkIcon");return o(),i("div",null,[u,n("table",null,[r,n("tbody",null,[n("tr",null,[d,k,n("td",null,[n("a",v,[a("github.com/moby/moby"),t(s)])])]),n("tr",null,[m,b,n("td",null,[n("a",g,[a("github.com/kubernetes/kubernetes"),t(s)])])]),n("tr",null,[f,h,n("td",null,[n("a",q,[a("github.com/etcd-io/etcd"),t(s)])])]),n("tr",null,[y,w,n("td",null,[n("a",_,[a("github.com/influxdata/influxdb"),t(s)])])]),n("tr",null,[x,G,n("td",null,[n("a",P,[a("github.com/grafana/grafana"),t(s)])])]),n("tr",null,[O,S,n("td",null,[n("a",I,[a("github.com/prometheus/prometheus"),t(s)])])]),n("tr",null,[A,C,n("td",null,[n("a",T,[a("github.com/hashicorp/consul"),t(s)])])]),n("tr",null,[F,N,n("td",null,[n("a",U,[a("github.com/nsqio/nsq"),t(s)])])]),n("tr",null,[B,V,n("td",null,[n("a",E,[a("github.com/pingcap/tidb"),t(s)])])])])]),H])}const Q=e(l,[["render",J],["__file","Go.html.vue"]]);export{Q as default};
