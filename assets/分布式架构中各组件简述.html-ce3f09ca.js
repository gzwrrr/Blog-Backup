import{_ as a,Q as n,S as s,a5 as e}from"./framework-ec2af7a3.js";const t={},l=e(`<h1 id="分布式架构中各组件简述" tabindex="-1"><a class="header-anchor" href="#分布式架构中各组件简述" aria-hidden="true">#</a> 分布式架构中各组件简述</h1><h1 id="服务注册" tabindex="-1"><a class="header-anchor" href="#服务注册" aria-hidden="true">#</a> 服务注册</h1><h2 id="eureka" tabindex="-1"><a class="header-anchor" href="#eureka" aria-hidden="true">#</a> Eureka</h2><h2 id="consul" tabindex="-1"><a class="header-anchor" href="#consul" aria-hidden="true">#</a> Consul</h2><h1 id="服务调用" tabindex="-1"><a class="header-anchor" href="#服务调用" aria-hidden="true">#</a> 服务调用</h1><h2 id="ribbon" tabindex="-1"><a class="header-anchor" href="#ribbon" aria-hidden="true">#</a> Ribbon</h2><blockquote><p>已经进入维护阶段</p></blockquote><ul><li><p>Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套<strong>客户端负载均衡工具</strong></p></li><li><p>主要功能是提供客户端软件<strong>负载均衡算法</strong>和<strong>服务调用</strong></p></li><li><p>Ribbon 客户端提供一系列完善的配置项：如连接超时、重试等</p></li><li><p>在配置文件中列出 LB（Load Balancer）后面所有的所有机器，Ribbon 都会自动基于某些规则（轮询，随机连接等）去连接这些机器</p></li></ul><br><h3 id="load-balancer" tabindex="-1"><a class="header-anchor" href="#load-balancer" aria-hidden="true">#</a> Load Balancer</h3><ul><li>将用户请求分摊到多个服务上，达到系统的高可用</li><li>常见的负载均衡工具还有 Nginx、LVS、硬件 F5 等</li><li>Nginx 是服务器负载均衡，客户端所有请i去都会交给 Nginx，然后由 Nginx 实现转发请求</li><li>Ribbon 是本地负载均衡，在调用微服务接口时，会在注册中心上在获取到注册信息服务列表后缓存到 JVM 本地，从而在本地实现 RPC 远程服务调用</li></ul><br><h3 id="负载均衡类型" tabindex="-1"><a class="header-anchor" href="#负载均衡类型" aria-hidden="true">#</a> 负载均衡类型</h3><ul><li>集中式：服务的消费方和提供方之间使用独立的 LB 设施（Nginx、F5 等），由该设施负责把请求通过某种策略发送给服务的提供方</li><li>进程内：将 LB 逻辑集成到消费方，消费方从服务注册中心获取可用的地址，然后从这些地址中选择出一台合适的服务器。Ribbon 就属于进程内 LB，它只是一个类库，集成于消费方进程，消费方通过它来获取服务提供方的地址</li></ul><br><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>Ribbon 是一个软负载均衡的客户端组件</li><li>Ribbon 可以和其他所需请求的客户端结合使用，和 Eureka 结合就是其中一个实例（较新版的 Spring Cloud Eureka 自带了 Ribbon）</li></ul><br><h2 id="openfeign" tabindex="-1"><a class="header-anchor" href="#openfeign" aria-hidden="true">#</a> OpenFeign</h2><ul><li>一个声明式 WebServeice 客户端，使用 Feign 编写可以让客户端更加简单</li><li>使用方法式定义一个服务接口然后再上面添加注解</li><li>Feign 支持可插拔式的编码器和解码器</li><li>Spring Cloud 对 Feign 进行了封装，即 OpenFeign，使得其支持了 Spring MVC 标准注解和 HttpMessageConverters</li><li>OpenFiegn 可以与 Eureka 和 Ribbon 组合使用以支持负载均衡</li></ul><br><h3 id="feign-的作用" tabindex="-1"><a class="header-anchor" href="#feign-的作用" aria-hidden="true">#</a> Feign 的作用</h3><ul><li>使用 Ribbon 时要和 RestTemplate 一起使用，即使用 RestTemplate 对 http 请求进行封装，形成一套模板化的调用方法</li><li>但是在实际开发中，对服务依赖的调用可能不止一处，往往是一个接口会被多出调用，所以通常会对每个微服务自行封装一些客户端类来包装这些依赖服务的调用</li><li>Feign 在上述基础上做了进一步封装，由它来定义和实现依赖服务接口的定义</li><li>在 Feign 的是线下，我们只需要创建一个接口并使用注解的方式来配置它；以前是在 Mapper 接口上标注 Mapper 接口，现在是在一个微服务接口上标注一个 Feign 注解即可完成对服务提供方的接口绑定，即简化了 Ribbon 的使用</li><li>Feign 已经集成了 Ribbon，自带负载均衡</li></ul><br><hr><br><h1 id="服务降级" tabindex="-1"><a class="header-anchor" href="#服务降级" aria-hidden="true">#</a> 服务降级</h1><p><strong>服务雪崩：</strong></p><ul><li>多个微服务之间调用可能形成多条调用链，如果扇出的链路上某个微服务的响应时间太长或者服务不可用，那么最开始的服务就会占用越来越多的系统资源，进而引入系统崩溃</li><li>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源在几秒钟之内饱和</li><li>比失败更糟糕的情况是导致服务之间的延迟增加、备份队列、线程和其他系统资源紧张，导致整个系统发生更多的级联故障</li><li>对于这些故障和延迟都需要进行隔离和管理</li></ul><h2 id="hystrix" tabindex="-1"><a class="header-anchor" href="#hystrix" aria-hidden="true">#</a> Hystrix</h2><blockquote><p>需要手动搭建监控平台，没有一套 Web 界面能让我们进行更加细粒度的配置</p></blockquote><ul><li>一个用于处理分布式系统的<strong>延迟</strong>和<strong>容错</strong>的开源库</li><li>保证在一个依赖出问题的情况下，不会导致整体服务失败，避免了级联故障，提高了分布式系统的弹性</li><li>断路器本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常</li><li>保障了服务调用方的线程不会被长时间且不必要地占用，从而避免了故障在分布式系统中的蔓延乃至雪崩</li></ul><p><strong>服务降级（Fallback）：</strong></p><ul><li>向调用方返回一个符合预期的、可处理的备选响应（FallBack）</li><li>发生服务降级的情况： <ul><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满</li></ul></li></ul><p><strong>服务熔断（Break）：</strong></p><ul><li>达到最大访问量后，直接拒绝访问，然后调用服务降级方法返回提示</li><li>熔断机制是应对<strong>雪崩效应</strong>的一种微服务链路保护机制</li><li>当扇出链路的某个微服务出错不可用或者响应时间太长就会进行服务降级，进而熔断该节点的微服务的调用，快速返回错误的响应信息</li><li>当检测到该节点微服务调用响应正常后，恢复调用链路</li><li>在 Spring Cloud 中，Hystrix 会监控微服务间的调用状况，以此实现熔断机制</li><li>当失败的调用到达一定的阈值后（默认是 5 秒内 20 次调用失败），就会启动熔断机制</li><li>熔断状态： <ul><li>打开：请求不再调用当前服务，内部设置始终一般为 MTTR（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态</li><li>关闭：不会对服务进行熔断</li><li>半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li></ul></li><li>断路器的三个重要参数： <ul><li>快照时间窗口：断路器确定是否打开需要统计一些请求和错误数据，统计的时间范围就是快照时间窗口，默认为最近的 10 秒</li><li>请求总数阈值：在快照时间窗口内，必须满足请求总数阈值才有资格熔断。默认为 20，意味着在 10 秒内，如果该 Hystrix 命令的调用次数不足 20 次，即使所有的请求都超时或者因为其他的原因而失败，断路器也不会打开</li><li>错误百分比阈值：当请求总数在快照时间窗口内超过了阈值，比如发生了 30 次调用，如果在这 30 次调用中，有 15 次发生了超时异常，也就是超过了 50% 的错误百分比，那么在默认设定的 50% 阈值的情况下，断路器就会打开</li></ul></li><li>Hystrix 的自动恢复功能： <ul><li>当断路器打开时，会对主逻辑进行熔断，之后会启动一个休眠时间窗口，在这个时间窗口内，降级逻辑临时成为逻辑</li><li>当休眠窗口期到期，断路器会进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将关闭，主逻辑恢复</li><li>如果这次请求依然有问题，那么还是保持打开的状态，休眠时间窗口重新计时</li></ul></li></ul><p><strong>服务限流（Flowlimit）：</strong></p><ul><li>在类似秒杀的高并发场景下，严禁流量瞬间涌入，此时请求需要排队有序进入</li></ul><br><h2 id="sentinel" tabindex="-1"><a class="header-anchor" href="#sentinel" aria-hidden="true">#</a> Sentinel</h2><blockquote><p>独立的组件，有 Web 界面，可以更加细粒度地配置</p></blockquote><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//分布式组件/20230210/sentinel.png" alt="image-20221023112720793" tabindex="0" loading="lazy"><figcaption>image-20221023112720793</figcaption></figure><h3 id="流控规则" tabindex="-1"><a class="header-anchor" href="#流控规则" aria-hidden="true">#</a> 流控规则</h3><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">资源名</td><td style="text-align:left;">唯一名称，默认为请求路径</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">针对来源</td><td style="text-align:left;">Sentinel 可以针对调用者进行限流，填写微服务名称，默认为 default（不区分来源）</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">阈值类型/单机阈值</td><td style="text-align:left;">1. QPS（每秒请求数量）：当调用该 API 的 QPS 达到阈值时进行限流<br>2. 线程数：当调用该 API 的线程数达到阈值时进行限流</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">是否集群</td><td style="text-align:left;">不需要集群</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">流控模式</td><td style="text-align:left;">1. 直接：API 达到限流条件时直接限流<br>2. 关联：当关联的资源达到阈值时，限流自己（A 关联 B，B 达到阈值，A 挂）<br>3. 链路：只记录指定链路上的流量（API 级别），即指定资源入口进来的流量，如果达到阈值就进行限流</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">流控效果</td><td style="text-align:left;">1. 快速失败：直接失败抛异常<br>2. Warm up：根据 codeFactor（冷加载因子，默认 3）的值，从阈值/codeFactor，进过预热时长才达到设置的 QPS 阈值<br>3. 排队等待：让请求匀速通过，阈值类型必须设置成 QPS 否则无效</td></tr></tbody></table><h3 id="降级规则" tabindex="-1"><a class="header-anchor" href="#降级规则" aria-hidden="true">#</a> 降级规则</h3><blockquote><p>Sentinel 熔断降级会在调用链路中某个资源出现不稳定时，对这个资源的调用进行限制，让请求快速失败，避免影响到其他的资源二导致级联错误；当资源被降级后，在接下来的降级时间窗口内，对该资源的调用都自动熔断（默认是抛出 DegradeException）</p></blockquote><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">属性</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">RT（平均响应时间，秒级）</td><td style="text-align:center;">超出阈值且在时间窗口内通过的请求大于等于 5 时，触发降级<br>窗口期过后关闭断路器<br>RT 最大为 4900（更大的需要设置 -Dcsp.sentinel.statistic.max.rt=xxx）</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">异常比例（秒级）</td><td style="text-align:center;">QPS 大于等于 5 且异常比例（秒级统计）超过阈值时，触发降级<br>时间窗口结束后，关闭降级</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">异常数（分钟级）</td><td style="text-align:center;">异常数（分钟统计）超过阈值时，触发降级<br>时间窗口结束后，关闭降级</td></tr></tbody></table><br><h3 id="热点规则" tabindex="-1"><a class="header-anchor" href="#热点规则" aria-hidden="true">#</a> 热点规则</h3><p>p124</p><br><h1 id="服务网关" tabindex="-1"><a class="header-anchor" href="#服务网关" aria-hidden="true">#</a> 服务网关</h1><p><strong>Gateway（Zuul 不讨论）：</strong></p><ul><li>基于 Spring + S pring Boot 和 Project Reator 等技术开发的网关，为微服务架构提供一种简单有效的统一的 API 路由管理方式</li><li>基于 WebFlux 框架实现的，底层使用了高性能的 Reactor 模式通信框架 Netty，所以 Gateway 是异步非阻塞模型</li><li>目标是提供统一的路由方式，且是基于 Filter 链的方式提供的网关的基本功能（如：安全、监控、指标、限流）</li><li>Route 路由：构建网关的基本模块，由 ID、目标 URI 、一系列的断言和过滤器组成，如果断言为真就匹配该路由</li><li>Filter 过滤：GatewayFilter 实例，可以在请求前后做一些操作</li></ul><h1 id="服务配置中心" tabindex="-1"><a class="header-anchor" href="#服务配置中心" aria-hidden="true">#</a> 服务配置中心</h1><ul><li>为微服务提供集中化的外部配置支持，配置服务器为各个不同的微服务应用的所有环境提供一个中心化的外部配置</li><li>配置中心支持动态化的配置更新，可以分环境部署</li><li>运行期间可以动态调整配置，不需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生改动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>配置信息以 RESTful 风格的接口暴露</li></ul><p><strong>配置文件分级：</strong></p><ul><li><code>application.yml</code> 是用户级的资源配置项；<code>bootstrap.yml</code> 是系统级的配置项，优先级更高</li><li>Spring Cloud 会创建一个 <code>Bootstrap Context</code> 作为 Spring 应用的 <code>Application Context</code> 的父上下文；两个上下文共享一个从外部获取的 <code>Environment</code></li><li>初始化时 <code>Bootstrap Context</code> 负责从外部源加载配置属性并解析配置</li><li>两个上下文有着不同的约定，保证它们之间的配置分离</li><li><code>Bootstrap Context</code> 属性有高优先级，默认情况下不会被本地配置覆盖</li><li>跟配置中心对接的客户端中的配置文件需要改成 \`bootstrap.yml</li></ul><h1 id="消息总线" tabindex="-1"><a class="header-anchor" href="#消息总线" aria-hidden="true">#</a> 消息总线</h1><ul><li>这里说的是 <code>Spring Cloud Bus</code></li><li>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个公用的消息主题，并让系统中所有微服务实例都链接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称之为消息总线</li><li>基本原理是客户端实例都会监听消息队列中的同一个 <code>topic</code>（默认是 <code>Spring Cloud Bus</code>），当一个服务刷新数据时，它会把这个消息放到该主题中，这样其他监听同一个主题的服务就能得到新的通知，并更新自身的状态</li><li>可以配合 <code>Spring Cloud Config</code> 实现真正的动态配置刷新</li><li>支持两种消息代理：<code>RabbitMQ</code> 和 <code>Kafaka</code></li><li><code>Spring Cloud Bus</code> 是将分布式系统的节点与轻量级消息系统链接起来的框架，整合了 Java 事件处理机制和消息中间件的功能</li><li>能够管理和传播分布式系统间的消息，就像一个分布式执行器，可以用于广播状态更改、事件推送等，也可以作为微服务间的通信通道</li></ul><p><strong>两种触发方式：</strong></p><ul><li><p>利用消息总线触发一个客户端 <code>/bus/refresh</code> 端点从而刷新所有客户端的配置</p></li><li><p>利用消息总线触发一个服务端 <code>/bus/refresh</code> 端点从而刷新所有客户端的配置</p></li><li><p>注意：需要给配置中心的服务端和客户端都加上消息总线的支持</p></li></ul><p><strong>使用客户端通知的弊端：</strong></p><ul><li>打破了微服务的职责单一性，因为客户端本身是业务模块，本就不应该承担配置刷新的职责</li><li>破坏了微服务个节点的平衡性</li><li>存在其他的局限性，如微服务在迁移的时候，网络地址是常常发生改变的，如果这时候想要刷新可能需要更多的修改</li></ul><h1 id="消息驱动" tabindex="-1"><a class="header-anchor" href="#消息驱动" aria-hidden="true">#</a> 消息驱动</h1><blockquote><p>Spring Cloud Stream，Binder 对象是关键</p></blockquote><ul><li>构建消息驱动微服务的框架，屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</li><li>应用程序通过 inputs 或者 outputs 来与 Spring Cloud Strem 中的 binder 对象交互</li><li>binder 对象负责与消息中间件交互，我们只需要配置绑定即可，即只需要搞清楚如何与 Stream 交互就可以方便使用消息驱动的方式</li><li>通过 Spring Integration 来连接消息代理中间件以实现消息事件驱动</li><li>Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念</li></ul><p><strong>引入了 Stream 之后：</strong></p><ul><li>Stream 完成了大一统的任务（虽然现在只能选择 RabbitMQ 或者 Kafaka）</li><li>绑定器作为中间层能够完美实现应用程序与消息中间件之间细节的隔离，通过向应用程序暴露统一的 Channel，使得应用程序之间不需要再考虑各种不同的消息中间件的实现</li></ul><p><strong>Stream 标准流程：</strong></p><ul><li>Binder：方便连接中间件，可以屏蔽差异</li><li>Channel：对 Queue 的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过 Channel 对队列进行配置</li><li>Source 和 Sink：可以理解为参照对象是 Stream 自身，从 Stream 发布消息就是输出，接收消息就是输入</li></ul><h1 id="链路追踪" tabindex="-1"><a class="header-anchor" href="#链路追踪" aria-hidden="true">#</a> 链路追踪</h1><ul><li>在微服务框架中，一个由客户端发起的请求在后台系统中会经过多个不同的服务节点来协同产生最后的请求结果</li><li>每一个请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求的失败</li><li>Spring Cloud Sleuth（用于收集）提供了一套完整的服务追踪的解决方案，并且兼容了 zipkin（用于展示）</li><li>Sleuth 中一条请求链路通过 Trace Id 唯一标识，用 Span 标识发起的请求消息，各个 Span 通过 Parent Id 关联起来 <ul><li>Trace：类似于树结构的 Span 集合，表示一条调用链路，存在唯一标识</li><li>Span：表示调用链路的来源，可以理解成一次请求信息</li></ul></li></ul><h1 id="nacos" tabindex="-1"><a class="header-anchor" href="#nacos" aria-hidden="true">#</a> Nacos</h1><blockquote><p>相当于 Eureka + Config + Bus，Nacos 支持 AP、CP 的切换</p></blockquote><h2 id="nacos-配置中心" tabindex="-1"><a class="header-anchor" href="#nacos-配置中心" aria-hidden="true">#</a> Nacos 配置中心</h2><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//分布式组件/20230210/nacos配置中心.png" alt="Nacos命名空间" tabindex="0" loading="lazy"><figcaption>Nacos命名空间</figcaption></figure><ul><li>配置中心使用 Namespace 命名空间隔离不同的配置，内部使用 Group 和 DataID 从逻辑上区分多个目标对象；默认的为：Namespace=public，Group=DEFAULT_GROUP，默认的集群是 DEFAULT</li><li>读取不同的配置有三种方式： <ul><li>通过 DataID 区分</li><li>通过 Group 区分</li><li>通过 Namespace 区分</li></ul></li></ul><h2 id="持久化配置" tabindex="-1"><a class="header-anchor" href="#持久化配置" aria-hidden="true">#</a> 持久化配置</h2><ul><li>Nacos 默认使用的是嵌入式数据（derby）库实现数据的存储</li><li>集群模式下如果还使用默认持久化配置会存在数据一致性问题</li><li>集群模式下应该使用集中式存储的方式，目前只支持 MySQL</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 持久化配置</span>
<span class="token key attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token value attr-value">mysql</span>
<span class="token comment">### Count of DB:</span>
<span class="token key attr-name">db.num</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token comment">### Connect URL of DB:</span>
<span class="token key attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span>
<span class="token key attr-name">db.user.0</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">db.password.0</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="linux-集群搭建" tabindex="-1"><a class="header-anchor" href="#linux-集群搭建" aria-hidden="true">#</a> Linux 集群搭建</h2><ol><li>修改 <code>Nacos</code> 的 <code>conf</code> 文件夹下的 <code>cluster.conf</code> 为集群的 <code>ip:port</code>，注意 其中的 ip 必须为 <code>hostname -i</code> 或 <code>ip addr ens33</code> 中的：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">192.168</span>.30.100:3333
<span class="token number">192.168</span>.30.100:4444
<span class="token number">192.168</span>.30.100:5555
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>修改 <code>nacos/bin/startup.sh</code>：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">&quot;:m:f:s:c:p:i:&quot;</span> opt
<span class="token keyword">do</span>
    <span class="token keyword">case</span> <span class="token variable">$opt</span> <span class="token keyword">in</span>
        m<span class="token punctuation">)</span>
            <span class="token assign-left variable">MODE</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        f<span class="token punctuation">)</span>
            <span class="token assign-left variable">FUNCTION_MODE</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        s<span class="token punctuation">)</span>
            <span class="token assign-left variable">SERVER</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        c<span class="token punctuation">)</span>
            <span class="token assign-left variable">MEMBER_LIST</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        p<span class="token punctuation">)</span>
            <span class="token assign-left variable">EMBEDDED_STORAGE</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        i<span class="token punctuation">)</span>
        	<span class="token comment"># 主要是加上 i: 和下面这一行，就是配置不同的端口启动</span>
            <span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        ?<span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;Unknown parameter&quot;</span>
        <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">esac</span>
<span class="token keyword">done</span>
<span class="token comment"># start</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$JAVA</span> <span class="token variable">\${JAVA_OPT}</span>&quot;</span> <span class="token operator">&gt;</span> <span class="token variable">\${BASE_DIR}</span>/logs/start.out <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token comment"># 加上 -Dserver.port=\${PORT}</span>
<span class="token function">nohup</span> <span class="token variable">$JAVA</span> <span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token variable">\${PORT}</span>  <span class="token variable">\${JAVA_OPT}</span> nacos.nacos <span class="token operator">&gt;&gt;</span> <span class="token variable">\${BASE_DIR}</span>/logs/start.out <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;nacos is starting，you can check the <span class="token variable">\${BASE_DIR}</span>/logs/start.out&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>如果无法启动可能是内存分配过小，同样是修改 <code>nacos/bin/startup.sh</code>：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${MODE}</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;standalone&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token comment"># 下面一行修改大一点，例如：</span>
	<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -Xms2g -Xmx2g -Xmn1g&quot;</span>
    <span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -Dnacos.standalone=true&quot;</span>
<span class="token keyword">else</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${EMBEDDED_STORAGE}</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;embedded&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -DembeddedStorage=true&quot;</span>
    <span class="token keyword">fi</span>
    <span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span>
    <span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class="token variable">\${BASE_DIR}</span>/logs/java_heapdump.hprof&quot;</span>
    <span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -XX:-UseLargePages&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>启动集群：</li></ol><p>注意：较高版本的 Nacos 可能无法在同一台机器的同一个目录下启动集群，此时只需要复制配置好的 Nacos 的整个目录即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果是复制了三份，就分别进入 bin 目录，然后分别运行对应的启动命令</span>
./startup.sh <span class="token parameter variable">-i</span> <span class="token number">3333</span>
./startup.sh <span class="token parameter variable">-i</span> <span class="token number">4444</span>
./startup.sh <span class="token parameter variable">-i</span> <span class="token number">5555</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//分布式组件/20230210/nacos集群.png" alt="image-20221022172459669" tabindex="0" loading="lazy"><figcaption>image-20221022172459669</figcaption></figure><ol start="5"><li>修改 <code>nginx</code> 配置文件后，进入 <code>nginx/sbin</code> 执行：<code>./nginx -c /usr/local/nginx/conf/nginx.conf</code></li></ol><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">upstream</span> <span class="token value attr-value">nacosCluster {</span>
<span class="token key attr-name">    server</span> <span class="token value attr-value">localhost:3333;</span>
<span class="token key attr-name">    server</span> <span class="token value attr-value">localhost:4444;</span>
<span class="token key attr-name">    server</span> <span class="token value attr-value">localhost:5555;</span>
}

<span class="token key attr-name">server</span> <span class="token value attr-value">{</span>
<span class="token key attr-name">    listen</span> <span class="token value attr-value">         1111;</span>
<span class="token key attr-name">    server_name</span> <span class="token value attr-value">    localhost;</span>

<span class="token key attr-name">    location</span> <span class="token value attr-value">/ {</span>
<span class="token key attr-name">    	proxy_pass</span> <span class="token value attr-value">http://nacosCluster/;</span>
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,94),i=[l];function o(r,p){return n(),s("div",null,i)}const d=a(t,[["render",o],["__file","分布式架构中各组件简述.html.vue"]]);export{d as default};
