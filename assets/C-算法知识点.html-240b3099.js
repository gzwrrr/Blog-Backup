import{_ as n,Q as s,S as a,a5 as p}from"./framework-ec2af7a3.js";const t={},e=p(`<h1 id="算法知识点" tabindex="-1"><a class="header-anchor" href="#算法知识点" aria-hidden="true">#</a> 算法知识点</h1><h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法" aria-hidden="true">#</a> 贪心算法</h2><ul><li><p>在某一个标准下，优先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案</p></li><li><p>也就是不从整体上寻找最优解，而是做出某种意义上的局部最优解</p></li><li><p>有时可由局部最优得到整体最优</p></li></ul><p>**注意：**贪心策略都是需要证明的，但是一般数学证明会非常难，所以在时间不允许的情况下使用对数器暴力验证是否正确</p><p>**最常用的做法：**堆和排序</p><h3 id="_1-1-开会排序-待补充" tabindex="-1"><a class="header-anchor" href="#_1-1-开会排序-待补充" aria-hidden="true">#</a> 1.1 开会排序（待补充）</h3><blockquote><p>以结束时间排序能得到最优解</p></blockquote><h3 id="_1-2-拼接字符串字典序最小-待补充" tabindex="-1"><a class="header-anchor" href="#_1-2-拼接字符串字典序最小-待补充" aria-hidden="true">#</a> 1.2 拼接字符串字典序最小（待补充）</h3><blockquote><p>以 a · b &lt;= b · a 比较能得到最优解</p></blockquote><h3 id="_1-3-切分金条得到最小代价-哈夫曼编码问题-由局部最小得到整体最小-待补充" tabindex="-1"><a class="header-anchor" href="#_1-3-切分金条得到最小代价-哈夫曼编码问题-由局部最小得到整体最小-待补充" aria-hidden="true">#</a> 1.3 切分金条得到最小代价（哈夫曼编码问题，由局部最小得到整体最小）（待补充）</h3><blockquote><p>利用小根堆排序累加能得到最优解</p></blockquote><h3 id="_1-4-做最多的项目-待补充" tabindex="-1"><a class="header-anchor" href="#_1-4-做最多的项目-待补充" aria-hidden="true">#</a> 1.4 做最多的项目（待补充）</h3><blockquote><p>利用大小根堆配合，按花费排序的小根堆，按利用排序的大根堆</p></blockquote><h3 id="_1-5-n-皇后问题" tabindex="-1"><a class="header-anchor" href="#_1-5-n-皇后问题" aria-hidden="true">#</a> 1.5 n 皇后问题</h3><ol><li><p>在 N * N 的棋盘上要摆 N 个皇后，要求任意两个皇后不同行、不同列、不在任何一条斜线上</p></li><li><p>给定一个 N，返回 N 皇后的摆法一共有多少种</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">NQueen</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// N 代表棋盘是 N * N 的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建一个一维数组，数组下标就是行，value 就是第几列，这样就避免了创建二维数组浪费空间</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// i 代表第 i 行，record 是棋盘，N 表示有几行</span>
    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> record<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这是一个递归方法，有点抽象，可以画图理解</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> recrord<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个是终止的条件，即一旦越界即完成了一次摆放，即当前的这种方法可行，返回发现了 1 种解决方案，此时开始“归”</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 函数内的操作一直都是维持在 i 行的，需要做的就是判断每一列是否能放下皇后</span>
    <span class="token comment">// 创建一个变量来记录一共有多少种解法</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 依次检查每一列</span>
    <span class="token comment">// 在第 0 行时，会检查 0 ... j-1 列，而每检查一列就会进行依次深度优先遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在这一列合法就放下皇后</span>
            record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
            <span class="token comment">// 此处开始深度优先遍历，比较抽象，多加思考</span>
            result <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> record<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 因为只有 0 ... i-1 行有数据，所以只用检查这些行就可以</span>
    <span class="token comment">// i 是当前判断是否合法的元素所在的行</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 合不合法的条件</span>
        <span class="token comment">// 1.不能同一行，天然符合，因为用的是递归且是深度优先遍历，不会有在同一行的情况，此处一定要多加理解</span>
        <span class="token comment">// 2.不能同一列：j == record[k]</span>
        <span class="token comment">// 3.不能共斜线，即“行与行”相减不能和“列与列”相减相同：</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> record<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>	
    	<span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：常数优化后的方案在一定范围内时间会少很多，实现方法是改用位运算</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 不要超过 32 位皇后</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">NQueen</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token class-name">N</span> <span class="token operator">&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 此时的 limit 是 N 位 1 </span>
   	<span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">32</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token comment">// 后三个 0 分别表示列限制、左对角线限制、右对角线限制</span>
    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
	
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> colLim<span class="token punctuation">,</span> <span class="token keyword">int</span> leftDiaLim<span class="token punctuation">,</span> <span class="token keyword">int</span> rightDiaLim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果列限制满了，说明找到了一种解决方法，开始“归”</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>colLim <span class="token operator">==</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 最右的 1</span>
    <span class="token keyword">int</span> mostRightOne <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 可以放下皇后的所有位置，位运算有点抽象，画图理解</span>
    <span class="token keyword">int</span> pos <span class="token operator">=</span> limit <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>colLim <span class="token operator">|</span> leftDiaLim <span class="token operator">|</span> rightDiaLim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个变量存放结果数量</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   	<span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mostRightOne <span class="token operator">=</span> pos <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 相当于把皇后放下了</span>
        pos <span class="token operator">=</span> pos <span class="token operator">-</span> mostRightOne<span class="token punctuation">;</span>
        <span class="token comment">// 下面参数位置分别把三个限制都更新了</span>
        <span class="token comment">// colLim | mostRightOne 皇后放下后的列限制</span>
        <span class="token comment">// leftDiaLim &lt;&lt; 1 左对角线限制左移就是下一行的限制</span>
        <span class="token comment">// rightDiaLim &gt;&gt;&gt; 1 右对角线限制右移就是下一行的限制</span>
        res <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> colLim <span class="token operator">|</span> mostRightOne<span class="token punctuation">,</span> <span class="token punctuation">(</span>leftDiaLim <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>rightDiaLim <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="暴力递归" tabindex="-1"><a class="header-anchor" href="#暴力递归" aria-hidden="true">#</a> 暴力递归</h2><ul><li><p>暴力递归就是不断分解问题，不断寻找子问题，直到到达不能分解的问题（base case）</p></li><li><p>暴力递归是动态规划的基础</p></li></ul><h3 id="_2-1-汉诺塔问题" tabindex="-1"><a class="header-anchor" href="#_2-1-汉诺塔问题" aria-hidden="true">#</a> 2.1 汉诺塔问题</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">&quot;左&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;中&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;右&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 因为每个过程都是一样，都可以抽象成 from 到 to 的问题，所以只需考虑一个大的标准，只要每个过程都满足了，整个过程就是对的</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">String</span> form<span class="token punctuation">,</span> <span class="token class-name">String</span> end<span class="token punctuation">,</span> <span class="token class-name">String</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里就是 base case</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Move 1 from&quot;</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">&quot;to&quot;</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> other<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Move&quot;</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">&quot;from&quot;</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">&quot;to&quot;</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> end<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2-2-字符串全部子序列" tabindex="-1"><a class="header-anchor" href="#_2-2-字符串全部子序列" aria-hidden="true">#</a> 2.2 字符串全部子序列</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// i 表示当前来到的位置，str 中存着是否打印的信息</span>
<span class="token comment">// 每到一个字母都会有两条路，取或不取</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 下面的方法是充分利用了 str 的储存空间，没有增加额外的空间</span>
    <span class="token comment">// 取当前的字符</span>
    <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> tmp <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 不取当前字符</span>
    <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>；
    str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器" aria-hidden="true">#</a> 布隆过滤器</h2><ul><li>典型应用：网站链接黑名单，爬虫去重</li><li>操作只有增加、查询，没有删除</li><li>有一定程度的失误（不可避免，但是可以设计得很低）</li><li>使用「位图」（bit arr / bit map），用基础类型拼凑，与单样本大小无关</li><li>原理：对一个输入取 K 个哈希值，将位图（大小为 M）中对应的 bit 位「描黑」（置1/0），下次再判断输入是否在位图中即可（K 个哈希值有一个是「白」的就说明输入不在位图中）</li><li>具体实现时，需要考虑 K 和 M 的取值范围，K 太小太大或者 M 太小都会增加失误率（M 取值占主要）</li></ul><p>经过数学证明的公式（N 为样本量，P 为失误率，均向上取整）：</p><blockquote><p>M = -(N * lnP / (ln2)^2)</p><p>K = ln2 * M / N ≈ 0.7 * M / N</p><p>P真 = (1 - e^(- N * K真 / M真))^K真</p></blockquote><br><h2 id="并查集" tabindex="-1"><a class="header-anchor" href="#并查集" aria-hidden="true">#</a> 并查集</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Element</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnionFindSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 映射 a -&gt; Element(a)</span>
    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">Element</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> elementMap<span class="token punctuation">;</span>
    <span class="token comment">// value 为该节点的父节点</span>
    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Element</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fatherMap<span class="token punctuation">;</span>
    <span class="token comment">// 如果 key 是代表元素（头结点），那么 value 就是代表结点下有几个元素</span>
    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sizeMap<span class="token punctuation">;</span>
	
    <span class="token keyword">public</span> <span class="token class-name">UnionFindSet</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">V</span> value <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 给元素包上一个「圈」</span>
            <span class="token class-name">Element</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            elementMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fatherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sizeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 找到元素的头节点（代表元素）</span>
    <span class="token keyword">public</span> <span class="token class-name">Element</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">findHead</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>element <span class="token operator">!=</span> fatherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            element <span class="token operator">=</span> fatherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 将一条链上的所有结点直接挂在头节点（代表结点）下</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fatherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
	<span class="token comment">// 判断两个元素是否在同一个集合里</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSame</span><span class="token punctuation">(</span><span class="token class-name">V</span> a<span class="token punctuation">,</span> <span class="token class-name">V</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> elementMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 找到该元素对应的代表元素，只有两个元素的代表元素都相等，才是存在与同一个集合里</span>
            <span class="token keyword">return</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 合并两个集合</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token class-name">V</span> a<span class="token punctuation">,</span> <span class="token class-name">V</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 只有注册过的元素才能合并</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> elementMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 找到两个元素的代表元素，头结点</span>
            <span class="token class-name">Element</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> aHead <span class="token operator">=</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">Element</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> bHead <span class="token operator">=</span> <span class="token function">findHead</span><span class="token punctuation">(</span>elementMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token keyword">if</span> <span class="token punctuation">(</span>aHead <span class="token operator">!=</span> bHead<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 找出大小代表元素</span>
                <span class="token class-name">Element</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> bigHead <span class="token operator">=</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aHead<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bHead<span class="token punctuation">)</span> <span class="token operator">?</span> ahead <span class="token operator">:</span> bHead<span class="token punctuation">;</span>
                <span class="token class-name">Element</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> smallHead <span class="token operator">=</span> big <span class="token operator">==</span> ahead <span class="token operator">?</span> bHead <span class="token operator">:</span> aHead<span class="token punctuation">;</span>
                <span class="token comment">// 将小的结点挂到大的结点下面</span>
                fatherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>smallHead<span class="token punctuation">,</span> bigHead<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 因为小的结点挂到了大的结点上，所以更新大结点的大小，并在 elementMap 中删除小的结点</span>
                <span class="token function">sizeMap</span><span class="token punctuation">(</span>bigHead<span class="token punctuation">,</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bigHead<span class="token punctuation">)</span> <span class="token operator">+</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>smallHead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                elementMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>smallHead<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="kmp" tabindex="-1"><a class="header-anchor" href="#kmp" aria-hidden="true">#</a> KMP</h2><p>寻找子串</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
	时间复杂度：o(n)
	KMP 过程用到的 next 数组是优化的关键，所有优化的操作都是基于这个信息集合的
	使用 next 数组的过程需要转换视角理解，得到 next 数组的过程与使用的过程有相似之处，同样很巧妙
*/</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不符合情况就直接返回 -1 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> m<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> m<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将两个字符串转换成字符数组</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建两个指针</span>
    <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取任意一个字符前字符串的最大前后缀相等的值</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">getNextArray</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 指针不能越界，越界说明出了结果：找到/没找到</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i1 <span class="token operator">&lt;</span> str1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i2 <span class="token operator">&lt;</span> str2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token comment">// 相等则两个指针同时前进</span>
            i1<span class="token operator">++</span><span class="token punctuation">;</span>
            i2<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 说明 str1 第一次不等的位置和 str2 开始的位置不等，所以 i1 要往前走一步，继续比较后续的字符</span>
            i1<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 说明加速检验到的位置 str1[i1] != str2[i2], 这时 str2 需要「往右推」，即 i2 「往回跳」</span>
            i2 <span class="token operator">=</span> next<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 当 i2 == str2.length 说明找到了子串，否则直接返回 -1 </span>
    <span class="token keyword">return</span> i2 <span class="token operator">==</span> str2<span class="token punctuation">.</span>length <span class="token operator">?</span> i1 <span class="token operator">-</span> i2 <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getNextArray</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果数组长度只有 1 ，那么直接返回 {-1}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建 next 数组</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>ms<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 认为规定 0 和 1 位置的值</span>
    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 	<span class="token comment">// 创建指针，i为后缀最后一个字符的位置。cn为前缀最后一个字符的位置，注意理解，不知一层含义</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> next<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> ms<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 相等则说明，拿 2 位置距离，ms[0] == ms[1]，那么这样就要使 ms[2] == 1</span>
            <span class="token comment">// 这一句其实进行了三项操作，可以拆开来理解</span>
            next<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cn<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cn <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 说明两个指针指向的值不相等，但是还可以往前跳继续对比，那么就让 cn 跳到需要比对的位置，这一步和 KMP 相似</span>
            cn <span class="token operator">=</span> next<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 说明已经没有可以比较的位置了，直接将值设为 0 </span>
            next<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="manacher" tabindex="-1"><a class="header-anchor" href="#manacher" aria-hidden="true">#</a> manacher</h2><p><strong>题目要求：</strong></p><ul><li>返回字符串中最大回文字符串的字符数量，时间复杂度 o(n)</li></ul><p><strong>相关概念：</strong></p><ul><li>回文半径</li><li>回文直径</li><li>之前扩的所有位置中所到达的最右回文右边界 R（初始为 -1 ）</li><li>取得更远边界时中心点的位置 C （初始为 -1 ，R 更新 C 一定更新，否则都不更新）</li></ul><p><strong>所有情况：</strong></p><ol><li>当前来到的中心位置 i 没有在右边界 R 里，暴力扩展无优化</li><li>当前来到的中心位置 i 在右边界 R 里，则一定存在：[L ... i’ ... C ... i ... R] <ol><li>以 i 为 C 的回文区域完全在 L -- R 里：[L... (L ... i ... R) ...R]，此时 i 的半径为原本的半径，不用扩展</li><li>以 i 为 C 的回文区域不完全在 L -- R 里：( ... [L ... i’ )... C ... ( i ... R] ... )，此时 i 的半径为 (R - I + 1)，不用扩展</li><li>以 i 为 C 的回文区域边界正好「压线」：[(L ... i’ ... ) ... C ... ( ... i ... R)]，此时需要扩展</li></ol></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxLcpsLength</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将字符串转换成字符数组，1221 -&gt; #1#2#2#1#</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token function">manacherString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建回文半径数组</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>str<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 中心</span>
    <span class="token keyword">int</span> <span class="token class-name">C</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 回文右边界再往右一个位置，即最右的有效位置是 R - 1</span>
    <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token comment">// 扩展出来的最大值</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
    <span class="token comment">// 每一个位置都需要求出回文半径</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 以下的写法和分析情况中的不太一样，但是能减少代码量，而且本质是一样的</span>
        <span class="token comment">// i 至少的回文区域，先赋值给 pArr[i]</span>
        pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">&gt;</span> i <span class="token operator">?</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>pArr<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token class-name">C</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">R</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 四种情况都往外检查，但是是左右都不越界才检查</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i <span class="token operator">-</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            	<span class="token comment">// 检查回文区域两边的字符是否相等，相等则半径+1</span>
                pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 说明两边的字符不相等，半径不增加</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果当前位置的半径大于了右边界，那么更新右边界 R 和 回文中心 C </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">R</span> <span class="token operator">=</span> i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name">C</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果此位置的半径大于 max ，则更新 max 为该位置的半径</span>
        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 因为加了 # ，所以寻找规律后可以得出最大值为 max - 1</span>
    <span class="token keyword">return</span> max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">manacherString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 0 2 4 ... 位置全是 &#39;#&#39;</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token char">&#39;#&#39;</span> <span class="token operator">:</span> charArr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口" aria-hidden="true">#</a> 滑动窗口</h2><blockquote><p>滑动窗口是一种基于双指针的一种思想，两个指针指向的元素之间形成一个窗口</p></blockquote><p>滑动窗口分为两类：</p><ul><li>一种是固定大小类的窗口</li><li>一类是大小动态变化的窗口</li></ul><p>滑动窗口初始指针一般是「左闭右开」的，即：[left, right)</p><p>滑动窗口一般是由两个「循环」组成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 时间复杂度是 O(N)</span>
<span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 增大窗口</span>
    window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缩小窗口</span>
        window<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>滑动窗口框架：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 滑动窗口算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">slidingWindow</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> need<span class="token punctuation">,</span> window<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">)</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// c 是将移入窗口的字符</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 增大窗口</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行窗口内数据的一系列更新</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token comment">/*** debug 输出的位置 ***/</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;window: [%d, %d)\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/********************/</span>

        <span class="token comment">// 判断左侧窗口是否要收缩</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// d 是将移出窗口的字符</span>
            <span class="token keyword">char</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 缩小窗口</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// 进行窗口内数据的一系列更新</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,58),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","C-算法知识点.html.vue"]]);export{k as default};
