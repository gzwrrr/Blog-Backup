<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://gzwrrr.github.io/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://gzwrrr.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <title></title>
    <link>https://gzwrrr.github.io/</link>
    <description></description>
    <language>en-US</language>
    <pubDate>Wed, 22 Feb 2023 07:29:17 GMT</pubDate>
    <lastBuildDate>Wed, 22 Feb 2023 07:29:17 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>算法</category>
    <category>java</category>
    <category>python</category>
    <category>并发</category>
    <category>锁</category>
    <category>优化</category>
    <category>网络</category>
    <category>小知识点</category>
    <category>数学建模</category>
    <category>数据库</category>
    <category>链接</category>
    <category>导航</category>
    <category>架构</category>
    <category>通用</category>
    <category>linux</category>
    <category>安装</category>
    <category>运维</category>
    <category>编程</category>
    <category>spring</category>
    <category>原理</category>
    <category>配置</category>
    <category>分布式</category>
    <category>设计模式</category>
    <category>缓存</category>
    <category>docker</category>
    <category>中间件</category>
    <category>elasticsearch</category>
    <category>git</category>
    <category>go</category>
    <category>jenkins</category>
    <category>mongodb</category>
    <category>netty</category>
    <category>通信</category>
    <category>定时任务</category>
    <item>
      <title>Java 中的数据结构</title>
      <link>https://gzwrrr.github.io/article/algorithm/A-Java%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</link>
      <guid>https://gzwrrr.github.io/article/algorithm/A-Java%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Java 中的数据结构</source>
      <description>Java 中的数据结构</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>算法</category>
      <category>java</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Java 中的数据结构</h1>
<h2> java 中的容器</h2>
<blockquote>
<p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表</p>
</blockquote>
<h3> 1.Collection</h3>
<p><strong>1.Set：</strong></p>
<ul>
<li><code>TreeSet</code>：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，<code>TreeSet</code> 则为 O(logN)。</li>
<li><code>HashSet</code>：基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li>
<li><code>LinkedHashSet</code>：具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。</li>
</ul>
<p><strong>2.List：</strong></p>
<ul>
<li><code>ArrayList</code>：基于动态数组实现，支持随机访问。</li>
<li><code>Vector</code>：和 <code>ArrayList</code> 类似，但它是线程安全的。</li>
<li><code>LinkedList</code>：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</li>
</ul>
<p><strong>3.Queue：</strong></p>
<ul>
<li><code>LinkedList</code>：可以用它来实现双向队列。</li>
<li><code>PriorityQueue</code>：基于堆结构实现，可以用它来实现优先队列。</li>
</ul>
<br>
<h3> 2.Map</h3>
<ul>
<li><code>TreeMap</code>：基于红黑树实现。</li>
<li><code>HashMap</code>：基于哈希表实现。</li>
<li><code>HashTable</code>：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</li>
<li><code>LinkedHashMap</code>：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</li>
</ul>
<br>
<h2> Java 容器的相关知识点</h2>
<h3> 1.Arraylist</h3>
<p>因为 <code>ArrayList</code> 是基于数组实现的，所以支持快速随机访问：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组的默认大小为 10：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br>
<h3> 2.Vector</h3>
<p>它的实现与 <code>ArrayList</code> 类似，但是使用了 <code>synchronized</code> 进行同步：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 ArrayList 的比较：</p>
<ul>
<li>Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；</li>
<li>Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5 倍。</li>
</ul>
<br>
<h3> 3. LinkedList</h3>
<p>基于双向链表实现，使用 Node 存储链表节点信息：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个链表存储了 first 和 last 指针：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>与 ArrayList 的比较：</p>
<ul>
<li>
<p>ArrayList 基于动态数组实现，LinkedList 基于双向链表实现。ArrayList 和 LinkedList 的区别可以归结为数组和链表的区别：</p>
</li>
<li>
<p>数组支持随机访问，但插入删除的代价很高，需要移动大量元素；</p>
</li>
<li>
<p>链表不支持随机访问，但插入删除只需要改变指针。</p>
</li>
</ul>
<br>
<h3> 4 HashMap</h3>
<p><strong>HashMap 的底层实现是「数组」+「链表」</strong></p>
<p>存储结构：</p>
<ul>
<li>内部包含了一个 Entry 类型的数组 table。</li>
<li>Entry 存储着键值对。它包含了四个字段，从 next 字段我们可以看出 Entry 是一个链表。即数组中的每个位置被当成一个桶，一个桶存放一个链表</li>
<li>HashMap 使用拉链法来解决冲突，同一个链表中存放哈希值和散列桶取模运算结果相同的 Entry。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>数据结构知识点</title>
      <link>https://gzwrrr.github.io/article/algorithm/B-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E7%82%B9.html</link>
      <guid>https://gzwrrr.github.io/article/algorithm/B-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E7%82%B9.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">数据结构知识点</source>
      <description>数据结构知识点</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>算法</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 数据结构知识点</h1>
<p><strong>线性结构的特点：</strong></p>
<ol>
<li>存在唯一的一个被称作「第一个」的数据元素</li>
<li>存在唯一的一个被称作「最后一个」的数据元素</li>
<li>除第一个元素外，集合中的每个数据元素均只有一个「前驱」</li>
<li>除最后一个元素外，集合中的每个数据元素均只有一个「后继」</li>
</ol>
<p><strong>线性表：</strong></p>
<ol>
<li>线性表是最常用且最简单的一种数据结构</li>
<li>一个线性表就是 n 个数据元素的优先序列</li>
</ol>
<p><strong>线性表的顺序表示：</strong></p>
<ol>
<li>指的是用一组地址连续的存储单元依次 线性表的数据元素</li>
<li>只要确定了存储线性表的起始位置，线性表中任意数据元素都可以随机存取，所以线性表的顺序存储结构是一种随机存取的存储结构</li>
<li>各种操作的时间复杂度：
<ol>
<li>插入操作：O(n)</li>
<li>删除操作：O(n)</li>
<li>合并操作：O(La.length * Lb.length)</li>
</ol>
</li>
</ol>
<br>
<h2> 1.哈希表（无序表）</h2>
<ol>
<li>哈希表在使用层面上可以理解为一种集合结构</li>
<li>如果只有 key，没有伴随数据 value，可以使用 HashSet 结构</li>
<li>如果既有 key，也有 value，可以使用 HashMap 结构</li>
<li>两个结构的底层实际上是一回事</li>
<li>使用哈希表进行增删改查的操作，可以认为时间复杂度为 O(1)，但是常数时间较大</li>
<li>放入哈希表的东西，如果是基础类型，内部按值传递，内存占用就是这东西的大小</li>
<li>放入哈希表的大小，如果不是基础类型，内部按引用传递，内存占用是这个东西的内存地址的大小（一律8字节）</li>
</ol>
<h3> 哈希函数</h3>
<blockquote>
<p>类似提取指纹</p>
</blockquote>
<ul>
<li>输入可以无限，但是输出有穷，这样就导致即便是不同的输入，也可能出现相同的输出（哈希碰撞/冲突，较低）</li>
<li>无随机成分，即相同的输入必定返回相同的输出</li>
<li>哈希函数有离散性和均匀性，这是评判一个哈希函数好坏的重要依据</li>
<li>经典的一个应用是：布隆过滤器</li>
<li>相关的概念有：一致性哈希（可以实现分布式负载均衡）</li>
</ul>
<br>
<h2> 2.有序表</h2>
<ol>
<li>有序表在使用层面上可以理解为一种集合结构</li>
<li>如果只有 key，没有伴随数据 value，可以使用 TreeSet 结构</li>
<li>如果既有 key，也有 value，可以使用 TreeMap 结构</li>
<li>两个结构的底层实际上是一回事</li>
<li>有序表和哈希表的区别是，有序表把 key 按照顺序组织起来，而哈希表完全不组织</li>
<li>红黑树、AVL数、size-balance-tree 和调表等都属于有序表结构，只是底层具体实现不同</li>
<li>放入有序的东西，如果是基础类型，内部按值传递，内存占用就是这东西的大小</li>
<li>放入有序表的大小，如果不是基础类型，必须提供比较器，内部按引用传递，内存占用是这个东西的内存地址的大小（一律8字节）</li>
<li>有序表的所有操作时间复杂度都是 (log N​) 级别的</li>
</ol>
<br>
<h2> 3.单/双链表</h2>
<p>链表的类型：</p>
<ul>
<li>单向链表</li>
<li>双向链表</li>
<li>循环链表</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 4.二叉树</h2>
<ul>
<li>树里的每一个节点有一个值和一个包含所有子节点的列表</li>
<li>从图的观点来看，树可以视为一个 N 个节点和 N -1 条边的有向无环图</li>
<li>二叉树是树的更为典型的结构，每个节点最多有两个子树结构</li>
</ul>
<h3> 二叉树遍历</h3>
<p>递归遍历：每个节点都可以回到自己三次（会有递归序，自己推），回到自己的三次都可以进行一定的操作。其中又分为先序、中序、后序遍历</p>
<ul>
<li>先序（头左右）：1 2 4 5 3 6 7</li>
<li>中序（左头右）：4 2 5 1 6 3 7</li>
<li>后序（左右头）：4 5 2 6 7 3 1</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**值得注意的是：**当删除二叉树中的一个节点时，删除过程将按照「后序遍历」的顺序进行</p>
<br>
<h3> 二叉树层序遍历</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> Morris 遍历</h3>
<p>时间复杂度：O(N)，额外空间复杂度：O(1)，这种遍历方式是利用原树中最底层大量的空闲指针来节省空间的</p>
<p>该遍历需要遵循以下规则：假设来到当前节点 cur，开始是 cur 为头节点：</p>
<ol>
<li>如果 cur 没有左孩子，cur 向右移动</li>
<li>如果 cur 有左孩子，那么要找到左子树的最右节点 mostRight
<ol>
<li>如果 mostRight 的右指针指向空，说明第一次访问 cur，此时让右指针指向 cur</li>
<li>如果 mostRight 的右指针指向 cur，说明第二次访问 cur，此时右指针指向空，即恢复现场，然后 cur 向右移动</li>
</ol>
</li>
<li>cur 为空时停止遍历</li>
</ol>
<p>根据规则可以发现：有左子树的节点能回到自己 2 次，没有的只能访问 1 次</p>
<p>使用 Morris 遍历的「中序遍历」可以用「极小的代价」判断一棵树是否为「搜索二叉树」</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Morris 遍历进行先序遍历：在到达一个节点的第一次进行操作即可：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Morris 遍历进行中序遍历：只能到达一次的节点，在到达时直接操作；能到达两次的节点，在第二次到达时进行操作：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Morris 遍历进行后序遍历：由于任意一个节点都不能第三次回到自己，所以需要特殊的处理，这里的处理是：只在能回到自己两次的节点，且在第二次回到自己的时候进行操作，操作必须遵循：在没有到达最后一步时，逆序打印左子树的右边界；在到达最后一步时，单独逆序打印整个树的右边界</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 二叉树的最大深度</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 满二叉树/完全二叉树</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//数据结构与算法/20230208/满二叉树与完全二叉树.png" alt="满二叉树与完全二叉树" tabindex="0" loading="lazy"><figcaption>满二叉树与完全二叉树</figcaption></figure>
<ul>
<li>
<p>一棵深度为 k 且有 <code>2^k-1</code> 个结点的二叉树称为满二叉树。</p>
</li>
<li>
<p>根据二叉树的性质，满二叉树每一层的结点个数都达到了最大值, 即满二叉树的第 <code>i</code> 层上有 <code>2^{i-1}</code> 个结点 ( i ≥1)</p>
</li>
<li>
<p>如果对满二叉树的结点进行编号，约定编号从根结点起, 自上而下, 自左而右。则深度为 k 的, 有 n 个结点的二叉树, 当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点一一对应时, 称之为完全二叉树</p>
</li>
<li>
<p>从满二叉树和完全二叉树的定义可以看出，满二叉树是完全二叉树的特殊形态，即如果一棵二叉树是满二叉树, 则它必定是完全二叉树</p>
</li>
</ul>
<p><strong>完全二叉树宽度优先遍历：</strong></p>
<ul>
<li>
<p>任一结点，有右无左返回 false</p>
</li>
<li>
<p>满足第一个条件下，如果遇到了第一个左右不双全的情况，那么接下来遇到的所有结点都必须是叶节点，否则返回 false</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 大/小根堆</h3>
<p>最大堆，又称大根堆（大顶堆）是指根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最大者，属于二叉堆的两种形式之一</p>
<p>要求：① 根节点的关键字既大于或等于左子树的关键字值，又大于或等于右子树的关键字值；② 为完全二叉树</p>
<br>
<h3> 搜索二叉树</h3>
<blockquote>
<p>使用中序遍历一颗二叉树，若是升序则一定是搜索二叉树</p>
</blockquote>
<p>二叉搜索树（BTS）是二叉树的一中特殊形式：</p>
<ul>
<li>二叉搜索树中的每个节点中的值必须「大于或等于」存储在其「左侧子树」中的任何值</li>
<li>二叉搜索树中的每个节点中的值必须「小于或等于」存储在其「右侧子树」中的任何值</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 平衡二叉树</h3>
<blockquote>
<p>平衡二叉树是二叉搜索树的特殊表现形式，旨在提高二叉搜索树的性能</p>
</blockquote>
<p><strong>相关的术语：</strong></p>
<ul>
<li>节点深度：从树的「根节点」到「该节点」的「边数」</li>
<li>节点高度：「该节点」和「叶节点」之间最长路径上的「边数」</li>
<li>树的高度：树的「根节点」的高度</li>
</ul>
<p><strong>什么是高度平衡的二叉搜索树：</strong></p>
<ul>
<li>平衡二叉树又称为高度平衡的「搜索二叉树」</li>
<li>平衡二叉树再「插入」和「删除」任何节点之后，可以自动保持「高度最小」</li>
<li>如果该平衡二叉树有 N 个节点，那么他的高度是 logN</li>
<li>平衡二叉树的每个节点的两个「子树」的高度相差不会超过 1</li>
</ul>
<p><strong>验证平衡二叉树：</strong></p>
<ul>
<li>可以通过计算「节点总数」和树的「高度」以确定是否平衡</li>
<li>还可以通过验证每个节点的子树高度是否超过 1 来递归检验是否平衡</li>
</ul>
<p><strong>实现平衡二叉树的目标：</strong></p>
<ul>
<li>使用的数据结构应该满足「二分查找」和「高度平衡」</li>
<li>采用的数据结构应该支持二叉搜索树的基本操作，包括在 O(logN) 时间内完成「搜索」、「插入」、「删除」</li>
</ul>
<p><strong>常见的平衡二叉树实现：</strong></p>
<ul>
<li>红黑树</li>
<li>AVL 树</li>
<li>伸展树</li>
<li>树堆</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 递归套路</h3>
<blockquote>
<p>递归套路可以解决大多数树形 dp 的问题</p>
</blockquote>
<h5>套路解搜索二叉树</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h5>套路解满二叉树</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 最低公共祖先</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 寻找后继</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 序列化与反序列化</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 打印纸条凹凸情况</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 5.前缀树</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 6.图</h2>
<ul>
<li>
<p>邻接表法</p>
</li>
<li>
<p>领接矩阵法</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 6.1 图的宽度优先遍历</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h4>6.2 图的深度优先遍历</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h4>6.3 图的拓扑排序</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h4>6.4 关于无向图的算法</h4>
<h5>Kruskal 算法:</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h5>Prim 算法</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h5>Dijkstra 算法</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 7.队列</h2>
<p>**队列可以分为四种类型：**普通队列、循环队列、优先级队列、双端队列，如下所示：</p>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//数据结构与算法/20230208/普通队列.png" alt="simple-queue_0" style="zoom:50%;">
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//数据结构与算法/20230208/优先队列.png" alt="priority-queue" style="zoom: 50%;">
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//数据结构与算法/20230208/双端队列.png" alt="double-ended-queue" style="zoom:50%;">
<p><strong>循环队列：</strong></p>
<p>可以使用数组实现（最简单），增删的时间复杂度都是 O(1)</p>
<p>可以用作：</p>
<ul>
<li>CPU scheduling</li>
<li>Memory management</li>
<li>Traffic Management</li>
</ul>
<p><strong>优先级队列：</strong></p>
<p>优先级队列的实现方式可以有：</p>
<ul>
<li>数组</li>
<li>链表</li>
<li>大/小顶堆（通常会使用堆）</li>
<li>二叉树</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">实现方式</th>
<th style="text-align:center">peek</th>
<th style="text-align:center">insert</th>
<th style="text-align:center">delete</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">链表</td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center"><code>O(n)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
</tr>
<tr>
<td style="text-align:center">堆</td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center"><code>O(log n)</code></td>
<td style="text-align:center"><code>O(log n)</code></td>
</tr>
<tr>
<td style="text-align:center">二叉树</td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center"><code>O(log n)</code></td>
<td style="text-align:center"><code>O(log n)</code></td>
</tr>
</tbody>
</table>
<p>可以用作：</p>
<ul>
<li>Dijkstra's algorithm</li>
<li>for implementing stack</li>
<li>for load balancing and interrupt handling in an operating system</li>
<li>for data compression in Huffman code</li>
</ul>
<p><strong>双端队列</strong></p>
<p>双端队列一般也使用数组实现（也可以使用链表），增删的时间复杂度都是 O(1)</p>
<p>双端队列有两种类型：</p>
<ul>
<li>输入受限：只允许从一端插入数据，但是允许从两端删除数据</li>
<li>输出受限：只允许从一端删除数据，但是允许从两端插入数据</li>
</ul>
<p>可以用作：</p>
<ol>
<li>In undo operations on software.</li>
<li>To store history in browsers.</li>
<li>For implementing both <a href="https://www.programiz.com/dsa/stack" target="_blank" rel="noopener noreferrer">stacks</a> and <a href="https://www.programiz.com/dsa/queue" target="_blank" rel="noopener noreferrer">queues</a>.</li>
</ol>
<h3> 7.1 双端队列</h3>
<ul>
<li>
<p>给出一数组和一个窗口，窗口大小固定，每次移动一格，找出每次的最大值</p>
</li>
<li>
<p>使用双端队列实现，能把时间复杂度降至 o(n)</p>
</li>
<li>
<p>双端队列维持的状态就是由头至尾数字的大小依次减小</p>
</li>
<li>
<p>数组大小为 n ，窗口大小为 w ，那么最后每次窗口最大值的数量就是 n - w + 1</p>
</li>
<li>
<p>将每个最大值放进数组中返回</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/20230208/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8E%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png" type="image/png"/>
    </item>
    <item>
      <title>算法知识点</title>
      <link>https://gzwrrr.github.io/article/algorithm/C-%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9.html</link>
      <guid>https://gzwrrr.github.io/article/algorithm/C-%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">算法知识点</source>
      <description>算法知识点</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>算法</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 算法知识点</h1>
<h2> 贪心算法</h2>
<ul>
<li>
<p>在某一个标准下，优先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案</p>
</li>
<li>
<p>也就是不从整体上寻找最优解，而是做出某种意义上的局部最优解</p>
</li>
<li>
<p>有时可由局部最优得到整体最优</p>
</li>
</ul>
<p>**注意：**贪心策略都是需要证明的，但是一般数学证明会非常难，所以在时间不允许的情况下使用对数器暴力验证是否正确</p>
<p>**最常用的做法：**堆和排序</p>
<h3> 1.1 开会排序（待补充）</h3>
<blockquote>
<p>以结束时间排序能得到最优解</p>
</blockquote>
<h3> 1.2 拼接字符串字典序最小（待补充）</h3>
<blockquote>
<p>以 a · b &lt;= b · a 比较能得到最优解</p>
</blockquote>
<h3> 1.3 切分金条得到最小代价（哈夫曼编码问题，由局部最小得到整体最小）（待补充）</h3>
<blockquote>
<p>利用小根堆排序累加能得到最优解</p>
</blockquote>
<h3> 1.4 做最多的项目（待补充）</h3>
<blockquote>
<p>利用大小根堆配合，按花费排序的小根堆，按利用排序的大根堆</p>
</blockquote>
<h3> 1.5 n 皇后问题</h3>
<ol>
<li>
<p>在 N * N 的棋盘上要摆 N 个皇后，要求任意两个皇后不同行、不同列、不在任何一条斜线上</p>
</li>
<li>
<p>给定一个 N，返回 N 皇后的摆法一共有多少种</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：常数优化后的方案在一定范围内时间会少很多，实现方法是改用位运算</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 暴力递归</h2>
<ul>
<li>
<p>暴力递归就是不断分解问题，不断寻找子问题，直到到达不能分解的问题（base case）</p>
</li>
<li>
<p>暴力递归是动态规划的基础</p>
</li>
</ul>
<h3> 2.1 汉诺塔问题</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 2.2 字符串全部子序列</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 布隆过滤器</h2>
<ul>
<li>典型应用：网站链接黑名单，爬虫去重</li>
<li>操作只有增加、查询，没有删除</li>
<li>有一定程度的失误（不可避免，但是可以设计得很低）</li>
<li>使用「位图」（bit arr / bit map），用基础类型拼凑，与单样本大小无关</li>
<li>原理：对一个输入取 K 个哈希值，将位图（大小为 M）中对应的 bit 位「描黑」（置1/0），下次再判断输入是否在位图中即可（K 个哈希值有一个是「白」的就说明输入不在位图中）</li>
<li>具体实现时，需要考虑 K 和 M 的取值范围，K 太小太大或者 M 太小都会增加失误率（M 取值占主要）</li>
</ul>
<p>经过数学证明的公式（N 为样本量，P 为失误率，均向上取整）：</p>
<blockquote>
<p>M = -(N * lnP / (ln2)^2)</p>
<p>K = ln2 * M / N ≈ 0.7 * M / N</p>
<p>P真 = (1 - e^(- N * K真 / M真))^K真</p>
</blockquote>
<br>
<h2> 并查集</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> KMP</h2>
<p>寻找子串</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> manacher</h2>
<p><strong>题目要求：</strong></p>
<ul>
<li>返回字符串中最大回文字符串的字符数量，时间复杂度 o(n)</li>
</ul>
<p><strong>相关概念：</strong></p>
<ul>
<li>回文半径</li>
<li>回文直径</li>
<li>之前扩的所有位置中所到达的最右回文右边界 R（初始为 -1 ）</li>
<li>取得更远边界时中心点的位置 C （初始为 -1 ，R 更新 C 一定更新，否则都不更新）</li>
</ul>
<p><strong>所有情况：</strong></p>
<ol>
<li>当前来到的中心位置 i 没有在右边界 R 里，暴力扩展无优化</li>
<li>当前来到的中心位置 i 在右边界 R 里，则一定存在：[L ... i’ ... C ... i ... R]
<ol>
<li>以 i 为 C 的回文区域完全在 L -- R 里：[L... (L ... i ... R) ...R]，此时 i 的半径为原本的半径，不用扩展</li>
<li>以 i 为 C 的回文区域不完全在 L -- R 里：( ... [L ... i’ )... C ... ( i ... R] ... )，此时 i 的半径为 (R - I + 1)，不用扩展</li>
<li>以 i 为 C 的回文区域边界正好「压线」：[(L ... i’ ... ) ... C ... ( ... i ... R)]，此时需要扩展</li>
</ol>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 滑动窗口</h2>
<blockquote>
<p>滑动窗口是一种基于双指针的一种思想，两个指针指向的元素之间形成一个窗口</p>
</blockquote>
<p>滑动窗口分为两类：</p>
<ul>
<li>一种是固定大小类的窗口</li>
<li>一类是大小动态变化的窗口</li>
</ul>
<p>滑动窗口初始指针一般是「左闭右开」的，即：[left, right)</p>
<p>滑动窗口一般是由两个「循环」组成：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>滑动窗口框架：</strong></p>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>]]></content:encoded>
    </item>
    <item>
      <title>基础排序</title>
      <link>https://gzwrrr.github.io/article/algorithm/D-%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F.html</link>
      <guid>https://gzwrrr.github.io/article/algorithm/D-%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">基础排序</source>
      <description>基础排序</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>算法</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 基础排序</h1>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//数据结构与算法/20230208/基础排序时间复杂度.png" alt="排序算法的时空复杂度比较" tabindex="0" loading="lazy"><figcaption>排序算法的时空复杂度比较</figcaption></figure>
<p><strong>到目前为止：</strong></p>
<ul>
<li>
<p>基于比较的	排序，时间复杂度无法做到 O(n*log_2n) 以下</p>
</li>
<li>
<p>时间复杂度 O(n*log_2n) 的排序，空间复杂度在 O(n) 以下时，无法做到稳定</p>
</li>
</ul>
<p><strong>各个排序时空复杂度：</strong></p>
<p>注：稳定性是指排序后相同的元素能否保持原本的顺。下面的 K 指的是桶的数量</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>排序方法名</th>
<th>时间复杂度</th>
<th>空间复杂度</th>
<th>稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>选择排序</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>2</td>
<td>冒泡排序</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>3</td>
<td>插入排序</td>
<td>O(n) ~  o(n^2​)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>4</td>
<td>快速排序 (3.0)</td>
<td>O(n*log_2n​​)</td>
<td>O(log_2n​)</td>
<td>不稳定</td>
</tr>
<tr>
<td>5</td>
<td>归并排序</td>
<td>O(n*log_2n)</td>
<td>O(n)</td>
<td>稳定</td>
</tr>
<tr>
<td>6</td>
<td>堆排序</td>
<td>O(n*log_2n​)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>7</td>
<td>基数排序</td>
<td>O(n*log_2n​)</td>
<td>O(n)</td>
<td>稳定</td>
</tr>
<tr>
<td>8</td>
<td>希尔排序</td>
<td>O(n*log_2n​)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>9</td>
<td>计数排序</td>
<td>O(n + k)</td>
<td>O(k)</td>
<td>稳定</td>
</tr>
<tr>
<td>10</td>
<td>桶排序</td>
<td>O(n^2)</td>
<td>O(n + k)</td>
<td>稳定</td>
</tr>
</tbody>
</table>
<p>注：快速排序最快，但是不稳定也消耗空间；堆排不消耗空间但是较慢；归并消耗空间但是稳定</p>
<br>
<h2> 1.选择排序</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 2.冒泡排序</h2>
<p><strong>算法描述：</strong></p>
<ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个；</li>
<li>重复步骤1~3，直到排序完成。</li>
</ul>
<figure><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015223238449-2146169197.gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 3.插入排序</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 4.归并排序</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 5.快速排序</h2>
<p><strong>代码（3.0 版 随机取值做划分）：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 6.堆排序</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 7.基数排序</h2>
<p>注：基数排序是基于桶排序的，而桶排序是不基于比较的排序，不仅可用于数字的排序，这就使得桶排序需要根据数据状况设计，基数排序就是专门设计用于数字排序的，且比记数排序（也基于桶排序）好</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 8.希尔排序</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 9.计数排序</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/20230208/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png" type="image/png"/>
    </item>
    <item>
      <title>基础查找</title>
      <link>https://gzwrrr.github.io/article/algorithm/E-%E5%9F%BA%E7%A1%80%E6%9F%A5%E6%89%BE.html</link>
      <guid>https://gzwrrr.github.io/article/algorithm/E-%E5%9F%BA%E7%A1%80%E6%9F%A5%E6%89%BE.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">基础查找</source>
      <description>基础查找</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>算法</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 基础查找</h1>
<p><strong>各个查找时空复杂度</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th>查找方法名</th>
<th>时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td>二分查找</td>
<td>O(log_2n​)</td>
<td>O(n)</td>
</tr>
</tbody>
</table>
<h2> 1.二分查找</h2>
<p><strong>还可以解决：</strong></p>
<p>在有序数组中，找出大于等于某个数的最左位置或小于等于某个数的最右位置</p>
<p><strong>二分查找框架：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>基础二分查找：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>寻找左边界的二分查找：</strong></p>
<p><code>left</code> 的含义是 <code>nums</code> 数组中小于 <code>target</code> 的数的个数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>right</code> 的含义是 <code>nums</code> 数组中大于 <code>target</code> 的数的个数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.斐波那契查找</h2>
<h2> 3.插值查找</h2>
<h2> 4.线性查找</h2>
]]></content:encoded>
    </item>
    <item>
      <title>算法例题</title>
      <link>https://gzwrrr.github.io/article/algorithm/F-%E7%AE%97%E6%B3%95%E4%BE%8B%E9%A2%98.html</link>
      <guid>https://gzwrrr.github.io/article/algorithm/F-%E7%AE%97%E6%B3%95%E4%BE%8B%E9%A2%98.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">算法例题</source>
      <description>算法例题</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>算法</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 算法例题</h1>
<h2> 1.递归类</h2>
<h3> 1.1 小和问题</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 1.2 反转单链表</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 2.堆类</h2>
<h3> 2.1 几乎有序数组</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 2.2 给出中位数</h3>
<p>陆续输入数字，以较小的代价较快地给出中位数，利用大小根堆配合，维持堆顶是中位数就行</p>
<br>
<h2> 3.迭代类</h2>
<h3> 3.1 反转单链表</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>]]></content:encoded>
    </item>
    <item>
      <title>算法-其他</title>
      <link>https://gzwrrr.github.io/article/algorithm/Z-%E7%AE%97%E6%B3%95%E5%85%B6%E4%BB%96.html</link>
      <guid>https://gzwrrr.github.io/article/algorithm/Z-%E7%AE%97%E6%B3%95%E5%85%B6%E4%BB%96.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">算法-其他</source>
      <description>算法-其他</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>算法</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 算法-其他</h1>
<h2> 位运算</h2>
<ul>
<li>与：&amp;</li>
<li>或：|</li>
<li>非：~</li>
<li>异或：^</li>
</ul>
<br>
<h3> 异或</h3>
<p><strong>二进制，异或的性质</strong></p>
<p>0 ^ N = N;</p>
<p>N ^ N = 0;</p>
<p>异或运算满足：结合律、交换律（与顺序无关，可以用无进位相加理解）</p>
<p><strong>二进制，无进位相加表格理解</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">result</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>巧用异或的例子：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 不使用判断返回大值</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 判断是否为 2 或 4 的次幂</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 实现加减乘除</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 优化</h2>
<p><strong>入手点：</strong></p>
<p>（1）根据数据状况优化</p>
<p>（2）根据问题描述优化</p>
<p><strong>例如：</strong></p>
<p>二分查找一般用于有序数组中查找某一个值，无序数组中很少用到，无序列表应用二分法查找的一个例子是寻找局部最小</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 对数器</h2>
<p><strong>对数器的概念：</strong></p>
<ul>
<li>
<p>方法 A：优化后的解法，但不知道是否正确</p>
</li>
<li>
<p>方法 B：相对容易的实现的解法，已知正确</p>
</li>
<li>
<p>随机生成两个相同的数组，分别放入 A 和 B 测试 N 次比对结果是否一致，当 N 足够大时就能保		  证 A  方法是正确的，这就是对数器的基础理解</p>
</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>
<p>保证优化后的代码正确</p>
</li>
<li>
<p>不用依赖线上测试平台</p>
</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>需要实现两种解法</li>
</ul>
<br>
<h2> 比较器</h2>
<ul>
<li>
<p>比较器的是指就是重载比较运算符</p>
</li>
<li>
<p>比较器可以很好地应用在特殊标准的排序上</p>
</li>
<li>
<p>比较器可以很好地应用在根据特殊标准排序的结构上</p>
</li>
</ul>
<br>
<h2> 小技巧</h2>
<h3> 求中点</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 等概率返回</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Conda</title>
      <link>https://gzwrrr.github.io/article/python/conda.html</link>
      <guid>https://gzwrrr.github.io/article/python/conda.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Conda</source>
      <description>Conda</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>python</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Conda</h1>
<h2> 验证 conda</h2>
<ul>
<li>方法一：在电脑上点击开始 --&gt; Anaconda3 (64-bit) --&gt; Anaconda Navigator，如果出现Anaconda的界面，表示安装成功。</li>
<li>方法二：在电脑上点击开始 --&gt; Anaconda3 (64-bit) --&gt; 右键点击Anaconda Prompt (以管理员身份运行)，在弹开的命令行中输入<code>conda --version</code>或者<code>conda list</code>，如果出现版本号或者已安装的包名，表示安装成功。</li>
</ul>
<p>conda中的python版本有很多，你可以通过conda create --name  python= 来创建不同版本的python环境，例如，如果你想创建一个python3.6的环境，你可以执行conda create --name Python36 python=3.6。你也可以通过conda info --envs 来查看系统当前已有的python环境</p>
<h2> 创建新环境</h2>
<p>conda创建新环境的方法是使用 <code>conda create --name &lt;env_name&gt; python=&lt;version&gt;</code> 命令12，其中 <code>&lt;env_name&gt;</code> 是你想要的环境名，<code>&lt;version&gt;</code> 是你想要的python版本。例如，如果你想创建一个名为 <code>myenv</code>的环境，使用python3.8版本，你可以执行 <code>conda create --name myenv python=3.8</code>。创建完后，你可以在anaconda的目录下找到 <code>envs/myenv</code>目录</p>
<h2> 切换环境</h2>
<ol>
<li>打开命令行窗口，输入<code>conda env list</code>或者<code>conda info --envs</code>查看当前已有的虚拟环境，其中带星号的是当前激活的环境。</li>
<li>如果想要切换到其他虚拟环境，可以使用<code>conda activate &lt;NAME&gt;</code>命令，其中<code>&lt;NAME&gt;</code>是你想要切换的虚拟环境的名称。例如，如果你想要切换到名为my_test的虚拟环境，可以输入<code>conda activate my_test</code></li>
<li>如果想要退出当前虚拟环境，可以使用<code>conda deactivate</code>命令。</li>
</ol>
<h2> 镜像源</h2>
<p>conda国内镜像源设置的方法是使用 <code>conda config --add channels &lt;URLS&gt;</code> 命令1，其中 <code>&lt;URLS&gt;</code> 是你想要添加的镜像源的地址。你可以从一些国内的网站上找到可用的镜像源，例如https://developer.aliyun.com/mirror/anaconda2。在使用国内镜像源的时候，最好删除一下~/.condarc 里的 defaults 频道，因为这是官方的频道，在国内连接可能会很慢或者失败1。你可以用vim打开~/.condarc 手动删除掉 defaults 这一行，或者运行conda config --remove channels defaults 命令</p>
<ul>
<li>打开命令行窗口，输入<code>conda config --show-sources</code>查看当前的镜像源设置。</li>
<li>如果想要添加新的镜像源，可以使用<code>conda config --add channels &lt;URL&gt;</code>命令，其中 <code>&lt;URL&gt;</code> 是你想要添加的镜像源的网址。例如，如果你想要添加清华大学的镜像源，可以输入<code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</code></li>
<li>如果想要删除某个镜像源，可以使用<code>conda config --remove channels &lt;NAME&gt;</code>命令，其中 <code>&lt;NAME&gt;</code> 是你想要删除的镜像源的名称。例如，如果你想要删除默认的官方镜像源（可能会导致连接慢或失败），可以输入<code>conda config --remove channels defaults</code></li>
<li>如果想要查看或修改镜像源配置文件，可以使用文本编辑器打开~/.condarc文件（Linux/Mac）或C:\Users\用户名.condarc文件（Windows），并按照需要进行修改。</li>
<li>修改完毕后，可以再次使用<code>conda config --show-sources</code>命令查看是否生效。</li>
</ul>
<h2> 移除镜像源</h2>
<ul>
<li>在命令行输入<code>conda config --show channels</code>，显示当前的镜像源</li>
<li>在命令行输入<code>conda config --remove channels &lt;channel_name&gt;</code>，移除指定的镜像源</li>
<li>在命令行输入<code>conda config --remove-key channels</code>，移除所有的镜像源</li>
</ul>
<p>cdo是一种用于操作和分析气候和数值天气预报模型数据的命令行工具1。你可以用conda下载cdo，方法是使用conda install -c conda-forge cdo 命令12。这样就可以在你的conda环境中安装cdo了。安装后，你可以运行cdo来使用它</p>
<p>你的conda没有添加conda-forge作为默认搜索的频道，或者你的频道顺序不正确。你可以使用conda config --add channels conda-forge命令来添加conda-forge频道，或者使用conda config --show channels命令来查看和修改你的频道顺序2。 你的conda没有更新到最新版本，或者你的网络连接不稳定。你可以使用conda update conda命令来更新你的conda，或者检查你的网络设置2。 你想要安装的cdo版本和你的python版本不兼容。你可以使用conda search -c conda-forge cdo命令来查看可用的cdo版本，或者使用不同的标签来指定cdo版本。例如，如果你想要安装支持python3.8的cdo，可以输入conda install -c "conda-forge/label/cf202003" cdo</p>
]]></content:encoded>
    </item>
    <item>
      <title>媒体处理</title>
      <link>https://gzwrrr.github.io/guide/AI%E5%B7%A5%E5%85%B7/%E5%AA%92%E4%BD%93%E5%A4%84%E7%90%86.html</link>
      <guid>https://gzwrrr.github.io/guide/AI%E5%B7%A5%E5%85%B7/%E5%AA%92%E4%BD%93%E5%A4%84%E7%90%86.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">媒体处理</source>
      <pubDate>Wed, 22 Feb 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 媒体处理</h1>
]]></content:encoded>
    </item>
    <item>
      <title>文档转换</title>
      <link>https://gzwrrr.github.io/guide/%E5%AF%BC%E8%88%AA/%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%AF%BC%E8%88%AA/%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">文档转换</source>
      <pubDate>Wed, 22 Feb 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 文档转换</h1>
]]></content:encoded>
    </item>
    <item>
      <title>环境配置</title>
      <link>https://gzwrrr.github.io/guide/%E5%AF%BC%E8%88%AA/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%AF%BC%E8%88%AA/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">环境配置</source>
      <pubDate>Wed, 22 Feb 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 环境配置</h1>
]]></content:encoded>
    </item>
    <item>
      <title>镜像站</title>
      <link>https://gzwrrr.github.io/guide/%E5%AF%BC%E8%88%AA/%E9%95%9C%E5%83%8F%E7%AB%99.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%AF%BC%E8%88%AA/%E9%95%9C%E5%83%8F%E7%AB%99.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">镜像站</source>
      <pubDate>Wed, 22 Feb 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 镜像站</h1>
]]></content:encoded>
    </item>
    <item>
      <title>CSS</title>
      <link>https://gzwrrr.github.io/guide/%E5%B8%B8%E7%94%A8/CSS.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%B8%B8%E7%94%A8/CSS.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">CSS</source>
      <pubDate>Wed, 22 Feb 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> CSS</h1>
]]></content:encoded>
    </item>
    <item>
      <title>在线编辑器</title>
      <link>https://gzwrrr.github.io/guide/%E5%B8%B8%E7%94%A8/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%B8%B8%E7%94%A8/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">在线编辑器</source>
      <pubDate>Wed, 22 Feb 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 在线编辑器</h1>
]]></content:encoded>
    </item>
    <item>
      <title>正则表达式工具</title>
      <link>https://gzwrrr.github.io/guide/%E5%B8%B8%E7%94%A8/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B7%A5%E5%85%B7.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%B8%B8%E7%94%A8/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B7%A5%E5%85%B7.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">正则表达式工具</source>
      <pubDate>Wed, 22 Feb 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 正则表达式工具</h1>
]]></content:encoded>
    </item>
    <item>
      <title>生成工具</title>
      <link>https://gzwrrr.github.io/guide/%E5%B8%B8%E7%94%A8/%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%B8%B8%E7%94%A8/%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">生成工具</source>
      <pubDate>Wed, 22 Feb 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 生成工具</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Java 并发基本概念</title>
      <link>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/A-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html</link>
      <guid>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/A-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Java 并发基本概念</source>
      <description>Java 并发基本概念</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>java</category>
      <category>并发</category>
      <pubDate>Mon, 07 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Java 并发基本概念</h1>
<ul>
<li>文章主要是本人在学习 Java 并发（<a href="https://www.bilibili.com/video/BV16J411h7Rd?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">视频戳这里</a>）时的笔记，主要用于速查</li>
<li>目前还有许多点未补全，且结构还未进行调整，阅读起来相对困难</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>进程与线程</title>
      <link>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/B-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.html</link>
      <guid>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/B-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">进程与线程</source>
      <description>进程与线程</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>java</category>
      <category>并发</category>
      <pubDate>Mon, 07 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 进程与线程</h1>
<h2> 1.进程</h2>
<ul>
<li>加载指令、管理内存、管理 IO</li>
<li>当程序代码从磁盘加载到内存便开启了一个进程</li>
<li>进程是一个程序的实例，大多数程序可以同时运行多个进程</li>
<li>进程拥有共享的资源：内存、空间等，共其内部的线程共享</li>
<li>进程间的通信较为复杂，同一台计算机的进程通信成为 IPC；不同计算机之间的进程通信需要通过网络并遵守共同的协议（如：HTTP）</li>
</ul>
<h2> 2.线程</h2>
<ul>
<li>
<p>一个进程内可以分为多个线程</p>
</li>
<li>
<p>一个线程就是一个指令流，线程会将这个指令流中的命令一条条地交给 CPU 执行</p>
</li>
<li>
<p>Java 中，线程作为最小的调度单位，进程作为资源分配的最小单位</p>
</li>
<li>
<p>在 Windows 中，进程是不活动的，只是作为线程的容器</p>
</li>
<li>
<p>多个线程可以访问同一个共享变量</p>
</li>
<li>
<p>线程的上下文切换的成本一般比进程的上下文切换低</p>
</li>
</ul>
<h2> 3.多线程</h2>
<p><strong>1.值得注意的是：</strong></p>
<ul>
<li>IO 操作是不占用 CPU 的，只是我们拷贝文件使用的是阻塞 IO，这时即使不占用 CPU 也还是要等待 IO 结束，没有充分利用到线程</li>
<li>这种情况下可以使用非阻塞 IO 或异步 IO 解决</li>
</ul>
<p><strong>2.优势：</strong></p>
<ul>
<li>可以实现异步操作，避免阻塞</li>
<li>在 CPU 是多核的情况下可以提高程序的效率</li>
<li>单核 CPU 下多线程一般会比单线程慢，因为多线程还要切换不同线程，这也是一个耗时的操作。但是这不意味着单核下多线程没有用，因为轮流切换线程可以任务使不同任务得以进行，不至于让单个程序一直占用 CPU</li>
</ul>
<h2> 4.创建线程</h2>
<p><strong>三种方式创建线程：</strong></p>
<ul>
<li>Thread 类</li>
<li>Runnable 接口</li>
<li>FutureTask<code>&lt;V&gt;</code> 类
<ul>
<li>FutureTask 实现了 RunnableFuture 接口，而 RunnableFuture 继承了 Runnable 接口和 Future<code>&lt;V&gt;</code> 接口（接口可以多继承，类不行），这可以返回一个任务的执行结果（Runnable 没有返回值），多线程操作间更加方便</li>
<li>FutureTask 可以接收 Callable 类型的参数（Callable 与 Runnable 类似，前者比后者多了返回值并且可以抛出异常），以此来处理有返回值的情况</li>
<li>Callable 接口中只有一个 call 方法，并且使用了 @FunctionalInterface 注解</li>
</ul>
</li>
</ul>
<p><strong>【注意】一般更推荐使用 Runnable 接口的创建方式，，因为这让 Runnable 任务脱离了 Thread 的继承体系，即：使得任务和线程创建分开（意味着更灵活），并且常常使用 lambda 表达式简化。此外，使用 Runnable 还更容易与线程池等高级 API 结合</strong></p>
<h3> 4.1 Thread</h3>
<p><strong>直接使用 Thread 创建线程：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.2 Runnable</h3>
<p><strong>1.使用 Runnable 接口创建线程：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.使用 lambda 表达式的条件</strong></p>
<ul>
<li>接口中只有一个方法</li>
<li>使用了 @FunctionalInterface 注解</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.3 FutureTask</h3>
<p><strong>使用 FutureTask 方式创建：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5.线程运行原理</h2>
<h3> 5.1 栈与栈帧</h3>
<ul>
<li>JVM 由堆、栈、方法区组成，其中栈内存就是给线程用的，每启动一个线程，虚拟机就会为其分配一块栈内存</li>
<li>每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占的内存</li>
<li>每个线程只能有一个活动栈帧，对应着当前执行的方法</li>
<li>不同的线程间的栈内存是互不干扰的</li>
</ul>
<h3> 5.2 线程上下文切换</h3>
<p><strong>1.切换时机：</strong></p>
<ul>
<li>线程的 CPU 时间片用完</li>
<li>执行垃圾回收时</li>
<li>有更高优先级的线程需要运行</li>
<li>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock等方法</li>
</ul>
<p><strong>2.切换发生时：</strong></p>
<ul>
<li>需要由操作系统保存当前线程的状态并恢复另一个线程的状态，Java 中对应的概念就是程序计数器，他的作用是记住下一条 jvm 指令的执行地址，这是线程私有的</li>
<li>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等</li>
<li>线程上下文频繁地切换会影响性能</li>
</ul>
<h2> 6.线程的主要方法</h2>
<h3> 6.1 run 与 start</h3>
<ul>
<li>创建线程后可以直接调用 run 方法，但是这样执行者就变成了 main 线程，没有提高性能，只有使用 start 方法才能由创建的线程执行该任务</li>
<li>start 方法是不能重复调用的</li>
</ul>
<h3> 6.2 sleep 与 yield</h3>
<ul>
<li>sleep 会让当前线程从 Runnable 进入 Time waiting 阻塞状态，其他线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 会抛出 InterruptException</li>
<li>睡眠结束后的线程未必会立刻得到执行；建议使用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性</li>
<li>yield 会让当前线程从 Running 进入 Runnable 就绪状态，然后调度执行其他同优先级的线程，此时如果没有同优先级的线程，那么不能保证能让当前线程暂停的效果。yield 具体的实现依赖于操作系统的任务调度器</li>
<li>调度器只会把时间片分给 Runnable 状态的线程而不会分给 Time Waiting 状态的线程</li>
<li>sleep 会有一个真正的休眠时间，yield 在没有其他线程的情况下还是会继续本线程</li>
<li>线程优先级会提示（hint）调度器优先调度优先级高的线程，但这仅仅是一个提示，调度器是可以忽略掉的。如果 CPU 比较忙，那么优先级高的线程会获得更加多的时间片，但 CPU 闲时，优先级几乎没作用</li>
</ul>
<h3> 6.3 join</h3>
<ul>
<li>等待调用 join 的线程执行完成后再继续执行当前线程的</li>
<li>join 是用来同步线程的</li>
<li>join 可以带参数，倘若参数设置的时长小于线程的总时常，那么就会提前打断线程；倘若设置的时常大于线程的总时常，那么在线程任务完成后会直接结束而不是继续等待，这也是带参数时和 sleep 方法的区别</li>
<li>join 方法使用了保护性暂停模式（详见第三大点）</li>
</ul>
<h3> 6.4 interrupt 与 park</h3>
<ul>
<li>interrupt 方法用于打断线程，见 1.7 所示</li>
<li>park 方法可以让线程停止，之后的代码不会执行，用 interrupt 可以打断这种状态</li>
<li>注意，在打断标记为 true 时，park 方法会失效，将打断标记置为真即可（使用interrupted，见 1.7 解释）</li>
</ul>
<h3> 6.5 stop、suspend 与 resume</h3>
<ul>
<li>三个方法都不建议使用，已经过时，容易破坏同步代码块，造成线程死锁。其都有对应的解决方法</li>
<li>stop 方法用于立即停止线程运行；suspend 方法用于挂起（暂停）线程运行；resume 方法用于恢复线程运行。</li>
</ul>
<h3> 6.6 wait / notify</h3>
<ul>
<li>Monitor 中的 Owner 线程发现条件不满足时，调用 wait 方法，即可让线程进入 WaitSet 变为 Waiting 状态</li>
<li>Blocked 和 Waiting 的线程都会处于阻塞状态，不占用 CPU 时间片</li>
<li>Blocked 线程会在 Owner 线程释放锁时唤醒</li>
<li>Waiting 线程会在 Owner 线程调用 notify 或 notifyAll 时唤醒，但是唤醒后并不意味着立即获得锁，仍需要进入 EntryList 中重新竞争</li>
<li>上述方法都是线程之间进行协作的手段，都是属于 object 对象的方法。必须要获取对象的锁才能调用这几个方法</li>
</ul>
<p><strong>1.相关 API</strong></p>
<ul>
<li>obj.wait：让进入 object monitor 的线程到 WaitSet 等待。不带参数或者参数为 0 的 wait 方法表示无限制等待下去，参数是用于设置超时时间的（timeout）。特别注意 wait 方法还有两个参数（另一个为 nanos）的重载，但是 nanos 参数并不能精确到纳秒，通过源码可以发现，当 nanos 大于 0 时会直接将 timeout 的值加一</li>
<li>obj.notify：在 object 上正在 WaitSet 等待的线程中挑一个唤醒</li>
<li>obj.notifyAll：让 object 上正在 WaitSet 等待的线程全部唤醒</li>
</ul>
<p><strong>2.基本用法</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.sleep 和 wait 的区别</strong></p>
<ul>
<li>sleep 是 Thread 的方法，而 wait 是 Object 的方法</li>
<li>sleep 不需要强制和 synchronized 配合使用，但是 wait 需要和 synchronized 一起使用</li>
<li>sleep 在睡眠的同时不会释放对象锁，但是 wait 在等待时会释放对象锁</li>
</ul>
<h3> 6.7 LockSupport 的 park 和 unpark</h3>
<ul>
<li>LockSupport.park 用于暂停当前线程；LockSupport.unpark 用于恢复某个线程的运行</li>
<li>与 Object 的 wait 与 notify(All) 相比
<ul>
<li>wait，notify 和 notifyAll 必须配合 Object Monitor 一起使用，而 unpark 不需要</li>
<li>park 和 unpark 是以线程为单位来阻塞和唤醒线程，而 notify 只能随机唤醒一个等待线程，notifyAll 是唤醒所有的等待线程（不那么精确）</li>
<li>park 和 unpark 可以先 unpark，而 wait 和 notify 不能先 notify</li>
</ul>
</li>
</ul>
<p><strong>park 和 unpark 原理</strong></p>
<ul>
<li>每个线程都有自己的一个 Parker 对象（有 C 实现，在 Java 中不可见），有三部分组成：_ count、_ cond、_ mutex（互斥锁）</li>
<li>线程就像一个旅人，Parker 就像他随身携带的背包，条件变量（_ cond）就好比背包中的帐篷；_ count 就好比背包中的备用干粮（0 为耗尽，1 为充足）</li>
<li>调用 park 就是要看需不需要停下来休息
<ul>
<li>如果干粮耗尽，那么就钻进帐篷休息</li>
<li>如果备用干粮充足，那么不需要停留，继续前进</li>
</ul>
</li>
<li>调用 unpark 就好比令干粮充足
<ul>
<li>如果此时线程还在帐篷中，就唤醒让他继续前进</li>
<li>如果这时线程还在运行，那么下次他调用 park 时，仅是消耗掉备用干粮，不需要停留继续前进。因为背包空间有限，多次调用 unpark 仅会补充一份备用干粮</li>
</ul>
</li>
</ul>
<h2> 7.线程停止的方法</h2>
<p>【注意】</p>
<ul>
<li>抛出的异常被捕获处理后，之后的代码都可以正常执行，这就是为什么下面捕获异常后循环还在继续</li>
<li>但是如果将异常往上抛出，那么之后的代码就不可以继续执行</li>
</ul>
<p>【注意】</p>
<ul>
<li>下面使用的 isInterrupted 方法是用于判断线程是否被打断的，不会清除打断标记</li>
<li>而与之相像的另外一个方法 interrupted 也是判断线程是否被打断，但是会清除打断标记</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.主线程与守护线程</h2>
<ul>
<li>默认情况下，Java 进程需要等待所有的线程都运行结束才会结束</li>
<li>有一种特殊的线程叫守护线程，只要其他非守护线程结束了，就会强制结束（即使守护线程的代码没有执行完也会强制结束）</li>
<li>使用 setDaemon 方法（参数为 true）可以将线程设置成守护线程</li>
<li>垃圾回收器线程就是一种守护线程。Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 在收到 shutdown 命令后，不会等待它们处理完当前请求</li>
</ul>
<h2> 9.线程的状态</h2>
<p><strong>1.从操作系统层面描述（五种状态）</strong></p>
<ul>
<li>初始状态：仅是在语言层面创建了线程对象，还未与操作系统线程关联</li>
<li>可运行状态（就绪状态）：指该线程已经被创建（与操作系统线程相关联），可以由 CPU 调度执行</li>
<li>运行状态：指获取了 CPU 时间片运行中的状态</li>
<li>阻塞状态：
<ul>
<li>如调用了阻塞 API，如 BIO 读写文件，这时该线程实际上不会使用到 CPU，会导致线程上下文切换，进入阻塞状态</li>
<li>等待操作完毕后，会由操作系统唤醒阻塞的线程，转换至可运行状态。</li>
<li>阻塞与可运行状态的区别是，对阻塞的线程来说只要它们一直不被唤醒，那么调度器就一直不会考虑调度它们</li>
</ul>
</li>
<li>终止状态：表示线程已经执行完毕，生命周期已经结束，不会再转换为其他状态</li>
</ul>
<p><strong>2.从 Java API 层面描述（六种状态，按照 Thread.State 枚举分类）</strong></p>
<p>使用 getState 方法可以获取线程当前的状态</p>
<ul>
<li>NEW：线程刚被创建，但是还没有调用 start 方法</li>
<li>RUNNABLE：当调用了 start 方法之后便进入可运行状态，涵盖了操作系统的：
<ul>
<li>可运行状态</li>
<li>运行状态（由于 BIO 导致的线程阻塞 Java 是无法区分的，仍然认为是可运行）</li>
<li>阻塞状态</li>
</ul>
</li>
<li>TERMINATED：线程代码运行结束</li>
<li>Java 中三种特殊的阻塞：
<ul>
<li>BLOCKED（如：加锁）</li>
<li>WAITING（如：join，wait）</li>
<li>TIMED_WAITING（如：sleep）</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 锁</title>
      <link>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/C-Java%E9%94%81.html</link>
      <guid>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/C-Java%E9%94%81.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Java 锁</source>
      <description>Java 锁</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>java</category>
      <category>并发</category>
      <pubDate>Mon, 07 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Java 锁</h1>
<h2> 1.线程的活跃性</h2>
<h3> 1.1 死锁</h3>
<ul>
<li>
<p>当一个线程需要同时获取多把锁时就容易出现死锁，如：</p>
<ul>
<li>线程 t1 需要获得对象 A 的锁，接下来想获得对象 B 的锁</li>
<li>线程 t2 需要获得对象 B 的锁，接下来想获得对象 A 的锁</li>
</ul>
</li>
<li>
<p>顺序加锁可以解决死锁，但是容易导致饥饿现象；可以使用 ReentrantLock 解决死锁问题</p>
</li>
</ul>
<h3> 1.2 活锁（待补充）</h3>
<ul>
<li>出现在两个线程互相改变对方的结束条件，导致最后谁也无法结束</li>
</ul>
<h3> 1.3 饥饿（待补充）</h3>
<ul>
<li>一个线程由于优先级太低，导致始终得不到 CPU 调度执行，不能够结束</li>
</ul>
<h2> 2.ReentrantLock</h2>
<p><strong>相较于 synchronized 它具备以下特点：</strong></p>
<ul>
<li>可中断</li>
<li>可以设置超时时间</li>
<li>可以设置公平锁（先进先出）</li>
<li>支持多个条件变量（如 WaitSet 就是一个条件变量，多个意味着细分了）</li>
</ul>
<p><strong>但与 synchronized 一样，都支持可重入：</strong></p>
<ul>
<li>可重入是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获得这把锁</li>
<li>如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住</li>
</ul>
<h3> 2.1 可重入</h3>
<p><strong>可重入特性示例如下：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.2 可打断</h3>
<p><strong>可打断特性示例如下：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.3 锁超时</h3>
<p><strong>锁超时特性示例如下：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.4 公平锁</h3>
<ul>
<li>ReentrantLock 默认是不公平的，可以通过构造方法设置为公平锁</li>
<li>一般没有必要使用公平锁，这会降低并发度</li>
</ul>
<h3> 2.5 条件变量</h3>
<ul>
<li>synchronized 中也有条件变量，如 WaitSet，相当于休息室，当条件不满足时就进入休息室等待；而 ReentrantLock 支持多个条件变量，即支持多间休息室，这意味着更加细分</li>
<li>使用流程：
<ul>
<li>await 前需要获取锁</li>
<li>await 执行后会释放锁，进入 conditionObject 等待</li>
<li>await 的线程被唤醒（打断或超时）会重新竞争 lock 锁</li>
<li>竞争 lock 锁成功后，从 await 后继续执行</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 并发共享模型（重点）</title>
      <link>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/D-Java%20%E5%B9%B6%E5%8F%91%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89.html</link>
      <guid>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/D-Java%20%E5%B9%B6%E5%8F%91%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Java 并发共享模型（重点）</source>
      <description>Java 并发共享模型（重点）</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>java</category>
      <category>并发</category>
      <pubDate>Mon, 07 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Java 并发共享模型（重点）</h1>
<h2> 1.管程</h2>
<h3> 1.1 共享带来的问题</h3>
<ul>
<li>一个程序运行多个线程本身是没有问题的，问题在于多个线程访问共享资源，但这是对多个线程对共享资源读写操作时发生指令交错情况而言的</li>
<li>临界区：一段代码块内如果存在对共享资源的多线程读写操作，那么称这段代码块为临界区</li>
<li>竞态条件：多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，那么就称发生了竞态条件</li>
</ul>
<h2> 2.Synchronized</h2>
<h3> 2.1 基本用法</h3>
<ul>
<li>为了避免临界区的竞态条件发生，可以采用：
<ul>
<li>阻塞式方案：synchronized（对象锁，使用互斥的方法使同一时刻之多只有一个线程能够持有对象锁），lock</li>
<li>非阻塞式方案：原子变量</li>
</ul>
</li>
</ul>
<p><strong>【注意】Java 中互斥和同步都可以采用 synchronized 关键字来完成，但是还是由区别的：</strong></p>
<ul>
<li>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码</li>
<li>同步是由于线程执行的先后顺序不同，需要一个线程等待其他线程运行到某个点</li>
</ul>
<p><strong>【注意】加对象锁的原理大致可以理解成：</strong></p>
<ul>
<li>一个线程在执行非原子性操作时，加锁会让这个操作变成原子性操作</li>
<li>这就意味着，当执行的线程在得到的时间片内没有完成整个操作，锁就不会解开，也即其他线程即使得到了时间片也无法对这个对象进行操作</li>
<li>只有等到未完成操作的线程再次得到自己加锁的对象并完成了整个操作，即使得非原子性操作在逻辑上变成原子性操作时，锁才会解开，其他线程才能访问这个对象，否则就得一直出现上述第二点的情况，这也会导致性能下降（还有线程上下文切换的开销）</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.2 方法上的 synchronized</h3>
<p><strong>1.以上述代码为例子，将其中的 count 封装成对象：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.上述代码等价于下面的，即加在方法上的 synchronized 并不是锁方法（没有锁方法这个操作），而是锁住当前实例化的对象：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.加在静态方法上的话是锁住类对象的，如下：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3.变量的线程安全分析</h2>
<h3> 3.1 成员变量和静态变量</h3>
<ul>
<li>如果它们没有共享，则是线程安全的</li>
<li>如果它们共享，那么要根据它们的状态是否能够被改变来判断
<ul>
<li>如果只有读操作，则是线程安全的</li>
<li>如果有读写操作，则这段代码是临界区，需要考虑线程安全</li>
</ul>
</li>
</ul>
<h3> 3.2 局部变量</h3>
<ul>
<li>局部变量是线程安全的</li>
<li>但是局部变量引用的对象未必是线程安全的
<ul>
<li>如果该对象没有逃离方法的作用范围，则是线程安全的</li>
<li>如果该对象逃离了方法的作用范围，则需要考虑线程安全</li>
</ul>
</li>
<li>父类的局部变量要是暴露引用，其子类使用时可能会有线程安全问题（子类覆盖了父类的方法，并且在其中创建了新线程并使用了某个变量的引用），此时应该将父类方法从 public 改成 private 防止父类方法被覆盖。此外还可以考虑在方法上加上 final 关键字防止子类覆盖</li>
</ul>
<h3> 3.3 线程安全类</h3>
<ul>
<li>线程安全类中的方法大多数时线程安全的。不可变类（如：String、Integer）时线程安全的，因为其内部的状态（属性）是不可变的</li>
<li>但是这些线程安全的方法组合在一起时可能出现线程安全问题</li>
<li>例如 Hashtable 的 get 和 put 方法都是线程安全的，但是先判断 get 的 key 是否为空再 put 的话，此时倘若有两个线程，一个先 get，另一个 get 后未等到 先前的线程 put 就先把自己的结果 put，就会导致之后第一个 put 后会把第二个先 put 的覆 盖掉，从而导致线程安全问题</li>
</ul>
<h2> 4.对象头</h2>
<h3> 4.1 普通对象头</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/普通对象头.png" alt="image-20220701093956420" tabindex="0" loading="lazy"><figcaption>image-20220701093956420</figcaption></figure>
<h3> 4.2 数组对象头</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/数组对象头.png" alt="image-20220701094022990" tabindex="0" loading="lazy"><figcaption>image-20220701094022990</figcaption></figure>
<h3> 4.3 Mark Word</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/MarkWord.png" alt="image-20220701094445330" tabindex="0" loading="lazy"><figcaption>image-20220701094445330</figcaption></figure>
<h2> 5.Monitor/轻量级锁/偏向锁</h2>
<h3> 5.1 Monitor（重量级锁）</h3>
<ul>
<li>Monitor 操作系统层面实现的锁，称为监视器或管程</li>
<li>Java 中的 synchronized 在上锁时会关联 Monitor，成为 Monitor 的 owner</li>
<li>其他线程想要获取共享资源时就会访问 Monitor，查看其是否有 owner，如果有则进入 blocked 状态，进入阻塞队列</li>
<li>锁释放掉后阻塞队列中的线程才能成为 Monitor 的 owner</li>
</ul>
<h3> 5.2 轻量级锁</h3>
<ul>
<li>轻量级锁对使用者是透明的，语法仍然是 synchronized</li>
<li>轻量级锁的使用场景：如果一个对象有对线程访问，但是多线程访问的时间是错开的（没有竞争），那么可以使用轻量级锁优化</li>
<li>轻量级锁的创建与解锁：
<ul>
<li>创建锁记录 Lock Record 对象，每个线程的栈帧都会包含一个锁记录结构，内部可以存储锁定对象的 Mark Word</li>
<li>让锁记录中的 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录（即进行了数据交换）</li>
<li>如果 cas 替换成功，对象头中就会存储锁记录地址和状态 00，表示由该线程给对象加锁（cas 是一个原子性的交换操作）</li>
<li>如果 cas 替换失败，则有两种情况：如果是其他线程已经持有了该 Object 的轻量级锁，这时就表明有竞争，进入锁膨胀过程；如果是自己执行了 synchronized 锁重入，那么就再添加一条 Lock Record 作为重入的计数（值为 null）</li>
<li>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录（去除重入的锁记录），表示重入计数减一</li>
<li>当退出 synchronized 代码块（解锁时）锁记录不为null，这时使用 cas 将 Mark Word 的值恢复给对象头。如果恢复成功，说明解锁成功；如果失败，说明轻量级锁进行了锁膨胀或已经升级成了重量级锁，进入重量级锁的解锁流程</li>
</ul>
</li>
<li>锁膨胀过程
<ul>
<li>如果在尝试加轻量级锁的过程中，cas 操作无法成功，这时一种情况就是有其他线程为此对象上了轻量级锁（即有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁</li>
<li>流程：在线程发现 Object 已经有轻量级锁时，该线程会为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址，然后该线程会让自己进入 Monitor 的阻塞队列中（EntryList Blocked）解锁时，退出的线程会使用 cas 将 Mark Word 的值恢复给对象头，这时会进入重量级解锁流程，按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒阻塞队列中的线程</li>
</ul>
</li>
<li>自旋优化
<ul>
<li>重量级锁竞争的时候，还可以使用自旋进行优化，如果当前线程自旋成功（即多次循环测试出当前持锁线程已经退出了同步块，释放了锁）这时当前线程就可以避免阻塞</li>
<li>自旋会占用 CPU 时间，在单核 CPU 的情况下进行自旋就是浪费时间，只有多核 CPU 自旋才能发挥优势</li>
<li>在 Java 6 之后自旋锁都是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会较高，这样就会多自旋几次，反之就会少自旋几次。Java 7 之后不能控制是否开启自旋功能</li>
</ul>
</li>
</ul>
<h3> 5.3 偏向锁</h3>
<ul>
<li>
<p>轻量级锁在没有竞争时（只有自己一个单独的线程）每次重入仍然需要执行 cas 操作</p>
</li>
<li>
<p>Java 6 中引入了偏向锁来进一步优化：只有第一次使用 cas 将线程 is 设置到对象的 Mark Word 中，之后发现这个线程 id 是自己就表示没有竞争，不用重新 cas，以后只要不发生竞争，这个对象就归该线程所有</p>
</li>
<li>
<p>当一个对象创建时：</p>
<ul>
<li>如果开启了偏向锁（默认开启），那么对象创建后，Mark Word 的值为 0x05 即后三位为 101，这时它的对象头中的 thread、epoch、age 都为 0</li>
<li>偏向锁默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加入 VM 蚕食 -XX:BiasedLockingStartupDelay=0 来禁用延迟</li>
<li>如果没有开启偏向锁，那么对象创建之后，Mark Word 值为 0x01 即最后三位为 001，这时它的对象头中的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值</li>
<li>当创建对象后调用 hashcode 方法，会直接禁用掉偏向锁，因为偏向锁中没有存储 hashcode 的字段，只好使用轻量级锁，因此会禁用掉偏向锁</li>
</ul>
</li>
<li>
<p>锁的撤销：使用 wait / notify 会撤销偏向锁或轻量级锁，因为只有重量级锁才可以调用这些方法</p>
</li>
<li>
<p>批量重偏向：如果对象被多个线程访问，但是没有竞争，这时偏向锁线程 t1 的对象仍然有机会重新偏向 t2，重偏向会重置对象恶的 Thread ID。当撤销偏向锁的阈值超过 20 次时，jvm 会认为偏向错误了，会在给这些对象加锁时重新偏向至当前加锁的线程</p>
</li>
<li>
<p>批量撤销：当撤销偏向锁阈值超过 40 次后，jvm 会认为确实偏向错误了（不应该偏向），于是整个类的所有对象都会变为不可偏向，新建的对象也是不可偏向的</p>
</li>
</ul>
<h3> 5.4 锁消除</h3>
<ul>
<li>JIT 即时编译器会优化字节码中不需要加的锁，即去除加锁的操作。</li>
<li>JIT 是默认开启的，禁用可以加入 VM 参数：-XX:-EliminateLocks</li>
</ul>
<h2> 6.Java 内存模型</h2>
<ul>
<li>JMM 定义了主存、工作内存等的抽象概念，底层对应着 CPU、寄存器、缓存、硬件内存、CPU 指令优化等</li>
<li>JMM 体现在以下几个方面：
<ul>
<li>可见性：保证指令不会受 CPU 缓存的影响</li>
<li>原子性：保证指令不会受到线程上下文切换的影响</li>
<li>有序性：保证指令不会受 CPU 指令并行优化的影响</li>
</ul>
</li>
</ul>
<h3> 6.1 可见性</h3>
<ul>
<li>主存与工作内存之间还有缓存，JIT 会将主存中的变量优化，即存入缓存中提高效率，额外开辟的线程都将从缓存中读取数据</li>
<li>但是这样一来，即使修改了主存中的变量值，额外开辟的线程还是会读取缓存中的数据，即读取到的都是旧值</li>
</ul>
<p><strong>1.使用 volatile 解决：</strong></p>
<ul>
<li>在共享的变量上加上 volatile 关键字，使得变量不存如缓存</li>
<li>volatile 可以用来修饰成员变量和静态成员变量，可以避免线程从自己的工作缓存中查找变量的值，即线程操作 volatile 变量都是直接操作内存的</li>
</ul>
<p><strong>2.使用 synchronized 解决：</strong></p>
<ul>
<li>在共享变量外使用 synchronized 可以使得变量对线程都是可见的</li>
<li>但是 synchronized 需要创建 Monitor，是个重量级的操作，开销比较大</li>
</ul>
<p><strong>3.volatile 原理：</strong></p>
<ul>
<li>volatile 的底层实现原理是内存屏障
<ul>
<li>对 volatile 变量的写指令后会加入写屏障，保证在该屏障之前的对共享变量的改动都能同步到主存中。写屏障会确保指令重排时不会将写屏障之前的代码排在写屏障之后</li>
<li>对 volatile 变量的读指令后会加入读屏障，保证在该屏障之后的对共享变量的读取都是加载主存中的最新数据。读屏障会确保指令重排时不会将读屏障之后的代码排在读屏障之前</li>
</ul>
</li>
</ul>
<h3> 6.2 原子性</h3>
<ul>
<li>volatile 只能保证可见性但是不能保证没有指令交错，即在多个线程同时修改一个变量时，还是有可能读到未修改前的值</li>
<li>volatile 适用于一个线程修改变量而多个线程读取的情况</li>
<li>synchronized 可以同时保证原子性和可见性</li>
</ul>
<h3> 6.3 有序性</h3>
<ul>
<li>JVM 会在不影响正确性的前提下，调整语句的执行顺序，这也称为指令重排</li>
<li>多线程下的指令重排会影响正确性</li>
<li>使用 volatile 修饰变量可以避免这个变量之前的指令重排序</li>
<li>synchronized 只有在完全保护一个变量的情况下才能保证逻辑上的有序性（即实际上还是重排了，但是被同步块保护了，从最终结果来说还是有序的），如果一个变量在同步代码块之外被修改了，还是有可能出现指令重排的情况</li>
</ul>
<h3> 6.4 double-checked locking</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.5 happens-before</h3>
<ul>
<li>happens-before 规定了对共享变量的写操作对其他线程的读操作可见，它是可加性与有序性的一套规则总结。抛开此规则时，JMM 不能保证一个线程对共享变量的写对于其他线程对该共享变量的读可见</li>
<li>线程解锁之前对变量的写，对于接下来加锁的线程对该变量的读可见</li>
<li>线程对 volatile 变量的写，对于接下来其他线程对该变量的读可见</li>
<li>线程 start 前对变量的写，对该线程开始之后对该变量的读可见</li>
<li>线程结束前对变量的写，对于其他线程得知它结束后的读可见（比如其他线程调用 t1.Alive() 或 t1.join() 等待他结束）</li>
<li>线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2 被打断后对该变量的读可见</li>
<li>对变量的默认值（0，false，null）的写，对于其他线程对该变量的读可见</li>
</ul>
<h2> 7.无锁并发</h2>
<h3> 7.1 cas 与 volatile</h3>
<ul>
<li>cas 即 compare and set，这必须是原子性的操作，cas 必须借助 volatile 才能读取到共享变量的最新值来实现比较-交换的效果</li>
<li>cas 的底层是 lock cmpxchg 指令（x86 架构），在单核 CPU 和多核 CPU 下都能保证比较-交换的原子性。在多核状态下，某个核执行到带 lock 的指令时，CPU 会让总线锁住，当这个核把此指令执行完毕再开启总线，这个过程中不会被线程的调度机制所打断，保证了多个线程对内存操作的准确性（原子性）</li>
<li>cas 是基于乐观锁的思想，即用最乐观的估计，不怕其他线程修改共享变量，即使修改了也是重试；synchronized 是基于悲观锁的思想，即用最悲观的估计，防范这其他线程修改共享变量，只有解开了锁才能有机会修改</li>
<li>cas 体现的是无锁并发、无阻塞并发。因为没有使用 synchronized，所以先成功不会陷入阻塞，这是提高效率的因素之一。但是如果竞争激烈，重试必要频繁发生，这时反而会影响效率</li>
</ul>
<p><strong>为什么无锁（乐观锁）效率高一些？</strong></p>
<ul>
<li>无锁情况下，即使重试失败，线程始终再高速运行，而 synchronized 会让线程在没有获得锁时发生上下文切换进入阻塞</li>
<li>但是无锁情况下，因为要保持线程运行，需要 CPU 的额外支持，虽然没有阻塞，但是会因为没有分到时间片而进入可运行状态，最终还是会导致线程上下文切换。故线程数少于核心数时使用 cas 是合适的，但是当线程多起来后效率就低了</li>
</ul>
<h3> 7.2 原子类</h3>
<p><strong>1.原子整数</strong></p>
<ul>
<li>AtomicBoolean</li>
<li>AtomicInteger</li>
<li>AtomicLong</li>
</ul>
<p><strong>2.原子引用</strong></p>
<ul>
<li>AtomicReference</li>
<li>AtomicMarkableReference（布尔值标记）</li>
<li>AtomicStampedReference（版本号标记）</li>
</ul>
<p><strong>3.原子数组</strong></p>
<ul>
<li>AtomicIntegerArray</li>
<li>AtomicLongArray</li>
<li>AtomicReferenceArray</li>
</ul>
<p><strong>4.字段更新器</strong></p>
<ul>
<li>AtomicReferenceFieldUpdater</li>
<li>AtomicIntegerFieldUpdater</li>
<li>AtomicLongFieldUpdater</li>
</ul>
<p><strong>5.原子累加器</strong></p>
<ul>
<li>IntegerAdder</li>
<li>LongAdder</li>
</ul>
<h3> 7.3 Unsafe</h3>
<ul>
<li>只能通过反射获取</li>
<li>由于能够直接操作内存，所以有可能出现不安全的操作，故称为 Unsafe</li>
<li>Unsafe 是原子类中大量使用到的类</li>
</ul>
<h2> 8.不可变</h2>
<h3> 8.1 享元模式</h3>
<ul>
<li>当需要重用数量有限的同一类对象时使用</li>
<li>包装类提供了 valueOf 方法，在某个范围内会重用对象，超过了这个范围才会创建新的对象</li>
<li>创建连接池可以降低开销减小服务的压力</li>
</ul>
<p><strong>简单连接池实现：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9.线程池</h2>
<h3> 9.1 自定义线程池</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.2 ThreadPoolExecutor</h3>
<h4>1.线程池状态</h4>
<p>ThreadPoolExecutor 使用 int 的高 3 位来表示线程池的状态，低 29 位表示线程数量。这样做的目的是将线程池状态与线程个数合二为一，这样就可以用一次 cas 原子操作进行赋值</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态名</th>
<th style="text-align:center">高 3 位</th>
<th style="text-align:center">接受任务</th>
<th style="text-align:center">处理阻塞队列任务</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">RUNNING</td>
<td style="text-align:center">111</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">SHUTDOWN</td>
<td style="text-align:center">000</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">不会接受新的i任务，但是会处理阻塞队列中的剩余任务</td>
</tr>
<tr>
<td style="text-align:center">STOP</td>
<td style="text-align:center">001</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">会中断正在执行的任务，并抛弃阻塞队列中的任务</td>
</tr>
<tr>
<td style="text-align:center">TIDYING</td>
<td style="text-align:center">010</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">任务全部执行完毕，活动线程为 0 即将进入终结</td>
</tr>
<tr>
<td style="text-align:center">TERMINATED</td>
<td style="text-align:center">011</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">终结状态</td>
</tr>
</tbody>
</table>
<h4>2.构造方法</h4>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">corePoolSize</td>
<td style="text-align:center">核心线程数目（最多保留的线程数）</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">maximumPoolSize</td>
<td style="text-align:center">最大线程数</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">keepAliveTime</td>
<td style="text-align:center">生存时间（针对急救线程）</td>
</tr>
<tr>
<td style="text-align:center">TimeUnit</td>
<td style="text-align:center">unit</td>
<td style="text-align:center">时间单位（针对急救线程）</td>
</tr>
<tr>
<td style="text-align:center"><code>BlockingQueue&lt;Runnable&gt;</code></td>
<td style="text-align:center">workQueue</td>
<td style="text-align:center">阻塞队列</td>
</tr>
<tr>
<td style="text-align:center">ThreadFactory</td>
<td style="text-align:center">threadFactory</td>
<td style="text-align:center">线程工厂（可以为线程创建时起名字）</td>
</tr>
<tr>
<td style="text-align:center">RejectedExecutionHandler</td>
<td style="text-align:center">handler</td>
<td style="text-align:center">拒绝策略</td>
</tr>
</tbody>
</table>
<h4>3.常用工厂方法</h4>
<p>（1）newFixedThreadPool</p>
<ul>
<li>核心线程数等于最大线程数，即没有救急线程，因此也无需超时时间</li>
<li>阻塞队列时无界的，可以放任意数量的任务。适用于任务量已知但相对耗时的任务</li>
</ul>
<p>（2）newCachedThreadPool</p>
<ul>
<li>核心线程数为 0，最大线程数为 Integer.MAX_VALUE，救急线程的空闲生存时间是 60s。这意味着全部都是救急线程且 60s 后回收，救急线程可以无限创建</li>
<li>队列采用了 synchronousQueue 实现，特点是没有容量，没有线程来取是放不进去的（一手交钱，一首交货）</li>
<li>整个线程池表现为线程数会根据任务量不断增长没有上限，当任务执行完毕并空闲 1 分钟后释放线程。适合任务数比较密集但是每个任务执行时间较短的情况</li>
</ul>
<p>（3）newSingleThreadExecutor</p>
<ul>
<li>希望多个任务排队执行，线程数固定为 1，任务数多于 1 时，会放入无界队列排队。任务执行完毕时这个唯一的线程也不会被释放</li>
<li>如果任务执行失败抛出异常且没有补救措施时，会创建一个新的线程保证池的正常工作</li>
<li>newSingleThreadExecutor 的线程个数始终为 1 不可修改，因为 FinalizableDelegateExecutorService 应用的是装饰器模式，对外只暴露了 ExecutorService 接口，因此不能调用 ThreadPoolExecutor 中特有的方法；newFixedThreadPool(1) 初始为 1之后还可以修改，因为对外暴露的是 ThreadPoolExecutor 对象，可以强转后调用 setCorePoolSize 等方法进行修改</li>
</ul>
<h4>4.提交方法</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>5.关闭线程池</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.3 Tomcat 线程池</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/tomcat线程池.png" alt="image-20220705154941172" tabindex="0" loading="lazy"><figcaption>image-20220705154941172</figcaption></figure>
<ul>
<li>Tomcat 使用 LimitLatch 来限流，可以控制最大连接个数，类似 JUC 中的 Semaphore。</li>
<li>Tomcat 线程池扩展了 ThreadPoolExecutor，行为稍有不同</li>
<li>Acceptor 只负责接收新的 socket 连接</li>
<li>Poller 只负责监听 socket channel 是否有可读的 I/O 事件，一旦可读则封装一个任务对象（socketProcessor）提交给 Executor 线程池处理</li>
<li>Executor 线程池中的工作线程最终负责处理请求</li>
</ul>
<h4>1.Connector 配置</h4>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/tomcatConnector配置.png" alt="image-20220705160156893" tabindex="0" loading="lazy"><figcaption>image-20220705160156893</figcaption></figure>
<h4>2.Executor 线程配置</h4>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/tomcatExecutor线程配置.png" alt="image-20220705160323855" tabindex="0" loading="lazy"><figcaption>image-20220705160323855</figcaption></figure>
<h3> 9.4 Fork/Join 线程池</h3>
<ul>
<li>Fork/Join 是 JDK 1.7 加入的新的线程池实现，体现了分治思想，适用于能够进行任务拆分的 CPU 密集型运算</li>
<li>所谓的任务拆分就是将一个大任务拆分成算法上相同的小任务，直至不能拆分而可以直接求解</li>
<li>Fork/Join 在分治的基础上加入了多线程，可以把每个任务的分解和合并交给不同的线程来完成，进一步提升运算效率</li>
<li>Fork/Join 默认会创建与 CPU 核心数大小相同的线程池</li>
<li>提交给 Fork/Join 线程池的任务需要继承 RecursiveTask（有返回值）或 RecursiveAction（无返回值）</li>
</ul>
<p><strong>简单使用:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java%E5%B9%B6%E5%8F%91/20230209/%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E5%A4%B4.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 工具</title>
      <link>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/E-JUC%E5%B7%A5%E5%85%B7.html</link>
      <guid>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/E-JUC%E5%B7%A5%E5%85%B7.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">JUC 工具</source>
      <description>JUC 工具</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>java</category>
      <category>并发</category>
      <pubDate>Mon, 07 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> JUC 工具</h1>
<h2> 1.AQS 原理</h2>
<ul>
<li>全称为 AbstractQueueSynchronizer，是阻塞式锁和相关的同步器工具的框架</li>
<li>用 state 属性来表示资源的状态（分独占模式和共享模式），子类需要定义如何维护这个状态，控制如何获得和释放锁
<ul>
<li>getState：获取 state 状态</li>
<li>setState：设置 state 状态</li>
<li>compareAndSetState: cas 机制设置 state 状态</li>
<li>独占模式是只有一个线程能够访问资源，而共享模式允许多个线程访问资源</li>
</ul>
</li>
<li>提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList</li>
<li>使用条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet</li>
</ul>
<p><strong>自定义不可重入锁的简单实现：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.Reentrantlock</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/Reentrantlock继承关系.png" alt="image-20220705170923776" tabindex="0" loading="lazy"><figcaption>image-20220705170923776</figcaption></figure>
<h3> 2.1 加锁解锁流程</h3>
<ul>
<li>
<p>从构造器可以看出默认为非公平锁实现，即 NonfairSync，继承自 AQS</p>
</li>
<li>
<p>当没有竞争时：将当前线程设置为 owner 线程</p>
</li>
<li>
<p>第一个竞争出现时：</p>
<ul>
<li>调用 acquire 方法尝试加锁（1 次），如果加锁失败，会尝试创建一个节点对象，将该节点放入等待队列中</li>
<li>等待队列是一个双向队列；节点状态为 0 时表示正常状态，节点的创建方式是懒惰的，其中队列中的第一个节点称为哑元或哨兵，用于占位（不关联线程）</li>
<li>尝试获取锁时会调用 acquireQueued 方法，会在一个死循环中不断尝试获得锁，失败后会进入 park 阻塞，如果是紧邻头节点则会调用 tryAcquire 再次尝试获得锁，此时 state 仍然为 1 即失败。失败后会调用 shouldParkAfterFailedAcquire 方法将前驱节点即 head 的 WaitState 修改成 -1 并返回 true。之后会调用 parkAndCheckInterrupt 将当前线程 park</li>
</ul>
</li>
<li>
<p>释放锁的流程：</p>
<ul>
<li>调用 tryRelease 设置 exclusiveOwnerThread 为 null 并设置 state 为 0</li>
<li>当前队不为 null 并且 head 的 WaitState 为 -1 时进入 unparkSuccessor，找到队列中离 head 最近的一个未取消的节点，unpark 恢复其运行，此时便回到了第一个竞争线程的 acquireQueued 方法</li>
</ul>
</li>
<li>
<p>回到第一个竞争线程的 acquireQueued 方法后：</p>
<ul>
<li>如果加锁成功，会设置 exclusiveOwnerThread 为此线程并设置 state 为 1，head 的指向变为该线程所在的节点并清空该节点的线程，而原本的 head 会从链表中断开被垃圾回收</li>
<li>如果此时有其他线程来竞争且竞争线程变成了 Owner（非公平锁的体现），则原本应该成功加锁的第一个竞争线程又会失败，重新进入 park 阻塞</li>
</ul>
</li>
</ul>
<h3> 2.2 可重入原理（略）</h3>
<ul>
<li>主要可以概括为加锁时让 state 自增，释放时让 state 自减</li>
</ul>
<h2> 3.读写锁</h2>
<ul>
<li>当读操作远远写操作时，可以使用读写锁让读-读可以并发，以此提高性能</li>
</ul>
<h4>3.1 ReentrantReadWriteLock</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.2 StampedLock</h3>
<ul>
<li>特点时在使用读锁、写锁时必须配合戳使用</li>
<li>StampedLock 支持 tryOptimisticRead 方法（乐观读），读取完后需要做一次戳校验，如果戳校验通过，表示这期间确实没有写操作，数据可以安全使用；如果校验没有通过，需要重新获取读锁，保证数据安全</li>
<li>StampedLock 不支持可重入和条件变量</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4.Semaphore 原理</h2>
<ul>
<li>
<p>Semaphore（信号量）用来限制能够同时访问资源的线程上限</p>
</li>
<li>
<p>可以使用 Semaphore 限流，在访问高峰时让请求线程阻塞，高峰期过去再释放许可。只适合限制单机线程，并且仅是限制线程数而不是限制资源数</p>
</li>
<li>
<p>用 Semaphore 实现简单连接池，对比享元模式下的实现（用 wait notify），性能和可读性较好</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5.CountdownLatch</h2>
<ul>
<li>用来进行线程同步协作，等待所有线程完成倒计时</li>
<li>其中构造参数用来初始化等待计数值，await 用来等待计数归零，countDown 用来让计数减一</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6.CyclicBarrier</h2>
<ul>
<li>CyclicBarrier（循环栅栏）用来进行线程协作，等待线程满足某个计数。构造时设置计数个数，每个线程执行到某个要同步的时刻调用 await 方法进行等待，当等待的线程数满足计数个数时继续进行</li>
<li>注意：线程数要和计数一致，否则不能得出期望的结果（同一个线程有可能消耗完所有计数）</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7.ConcurrentHashMap</h2>
<ul>
<li>JDK 7：在并发情况下，HashMap 在扩容时有可能会发生并发死链</li>
<li>JDK 8：将扩容算法做了调整，不再将元素加入链表头，而是保持与扩容前一样的顺序，但不意味着能够在多线程环境下安全扩容（可能出现扩容丢数据）</li>
</ul>
<h2> 8.Queue</h2>
<ul>
<li>LinkedBlockingQueue
<ul>
<li>链表实现，支持有界</li>
<li>懒惰创建，每次入队都会生成新 Node</li>
<li>使用两把锁提高性能（锁住的范围更小）</li>
</ul>
</li>
<li>ArrayBlockingQueue
<ul>
<li>数组实现，强制有界</li>
<li>提前初始化 Node 数组</li>
<li>使用一把锁性能较低</li>
</ul>
</li>
<li>ConcurrentLinkedQueue
<ul>
<li>与 LinkedBlockingQueue 类似，使用了两把锁，同一时刻允许两个线程（生产者线程与消费者线程）执行</li>
<li>dummy 节点的引入让两把锁锁住的是不同对象，避免竞争</li>
<li>“锁” 使用 cas 实现的</li>
</ul>
</li>
</ul>
<h2> 9.线程安全集合类概述</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/线程安全集合类.png" alt="image-20220706192308478" tabindex="0" loading="lazy"><figcaption>image-20220706192308478</figcaption></figure>
<p><strong>线程安全类（主要 3 类）：</strong></p>
<ul>
<li>遗留的线程安全集合类（如：Hashtable，Vector），并发性不高，一般都有替代方案</li>
<li>使用 Collections 装饰的线程安全集合</li>
<li>JUC 线程安全集合类：
<ul>
<li>Blocking 类的大部分实现基于锁，提供用来阻塞的方法</li>
<li>CopyOnWrite 类的容器修改开销较大</li>
<li>Concurrent 类的容器时重点内容：
<ul>
<li>内部很多操作使用 cas 优化，一般可以提供较高的吞吐量</li>
<li>遍历时有弱一致性，如当使用迭代器遍历时，如果容器发生修改，迭代器仍然可以进行遍历，但是这时的内容是旧的</li>
<li>求大小弱一致性，即 size 操作未必是 100% 准确的</li>
<li>读取弱一致性</li>
<li>注意：遍历时如果发生了修改，对于非安全容器来讲，使用 fast-fail 机制，即让遍历立即失败，抛出 ConcurrentModificationException 异常，不在继续遍历</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java%E5%B9%B6%E5%8F%91/20230209/Reentrantlock%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" type="image/png"/>
    </item>
    <item>
      <title>Java 并发同步模式</title>
      <link>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/F-Java%E5%B9%B6%E5%8F%91%E5%90%8C%E6%AD%A5%E6%A8%A1%E5%BC%8F.html</link>
      <guid>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/F-Java%E5%B9%B6%E5%8F%91%E5%90%8C%E6%AD%A5%E6%A8%A1%E5%BC%8F.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Java 并发同步模式</source>
      <description>Java 并发同步模式</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>java</category>
      <category>并发</category>
      <pubDate>Mon, 07 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Java 并发同步模式</h1>
<h2> 1.保护性暂停</h2>
<p>即 Guarded Suspension，用在一个线程等待另一个线程的执行结果，要点如下：</p>
<ul>
<li>有一个结果要从一个线程传递到另一个线程，让它们关联同一个 GuardedObject</li>
<li>如果有结果不断从一个线程到拎一个线程，那么可以使用消息队列（生产者/消费者）</li>
<li>JDK 中，join 和 Future 的实现就是采用此模式，因为要等到另一方的结果，所以归类到同步模式</li>
</ul>
<h3> 1.1 实例</h3>
<p><strong>1.保护性暂停使用实例：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.辅助以上代码的下载类</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.2 优化</h3>
<p><strong>保护性暂停改进，模拟送信过程</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.顺序控制</h2>
<h3> 2.1 wait</h3>
<p><strong>使用 wait 调整线程执行顺序：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.2 park</h3>
<p><strong>使用 park 调整线程执行顺序：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3.交替输出</h2>
<h3> 3.1 标记</h3>
<p><strong>使用标记实现交替输出：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.2 await 和 signal</h3>
<p><strong>使用 await 和 signal 实现交替输出：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.3 park 和 unpark</h3>
<p><strong>使用 park 和 unpark 实现交替输出：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Java 并发异步模式</title>
      <link>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/G-Java%E5%B9%B6%E5%8F%91%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F.html</link>
      <guid>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/G-Java%E5%B9%B6%E5%8F%91%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Java 并发异步模式</source>
      <description>Java 并发异步模式</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>java</category>
      <category>并发</category>
      <pubDate>Mon, 07 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Java 并发异步模式</h1>
<h2> 1.生产者-消费者</h2>
<ul>
<li>与前面同步模式中的保护性暂停不同，生产者-消费者不限制产生结果的线程和消费结果的线程一一对应</li>
<li>消费队列可以用来平衡生产和消费的线程资源</li>
<li>生产者仅仅负责产生数据结果，不关心数据应该如何处理，而消费者专心处理结果数据</li>
<li>消息队列时有容量限制的，满时不会再加入数据，空时不会再消耗数据，JDK 中各种阻塞队列就是采用的这种模式</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.工作线程</h2>
<ul>
<li>让有限的工作线程来轮流异步处理无限多的任务。</li>
<li>也可以将其分类为分工模式，典型的实现就是线程池，体现了经典设计模式中的享元模式</li>
<li>固定大小的线程池会出现饥饿现象，不同的任务类型应该使用不同的线程池，这样能够避免饥饿且提升效率。</li>
<li>对于 CPU 密集型运算。通常使用 CPU 核数 + 1 能够实现最优的 CPU 利用率。加 1 是保证当前线程由于页缺失故障（操作系统）或其他原理导致暂停时，额外的线程能够补上保证 CPU 时钟周期不被浪费</li>
<li>对于 IO 密集型运算（包括远程 RPC 调用，数据库操作等），经验公式为线程数 = 核数 * 期望 CPU 利用率 * 总时间（CPU 计算时间 + 等待时间）/ CPU 计算时间</li>
</ul>
<h2> 3.任务调度线程池</h2>
<ul>
<li>在任务调度线程池加入之前，可以使用 Timer 来实现定时功能，Timer 的优点在于简单易用，但是由于所有任务都是由一个线程来调度，因此所有任务都是串行的。同一时间只能有一个任务执行，异常或延迟都会影响后续任务</li>
<li>应当使用 Executors.newScheduledThreadPool 代替 Timer 实现任务调度线程池</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 锁优化</title>
      <link>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/H-Java%E9%94%81%E4%BC%98%E5%8C%96.html</link>
      <guid>https://gzwrrr.github.io/article/java/A-Java%E5%B9%B6%E5%8F%91/H-Java%E9%94%81%E4%BC%98%E5%8C%96.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Java 锁优化</source>
      <description>Java 锁优化</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>java</category>
      <category>锁</category>
      <category>优化</category>
      <pubDate>Wed, 03 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Java锁优化</h1>
<h1> Java 主流锁体系</h1>
<ul>
<li>乐观锁、悲观锁</li>
<li>读锁（共享锁）、写锁（排他锁）</li>
<li>自旋锁、非自旋锁</li>
<li>无锁、偏向锁、轻量级锁、重量级锁</li>
<li>分布式锁</li>
<li>区间锁（分段锁）</li>
<li>重入锁、非重入锁</li>
<li>公平锁、非公平锁</li>
</ul>
<p><strong>线程是否要锁住同步资源：</strong></p>
<ul>
<li>锁住：悲观锁</li>
<li>不锁住：乐观锁</li>
</ul>
<p><strong>锁住同步资源失败线程是否要阻塞：</strong></p>
<ul>
<li>阻塞</li>
<li>不阻塞：
<ul>
<li>自旋锁</li>
<li>适应性自旋锁</li>
</ul>
</li>
</ul>
<p><strong>多个线程竞争同步资源的流程细节：</strong></p>
<ul>
<li>不锁住资源，多个线程只有一个能修改资源成功，其他线程会重试——无锁</li>
<li>同一个线程执行同步资源时自动获得资源——偏向锁</li>
<li>多个线程竞争同步资源时，没有获取资源的线程自旋等待锁释放——轻量级锁</li>
<li>多个线程竞争同步资源时，没有获取资源的线程阻塞等待唤醒——总量级锁</li>
</ul>
<p><strong>多个线程竞争锁时是否要排队：</strong></p>
<ul>
<li>
<p>排队：公平锁</p>
</li>
<li>
<p>不排队：非公平锁，先尝试插队，插队失败再排队</p>
</li>
</ul>
<p><strong>一个线程的多个流程能不能获取同一把锁：</strong></p>
<ul>
<li>能：可重入锁</li>
<li>不能：不可重入锁</li>
</ul>
<p><strong>多个线程能不能共享一把锁：</strong></p>
<p>能：共享锁</p>
<p>不能：排他锁</p>
<h1> 自旋锁</h1>
<ul>
<li>指当一个线程在获得锁时，如果锁已经被其他线程获取，那么该线程将循环等待</li>
<li>然后不断判断锁是否能被成功获取，自旋直到获取到锁后才退出循环</li>
</ul>
<p><strong>自旋锁的意义与使用场景：</strong></p>
<ul>
<li>不是用 cas 时：阻塞与唤醒线程需要操作系统切换 CPU 状态，需要消耗一定的时间</li>
<li>场景：同步代码块逻辑简单，执行时间很短</li>
</ul>
<p><strong>自适应自旋：</strong></p>
<ul>
<li>假定不同线程持有同一个锁对象的时间基本相当</li>
<li>竞争度趋于稳定，可以根据上一次自旋的时间与结果调整下一次自旋的时间</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Windows 特殊操作</title>
      <link>https://gzwrrr.github.io/article/other/Windows/Windows%20%E7%89%B9%E6%AE%8A%E6%93%8D%E4%BD%9C.html</link>
      <guid>https://gzwrrr.github.io/article/other/Windows/Windows%20%E7%89%B9%E6%AE%8A%E6%93%8D%E4%BD%9C.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Windows 特殊操作</source>
      <description>Windows 特殊操作</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>网络</category>
      <category>小知识点</category>
      <pubDate>Thu, 19 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Windows 特殊操作</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>查看网络</title>
      <link>https://gzwrrr.github.io/article/other/%E7%BD%91%E7%BB%9C/%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E7%BD%91%E7%BB%9C/%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">查看网络</source>
      <description>查看网络</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>网络</category>
      <category>小知识点</category>
      <pubDate>Thu, 19 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 查看网络</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>JSON</title>
      <link>https://gzwrrr.github.io/article/python/%E5%BA%93/json.html</link>
      <guid>https://gzwrrr.github.io/article/python/%E5%BA%93/json.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">JSON</source>
      <description>JSON</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>python</category>
      <pubDate>Sat, 18 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> JSON</h1>
<h2> 简单使用</h2>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>https://www.ncei.noaa.gov/data/global-summary-of-the-day/access/2014/94474099999.csv</p>
]]></content:encoded>
    </item>
    <item>
      <title>Conda</title>
      <link>https://gzwrrr.github.io/article/python/%E5%BA%93/requests.html</link>
      <guid>https://gzwrrr.github.io/article/python/%E5%BA%93/requests.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Conda</source>
      <description>Conda</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>python</category>
      <pubDate>Sat, 18 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Requests</h1>
<ul>
<li><a href="https://requests.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer">官方文档</a></li>
<li>Python requests库是一个基于 <code>urllib</code> 的，采用 <code>Apache2</code> 开源协议的HTTP库，它可以方便地发送和接收 <code>HTTP</code> 请求和响应。它提供了一些简单的API函数，如 <code>get, post, put, delete</code> 等，以及一个 <code>Request</code> 类，用于构建和发送自定义的请求</li>
</ul>
<h2> 官方示例</h2>
<p><mark>使用 urllib2：</mark></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>使用 requests：</mark></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>导航网站</title>
      <link>https://gzwrrr.github.io/guide/%E5%AF%BC%E8%88%AA/%E5%AF%BC%E8%88%AA%E7%BD%91%E7%AB%99.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%AF%BC%E8%88%AA/%E5%AF%BC%E8%88%AA%E7%BD%91%E7%AB%99.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">导航网站</source>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 导航网站</h1>
]]></content:encoded>
    </item>
    <item>
      <title>工具箱</title>
      <link>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7%E7%AE%B1.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7%E7%AE%B1.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">工具箱</source>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 工具箱</h1>
]]></content:encoded>
    </item>
    <item>
      <title>开发辅助工具</title>
      <link>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">开发辅助工具</source>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 开发辅助工具</h1>
]]></content:encoded>
    </item>
    <item>
      <title>虚拟工具</title>
      <link>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%B7%A5%E5%85%B7.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%B7%A5%E5%85%B7.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">虚拟工具</source>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 虚拟工具</h1>
]]></content:encoded>
    </item>
    <item>
      <title>素材库</title>
      <link>https://gzwrrr.github.io/guide/%E5%B8%B8%E7%94%A8/%E7%B4%A0%E6%9D%90%E5%BA%93.html</link>
      <guid>https://gzwrrr.github.io/guide/%E5%B8%B8%E7%94%A8/%E7%B4%A0%E6%9D%90%E5%BA%93.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">素材库</source>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 素材库</h1>
]]></content:encoded>
    </item>
    <item>
      <title>后端常用文档</title>
      <link>https://gzwrrr.github.io/guide/%E6%96%87%E6%A1%A3/%E5%90%8E%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%96%87%E6%A1%A3.html</link>
      <guid>https://gzwrrr.github.io/guide/%E6%96%87%E6%A1%A3/%E5%90%8E%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%96%87%E6%A1%A3.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">后端常用文档</source>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 后端常用文档</h1>
]]></content:encoded>
    </item>
    <item>
      <title>脚本文档</title>
      <link>https://gzwrrr.github.io/guide/%E6%96%87%E6%A1%A3/%E8%84%9A%E6%9C%AC%E6%96%87%E6%A1%A3.html</link>
      <guid>https://gzwrrr.github.io/guide/%E6%96%87%E6%A1%A3/%E8%84%9A%E6%9C%AC%E6%96%87%E6%A1%A3.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">脚本文档</source>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 脚本文档</h1>
]]></content:encoded>
    </item>
    <item>
      <title>假设检验</title>
      <link>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">假设检验</source>
      <description>假设检验</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Mon, 21 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 假设检验</h1>
<p>分为单侧检验和双侧检验</p>
<p>最常用的置信水平是 95%</p>
<p>步骤：</p>
<ol>
<li>确定原定假设和备择假设</li>
<li>根据要检验的量构造一个分布（这一步较难）</li>
<li>画出这个分布的概率密度图</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>典型相关分析</title>
      <link>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">典型相关分析</source>
      <description>典型相关分析</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Wed, 23 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 典型相关分析</h1>
<p>研究两组变量（魅族变量中都可能有多个指标）之间相关关系的一种多元统计方法，能够揭示出两组变量之间的内在联系</p>
<p>基本思想和主成分分析非常相似（后者用于降维）：</p>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//建模/20230207/典型相关分析的定义.png" alt="image-20230207224347160" style="zoom:50%">
<p>样本典型相关变量分析：</p>
<ol>
<li>计算样本典型相关变量以及典型相关系数</li>
<li>相关系数的显著性检验</li>
</ol>
<p>典型相关性分析中的问题：</p>
<ol>
<li>相关矩阵出发计算典型相关（先标准化消除量纲的影响）</li>
<li>典型载荷分析（原始变量与典型变量之间的相关性分析）</li>
<li>典型冗余分析（定量测度典型变量锁包含的原始信息的大小，这个使用的较少）</li>
</ol>
<p>补充：这里如果使用 SPSS 进行分析，会给出上述所有相关的结果（需要有 Python 环境）</p>
]]></content:encoded>
    </item>
    <item>
      <title>分类模型</title>
      <link>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">分类模型</source>
      <description>分类模型</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Thu, 24 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 分类模型</h1>
<p>基本概念</p>
<p><strong>信息熵：</strong></p>
<p>信息熵用来衡量事件的不确定性的大小，计算公式如下：
$Infor(x)=−p(x)×log_2p(x) $
信息熵具有可加性，即多个期望信息，计算公式如下：
$Infor(X)=−∑_i=1^m p(x_i)×log_2p(x_i)$</p>
<p><strong>信息增益：</strong>
信息增益表示某一特征的信息对类标签的不确定性减少的程度。
$g(D│A)=Infor(D)−Infor(D|A)$
其中Infor(D|A)是在特征A给定条件下对数据集合D进行划分所需要的期望信息，它的值越小表示分区的纯度越高，计算公式如下所示。
$Infor(D|A)=∑_j=1^n |D_j|/|D|×Info(D_j)$
其中n是数据分区数，|D_j|表示第j个数据分区的长度，|D_j|/|D|表示第j个数据分区的权重。</p>
<blockquote>
<p>回归分为解释型回归与预测型回归</p>
</blockquote>
<p>通过数据判断类型，分类二分类和多分类</p>
<p>使用逻辑回归：</p>
<ul>
<li>
<p>线性概率模型（LPM）</p>
</li>
<li>
<p>两点分布</p>
</li>
<li>
<p>非线性模型，可以使用极大似然估计法（MLE）进行估计</p>
</li>
</ul>
<p>预测型回归，加入平方项后可能会出现过拟合现象，这是对于样本数据的预测会非常好，但是对于样本外的数据的预测效果可能会很差（与龙格现象有点相似）</p>
<p>如何确定合适的模型：把数据分为「训练组」和「测试组」，用训练组的数据来估计出模型，再用测试组的数据来进行测试（一般比例是 8 : 2）</p>
<p>Fisher 线性判别分析：</p>
<p>该方法的思想：给定训练集样例，设法将样例投影到一维的直线上，使得同样样例的投影点尽可能接近和密集，异类投影点尽可能远离</p>
<p>核心问题就是：找到线性向量</p>
]]></content:encoded>
    </item>
    <item>
      <title>图</title>
      <link>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9B%BE.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9B%BE.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">图</source>
      <description>图</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Wed, 23 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 图</h1>
<p>图论基础：</p>
<p>无向图的权重邻接矩阵：</p>
<ol>
<li>无向图对应的权重邻接矩阵是一个对称矩阵（有向图一般不是对称的），其对角线上的元素为 0</li>
<li>$D_ij$  表示第 i 个点到第 j 个节点的权重</li>
</ol>
<p>两个算法：</p>
<ol>
<li>迪杰斯特拉算法（可以用于有向图，但是不能处理负权重）</li>
<li>弗洛伊德算法（不支持含有负权重回路的图）</li>
<li>贝尔曼-福特算法（不支持含有负权重回路的图，但是可以处理具有负权重的「有向图」）</li>
</ol>
<p>什么是负权回路：</p>
<ol>
<li>在一个图中每条边都有一个权重（有正有负）</li>
<li>如果存在一个环，从某点出发最后又回到自己，而且环上的「所有权值和为负数」，那么就称为负权回路</li>
<li>存在负权回路的图不能求两点之间最短路径，因为只要在负权回路上不停绕圈，所得的最短长度可以任意小</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>数据处理算法</title>
      <link>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">数据处理算法</source>
      <description>数据处理算法</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Mon, 21 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 数据处理算法</h1>
<h2> 插值算法</h2>
<p>比赛中的数据常常缺少某些值，需要模拟补全缺少的值</p>
<p>插值分类：</p>
<ol>
<li>分段插值（最常用）（可以避免龙格现象，分段低次插值：线性插值、二次插值）</li>
<li>插值多项式（拉格朗日插值法，有可能出现龙格现象）</li>
<li>三角插值（主要使用到傅里叶变换）</li>
</ol>
<p>具体的插值法：</p>
<ul>
<li>牛顿插值法</li>
<li>埃尔米特插值法（常用）（导数也相似，需要分段，往往使用分段三次插值：PCHIP）</li>
<li>三次样条插值（常用）</li>
<li>一维插值和 N 维插值</li>
</ul>
<h2> 拟合算法</h2>
<p>最终曲线不用经过每一个点，只需要非常接近即可，这样曲线的函数会简单（插值法生成的曲线往往都会有很复杂的函数）</p>
<p>具体的拟合算法：</p>
<ul>
<li>最小二乘法</li>
</ul>
<p>评价拟合的好坏：拟合优度：R^2</p>
<ul>
<li>总体平方和：SST</li>
<li>误差平方和：SSE</li>
<li>回归平方和：SSR</li>
</ul>
<p>SST = SSE + SSR</p>
<p>R^2 = SRR / SST = 1 - SSE / SST，R^2 越接近 1，说明误差平方和越接近 0，误差越小说明拟合越好</p>
<p>但是注意：R^2 只能用于的拟合函数是「线性函数」（线性是指参数线性）</p>
<p>MATLAB 自带了曲线拟合工具箱</p>
<p>注意：插值或者拟合都可以用于「预测」</p>
]]></content:encoded>
    </item>
    <item>
      <title>相关系数</title>
      <link>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">相关系数</source>
      <description>相关系数</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Mon, 21 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 相关系数</h1>
<p>两种常用的相关系数：</p>
<ol>
<li>皮尔逊（person）相关系数</li>
<li>斯皮尔曼（spearman）等级相关系数</li>
</ol>
<p>要区分总体和样本</p>
<p>协方差的大小和两个变量的量纲有关，不适合做比较</p>
<p>皮尔逊相关系数也可以看作是剔除了两个变量量纲影响，即将 X 和 Y 标准化后的协方差（协方差除于两个变量的标准差）</p>
<p>补充：还分为了总体皮尔逊相关系数和样本皮尔逊相关系数</p>
<p>相关性系数的意义：</p>
<p>相关系数的绝对值越接近于 1，越接近一条线</p>
<h3> 皮尔逊相关系数</h3>
<p>皮尔逊相关系数的误区：</p>
<p>数据中可能有异常值，最后会导致错误的相关系数</p>
<p>皮尔逊相关系数受异常值的影响非常大</p>
<p>相关系数知识用来衡量两个变量线性相关程度的指标</p>
<p>也就是说：必须先确认这两个变量是线性相关的，然后这个相关系数才能告诉你两个变量的相关程度如何</p>
<p>容易忽视的点：</p>
<ol>
<li>非线性相关也会导致线性相关系数很大</li>
<li>离群点对相关系数的影响也很大</li>
<li>如果两个变量的相关系数很大也不能说明两者相关，可能是受到了异常值的影响</li>
<li>相关系数计算结果为 0，只能说不是线性相关，但是说不定会有更复杂的相关关系</li>
</ol>
<p>总结：</p>
<ol>
<li>如果两个变量本身就是线性关系，那么皮尔逊相关系数绝对值大的就是相关性强，小的就是相关性弱</li>
<li>在不确定两个变量是说明关系的情况下，即使算出皮尔逊相关系数很大，也不能说明那两个变量线性相关，甚至不能说他们相关，一定要画出散点图才能看出来（有可能有异常值）</li>
</ol>
<p>对相关系数的解释是依赖于具体的应用背景和目的的</p>
<p>事实上，比起相关系数的大小，我们往往更关注的是显著性（假设检验）</p>
<p>补充：描述性统计：一般就是统计数据中的平均值、标准误差、中位数、众数、标准差、方差、峰值、偏度、区域、最小最大值、求和、观测值等</p>
<p>皮尔逊相关系数需要进行假设检验以及计算 P 值</p>
<p>皮尔逊相关系数假设检验的条件：</p>
<ol>
<li>数据通常假设是成对的来自于正态分布的总体</li>
<li>数据之间的差距不能太大</li>
<li>每组样本之间都是独立抽样的</li>
</ol>
<p>怎么检验数据是否为正态分布：</p>
<ol>
<li>正态分布 JB 检验（跟偏度和峰度有关），样本越大效果越好（N &gt; 50）</li>
<li>Shapiro-wilk 夏皮洛-威尔克检验（3 &lt; N &lt; 50），当样本较少时使用</li>
<li>Q-Q 图（Q 代表分位数）：通过比较两个概率分布的分位数对这两个概率进行比较的概率图方法；要利用 Q-Q 鉴别样本数据是否近似于正态分布，只需要看图上的点是否近似地在一条直线附近（大样本时使用）</li>
</ol>
<h3> 斯皮尔曼相关系数</h3>
<p>对数据的要求比较低</p>
<p>分为小样本和大样本两种情况</p>
<p>小样本情况下（N &lt; 30 时），直接查表，样本的相关系数必须大于等于表（自己搜）中的临界值，才能得出显著的结论</p>
<p>大样本下，需要计算检验值，之后求出对应的 P 值与 0.5 比较即可</p>
<h3> 相关系数总结</h3>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//建模/20230207/相关系数比较.png" alt="image-20230207223510635" style="zoom:50%">
]]></content:encoded>
    </item>
    <item>
      <title>分类模型</title>
      <link>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E8%81%9A%E7%B1%BB%E6%A8%A1%E5%9E%8B.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/A-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E8%81%9A%E7%B1%BB%E6%A8%A1%E5%9E%8B.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">分类模型</source>
      <description>分类模型</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Thu, 24 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 聚类模型</h1>
<p>将样本划分为由类的对象组成的多个类的过程</p>
<p>聚类后可以更加准确的在每个类中单独使用统计模型进行估计、分析或者预测，也可以探究不同类之间的相关性和主要差异</p>
<p>分类和聚类的分别：分类是已知类别，聚类是未知类别</p>
<h2> K-means 聚类算法</h2>
<ol>
<li>确定类的个数 K，选定中心</li>
<li>更新迭代中心直到不再变化</li>
</ol>
<p>优点：</p>
<ol>
<li>算法简单、快速</li>
<li>对处理大数据集效率高</li>
</ol>
<p>缺点：</p>
<ol>
<li>要求实现给定生成的类型数 K</li>
<li>对初值敏感</li>
<li>对孤立点数据敏感</li>
</ol>
<p>K-means++ 可以解决上述 2、3 个缺点</p>
<h2> 系统（层次）聚类</h2>
<p>聚类一般是对样本聚类，很少对指标聚类</p>
<p>需要确定样本之间的常用距离</p>
<ul>
<li>绝对值距离</li>
<li>欧氏距离</li>
<li>Minkowski 距离</li>
<li>Chebyshev 距离</li>
<li>马氏距离</li>
</ul>
<p>确定不同类的距离：</p>
<ul>
<li>
<p>重心法求解距离</p>
</li>
<li>
<p>最短距离法</p>
</li>
<li>
<p>组内连接平均法</p>
</li>
</ul>
<p>步骤：</p>
<ol>
<li>将每个对象看作一类，计算两两之间的最小距离</li>
<li>将距离最小的两个类合并成一个新类</li>
<li>重新计算心累与所有类之间的距离</li>
<li>重复 2、3 步骤，直到所有类最终合并成一类</li>
</ol>
<p>聚类分析需要注意的问题：</p>
<ol>
<li>要根据分类的目的选取指标，指标的选取不同，分类的结果一般也不一样</li>
<li>样本间距离定义的方式以及聚类的方法不同，聚类的结果一般也不一样</li>
<li>要注意指标的量纲，量纲差别太大会导致聚类结果不合理</li>
<li>聚类分析的结果可能不令人满意，需要对结果找到一个合理的解释</li>
</ol>
<p>聚类数量的估计：</p>
<ol>
<li>肘部法则：通过图形大致估计出聚类数量</li>
</ol>
<h2> DBSCAN 算法</h2>
<p>基于密度的聚类算法，不需要预先指定聚类的个数，要求一定区域的对象不小于某一个阈值</p>
<p>该方法能在具有噪声的数据空间数据库中发现任意形状的簇</p>
<p>基本概念：</p>
<p>该算法将数据分为三类：</p>
<ol>
<li>核心点：在半径内含有不少于阈值数目的点</li>
<li>边界点：在半径内点的数量小于阈值，但是罗战核心点的邻阈内</li>
<li>噪声点：既不是核心点，也不是边界点</li>
</ol>
<p>优点：</p>
<ol>
<li>基于密度定义，能够处理任意形状和大小的簇</li>
<li>可在聚类的同时发现异常点</li>
<li>与 K-means 算法比较起来，不需要输入要划分的聚类的个数</li>
</ol>
<p>缺点：</p>
<ol>
<li>对输入的参数和阈值比较敏感，确定参数困难</li>
<li>由于该算法的参数和阈值是全局唯一的，当聚类的密度不均匀时，聚类距离相差很大时，计算密度单元的计算复杂度大</li>
<li>当数据量大时，计算密度单元的计算复杂度大</li>
</ol>
<p>建议：</p>
<ol>
<li>只有两个，且在散点图做出来后看起来有一定的形状时，可以使用该算法进行聚类</li>
<li>其他情况下一般都使用系统聚类</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>TOPSIS 法</title>
      <link>https://gzwrrr.github.io/article/modeling/B-%E8%AF%84%E4%BB%B7%E5%9E%8B/TOPSIS.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/B-%E8%AF%84%E4%BB%B7%E5%9E%8B/TOPSIS.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">TOPSIS 法</source>
      <description>TOPSIS 法</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Sun, 20 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> TOPSIS 法</h1>
<p>逼近理想解排序法/优劣解距离法</p>
<p>指标：</p>
<ul>
<li>越大越好，极大型指标（效益型指标）</li>
<li>越小越好，极小型指标（成本型指标）</li>
<li>中间型指标，越接近某个值越好</li>
<li>区间型指标，落在某个区间最好</li>
</ul>
<p>将所有的指标转换为极大型为：指标正向化（最常用）</p>
<p>极小型指标转换成极大型指标的公式：max - x</p>
<p>正向化后的指标一般都要进行「标准化处理」，以此消除量纲，这样不同指标之间才能求和</p>
<p>所谓的将原式矩阵正向化，即使将所有的指标类型统一转换为极大型指标</p>
<p>基本流程：</p>
<p>矩阵正向化 -&gt; 标准化 -&gt; 计算得分并归一化</p>
<p>改进：</p>
<p>基于「熵权法」对该模型的修正是一种较为客观的赋权方法</p>
<p>熵权法依据：</p>
<p>指标的的变异程度越小，所反映的信息量越小，其对应的权值就越小（数据本身就可以告诉我们权重）</p>
]]></content:encoded>
    </item>
    <item>
      <title>层次分析法</title>
      <link>https://gzwrrr.github.io/article/modeling/B-%E8%AF%84%E4%BB%B7%E5%9E%8B/%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/B-%E8%AF%84%E4%BB%B7%E5%9E%8B/%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">层次分析法</source>
      <description>层次分析法</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Sun, 20 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 层次分析法</h1>
<p><mark>解决「评价类」问</mark></p>
<p>可以用打分解决，定指标，指标需要：权重/重要性</p>
<br>
<p><mark>指标如何选择：</mark></p>
<ul>
<li>
<p>搜索</p>
</li>
<li>
<p>题目提炼</p>
</li>
<li>
<p>文献</p>
</li>
</ul>
<br>
<p><mark>流程：</mark></p>
<p>确定指标 -&gt; 设定权重 -&gt; 进行分析 -&gt; 评价得分</p>
<p>两两比较确定权重，需要使用矩阵：</p>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/建模/20230206/层次分析法比较矩阵.png" alt="image-20230206220200655" style="zoom:50%;">
<br>
<p><mark>一致矩阵：</mark></p>
<p>所谓一致性检验就是对矩阵确定不一致的允许范围</p>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/建模/20230206/一致矩阵.png" alt="image-20230206222800917" style="zoom:50%;">
<br>
<p><mark>权重求法：</mark></p>
<ol>
<li>算数平均法求权重</li>
<li>几何平均法求权重</li>
<li>特征值法求权重</li>
</ol>
<br>
<p><mark>三个问题：</mark></p>
<ol>
<li>评价目标是什么</li>
<li>选择什么方案</li>
<li>评价的准则是什么</li>
</ol>
<p>注意：层次结构图必须要放到论文中（可用亿图展示画图）</p>
<br>
<p><mark>局限性：</mark></p>
<ol>
<li>评价的决策层不能太多，否则判断矩阵和一致性矩阵差异可能会非常大</li>
<li>如果决策层中的指标的数据已知，那么我们一般就不可以再用层次分析法</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>时间序列</title>
      <link>https://gzwrrr.github.io/article/modeling/C-%E9%A2%84%E6%B5%8B%E5%9E%8B/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/C-%E9%A2%84%E6%B5%8B%E5%9E%8B/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">时间序列</source>
      <description>时间序列</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Tue, 22 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 时间序列</h1>
<p>注：具有完全多重共线性是不可能求出回归方程的</p>
<p><mark>两个要素：</mark></p>
<ol>
<li>时间要素（分为时点时间序列和时期时间序列）</li>
<li>数值要素</li>
</ol>
<br>
<p><mark>不同趋势：</mark></p>
<ol>
<li>长期趋势</li>
<li>季节趋势</li>
<li>循环变动趋势（若干年为趋势）</li>
</ol>
<br>
<p><mark>不同模型：</mark></p>
<ol>
<li>叠加模型（变动互不影响）</li>
<li>乘积模型（变动相互影响）</li>
</ol>
<br>
<p><mark>替换缺失值的方法：</mark></p>
<ol>
<li>序列平均值</li>
<li>邻近点平均值</li>
<li>邻近点中位数</li>
<li>线性插值</li>
<li>邻近点的线性趋势
<br></li>
</ol>
<p><mark>时间序列分析用于：</mark></p>
<ol>
<li>描述过去</li>
<li>分析规律</li>
<li>预测未来</li>
</ol>
<br>
<p><mark>分析的步骤：</mark></p>
<ol>
<li>做时间序列图</li>
<li>判断时间序列包含的变动成分</li>
<li>时间序列分解</li>
<li>建立时间序列分析模型</li>
<li>预测未来的指标数值</li>
</ol>
<br>
<p><mark>时间序列模型：</mark></p>
<ol>
<li>指数平滑法模型：
<ol>
<li>simple 模型（只能预测一期）</li>
<li>Holt 线性趋势（适用于线性趋势，不含季节成分）</li>
<li>Brown 线性趋势（适用于线性趋势，不含季节成分）</li>
<li>阻尼趋势（适用于线性趋势逐渐减弱且不含季节成分）</li>
<li>简单季节性（含有稳定的季节成分，不含趋势）</li>
<li>Winters 可加性（含有线性趋势和稳定的季节成分）</li>
<li>Winters 可乘性（含有线性趋势和不稳定季节成分）</li>
</ol>
</li>
<li>ARIMA 模型：
<ol>
<li>ARIMA 模型</li>
<li>SARIMA 模型</li>
</ol>
</li>
</ol>
<br>
<p><mark>ARIMA 模型相关概念：</mark></p>
<ol>
<li>平稳时间序列和白噪声序列</li>
<li>差分方程和滞后算子</li>
<li>AR 模型</li>
<li>MA 模型</li>
<li>ARMA 模型</li>
<li>ACF 和 PACF</li>
<li>ARMA 模型的估计</li>
<li>AIC 和 BIC 准则</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>灰度预测模型</title>
      <link>https://gzwrrr.github.io/article/modeling/C-%E9%A2%84%E6%B5%8B%E5%9E%8B/%E7%81%B0%E5%BA%A6%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/C-%E9%A2%84%E6%B5%8B%E5%9E%8B/%E7%81%B0%E5%BA%A6%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">灰度预测模型</source>
      <description>灰度预测模型</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Tue, 22 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 灰度预测模型</h1>
<p><mark>基本概念：</mark></p>
<p>灰色系统理论的研究对象：部分信息已知部分信息未知的小样本、贫信息不确定性系统</p>
<p>灰色系统理论的研究内容：灰哲学、灰生成、灰分析、灰建模、灰预测、灰决策、灰控制、灰评估、灰数学等</p>
<p>灰色系统理论的应用领域：农业科学、经济管理、环境科学、医药卫生、矿业工程、教育科学、水利水电、图像信息、生命科学、控制科学等</p>
<p>常用的灰色系统生成方式有: 累加生成、累减生成、均值生成、级比生成等</p>
<br>
<p><mark>模型：</mark></p>
<p>灰色预测模型：初衷时对数列建立近似的微分方程模型，但是这只适用于连续可微方程，而事件序列数据是非连续的，所以灰色预测模型得到的只是近似微分方程</p>
<p>GM(1, 1)：</p>
<p>在使用 G(1, 1) 对未来的数据进行预测时，需要先检验该模型对原数据的拟合程度，一般有两种检验方法：</p>
<ul>
<li>残差检验</li>
<li>级比偏差检验</li>
</ul>
<p>灰色预测的使用场景：</p>
<ol>
<li>数据是以年份度量的非负数据（如果是月份或者季度数据就一定要用时间序列模型）</li>
<li>数据能经过准指数规律的检验（除了前两期外，后面至少 90% 的期数的光滑比要低于 0.5）</li>
<li>数据的期数较短且和其他数据之间的关联性不强（小于等于 10，但是也不能太短，要是数据期数较长，一般使用传统的事件序列模型）</li>
</ol>
<p>预测时：</p>
<ol>
<li>要结果背景、合理假设</li>
<li>不要硬套模型、不做解释</li>
</ol>
<p>面对预测题目时：</p>
<ol>
<li>先画出时间序列图并简单分析趋势</li>
<li>将数据分为训练组和实验组，尝试使用不同的模型对训练组进行建模，并利用实验组的数据判断哪种模型的预测效果最好（比如可以使用 SSE 这个指标来挑选模型，常见的模型有指数平滑、ARIMA、灰度预测、神经网络）</li>
<li>选择预测误差最小的模型，并利用全部数据重新建模，并对未来的数据进行预测</li>
<li>画出预测后的数据和原数据的序列图，查看预测的未来趋势是否合理</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>神经网络</title>
      <link>https://gzwrrr.github.io/article/modeling/C-%E9%A2%84%E6%B5%8B%E5%9E%8B/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/C-%E9%A2%84%E6%B5%8B%E5%9E%8B/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">神经网络</source>
      <description>神经网络</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Tue, 22 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 神经网络</h1>
<p>机器学习的数据分类：</p>
<ul>
<li>训练集</li>
<li>验证集</li>
<li>测试集</li>
</ul>
<p>注意：神经网络很大几率过拟合，要有验证集和测试机</p>
<p>BP 神经网络预测（万金油）</p>
<p>有三种训练方法：</p>
<ol>
<li>莱文贝格-马夸特方法（梯度下降）</li>
<li>贝叶斯正则化方法</li>
<li>量化共轭梯度法</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>线性回归分析</title>
      <link>https://gzwrrr.github.io/article/modeling/C-%E9%A2%84%E6%B5%8B%E5%9E%8B/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/C-%E9%A2%84%E6%B5%8B%E5%9E%8B/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">线性回归分析</source>
      <description>线性回归分析</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Wed, 23 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 线性回归分析</h1>
<p><strong>基本概念：</strong></p>
<p>回归分析（Regression Analysis）是确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法
<strong>按涉及变量个数划分：</strong></p>
<ul>
<li>一元回归分析</li>
<li>多元回归分析</li>
</ul>
<p><strong>按自变量和因变量之间关系划分：</strong></p>
<ul>
<li>线性回归分析</li>
<li>非线性回归分析</li>
</ul>
<p><strong>回归分析主要解决两个问题：</strong></p>
<ol>
<li>一是确定几个变量之间是否存在相关关系，如果存在，找出它们之间适当的数学表达式</li>
<li>二是根据一个或几个变量的值，预测或控制另一个或几个变量的值</li>
</ol>
<br>
<p><strong>注意：相关性不是因果性</strong></p>
<p><strong>因变量类型：</strong></p>
<ol>
<li>连续数值型变量：对应线性回归，模型有：OLS、GLS</li>
<li>0-1 型变量：对应 0-1 回归，模型有：logistic 回归</li>
<li>定序变量：对应定序回归，模型有：probit 定序回归</li>
<li>计数变量：对应计数回归，模型有泊松回归</li>
<li>生存变量（截断数据）：对应生存回归，模型有： Cox 等比例风险回归</li>
</ol>
<p>回归分析的任务就是：通过研究 X 和 Y 的相关关系，尝试去解释 Y 的形成机制，进而达到通过 X 去预测 Y 的目的</p>
<p><strong>回归分析的三个重要作用：</strong></p>
<ol>
<li>识别重要变量</li>
<li>判断相关性的方向</li>
<li>估计权重（回归系数）</li>
</ol>
<br>
<p><strong>数据分类：</strong></p>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//建模/20230208/不同数据类型.png" alt="image-20230208143846648" style="zoom:50%;">
<p>横截面数据：在某一时间点收集的不同对象的数据</p>
<p>时间序列数据：对同一对象在不同时间连续观察所取得的数据</p>
<p>面板数据：横截面数据与时间序列数据综合起来的一种数据资源</p>
<br>
<p><strong>回归分析的步骤：</strong></p>
<ol>
<li>确定变量。寻找与预测目标的相关影响因素，即自变量，并从中选出主要的影响因素。</li>
<li>建立预测模型。依据自变量和因变量的历史统计资料进行计算，在此基础上建立回归分析预测模型。</li>
<li>计算预测误差。回归预测模型是否可用于实际预测，取决于对回归预测模型的检验和对预测误差的计算。</li>
<li>确定预测值。利用回归预测模型计算预测值，并对预测值进行综合分析，确定最后的预测值</li>
</ol>
<br>
<p>**补充：**分类与预测
不同点：</p>
<ul>
<li>分类是预测类对象的分类标号（或离散值），根据训练数据集和类标号属性，构建模型来分类现有数据，并用来分类新数据。</li>
<li>预测是建立连续函数值模型评估无标号样本类，或评估给定样本可能具有的属性值或值区间，即用来估计连续值或量化属性值，比如预测空缺值。</li>
</ul>
<p>相同点：</p>
<ul>
<li>分类和预测的共同点是两者都需要构建模型，都用模型来估计未知值。预测中主要的估计方法是「回归分析」</li>
</ul>
<h2> 一元线性回归</h2>
<p>线性假定并不要求初始模型都呈严格线性关系，因为自变量和因变量都可通过变量转换成线性模型</p>
<p>使用线性回归模型建模前，需要对数据进行预处理，可以用 Excel、Stata 等</p>
<p>变量导致的内生性：如果满足误差项和所有的自变量 x 都不相关，那么称该回归模型具有外生性，如果相关就存在内生性，内生性会导致回归系数估计的不准确：不满足无偏和一致性</p>
<p>蒙特卡罗模拟可以考察内生性的大小</p>
<p>要求所有的解释变量（自变量）全部外生很困难，可以弱化这个条件</p>
<p>核心解释变量时我们感兴趣的变量，我们特别希望得到对其系数的一致估计（当样本容量无限大时，收敛于待估计参数的真值）</p>
<p>控制变量：对这些变量没太大兴趣</p>
<p>在实际应用中，主要保证核心解释变量与误差项不相关即可</p>
<p><strong>四种模型：</strong></p>
<ol>
<li>一元线性回归</li>
<li>双对数模型</li>
<li>半对数模型（两种）</li>
</ol>
<p><strong>步骤：</strong></p>
<ol>
<li>描述性数据统计</li>
<li>计算拟合优度</li>
<li>标准化回归系数（去除量纲影响，标准化系数的绝对值越大，说明对因变量的影响就越大（只关注显著的回归系数））</li>
</ol>
<p><strong>扰动项：</strong></p>
<ol>
<li>球型扰动项：满足同方差和无自相关两个条件（横截面数据容易出现异方差问题，时间序列数容易出现自相关问题）</li>
</ol>
<p><strong>如果扰动项存在异方差：</strong></p>
<ol>
<li>OLS 估计出来的回归系数是无偏、一致的</li>
<li>假设检验无法使用</li>
<li>OLS 估计量不再是最优线性无偏估计量</li>
</ol>
<p><strong>怎么解决异方差：</strong></p>
<ol>
<li>使用 OLS + 稳健的标准误差</li>
<li>广义的最小二乘法</li>
</ol>
<p>原理：方差较小的数据包含的信息较多，可以给予信息量大的数据更大的权重（即方差小的数据给予更大的权重）</p>
<p><strong>如何检验异方差：</strong></p>
<ol>
<li>画出残差与拟合值的散点图</li>
<li>画残差与自变量的散点图</li>
<li>BP 检验</li>
<li>怀特检验</li>
</ol>
<p><strong>多重共线性：如果某一解释变量可以由其他的解释变量线性表出，则存在严格多重共线性，这会使得对系数的估计变得不准确</strong></p>
<p>如何处理多重共线性：</p>
<ol>
<li>如果不关心具体的回归系数，只关心整个方程预测被解释变量的能力，可以不必理会多重共线性（假设整个方程是显著的）</li>
<li>如果关心具体的回归系数，但多重共线性并不影响所关心变量的显著性，那么也可以不必理会</li>
<li>如果多重共线性影响到所关心变量的显著性，则需要增大样本容量，剔除导致严重共线性的变量（但是不要轻易剔除，因为可能会有内生性的影响），或者是对模型进行修改</li>
</ol>
<p><strong>逐步回归分析：</strong></p>
<p>可以解决共线性</p>
<ul>
<li>先前逐步回归</li>
<li>向后逐步回归</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>主成分分析</title>
      <link>https://gzwrrr.github.io/article/modeling/D-%E4%BC%98%E5%8C%96%E5%9E%8B/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/D-%E4%BC%98%E5%8C%96%E5%9E%8B/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">主成分分析</source>
      <description>主成分分析</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Wed, 23 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 主成分分析</h1>
<p>主成分分析是一种降维算法，能将多个指标转换为少数几个主成分，这些主成分是原始变量的线性组合，彼此之间互不相关，其能反映出原始数据的大部分信息</p>
<p>当研究的问题涉及到多变量且变量之间存在很强的相关性时，我们可以考虑使用主成分分析来对数据进行简化</p>
<p>降维具有的优点：</p>
<ol>
<li>使得数据集更易使用</li>
<li>降低算法的计算开销</li>
<li>去除噪声</li>
<li>使得结果更易理解</li>
</ol>
<p>主成分的解释其含义一般带有模糊性，不像原始变量的含义那么清楚，这是变量降维过程中不得不付出的代价</p>
<p>主成分分析的困难之处在于要能给出主成分的较好解释，所以提取的主成分中如果有一个解释不了，那么主成分分析就是失败了</p>
<p>主成分分析可以用于聚类</p>
]]></content:encoded>
    </item>
    <item>
      <title>12种数据量纲化处理方式</title>
      <link>https://gzwrrr.github.io/article/modeling/Z-%E5%85%B6%E4%BB%96/12%E7%A7%8D%E9%87%8F%E7%BA%B2%E5%A4%84%E7%90%86.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/Z-%E5%85%B6%E4%BB%96/12%E7%A7%8D%E9%87%8F%E7%BA%B2%E5%A4%84%E7%90%86.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">12种数据量纲化处理方式</source>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 12种数据量纲化处理方式</h1>
]]></content:encoded>
    </item>
    <item>
      <title>SVD 和图形处理</title>
      <link>https://gzwrrr.github.io/article/modeling/Z-%E5%85%B6%E4%BB%96/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/Z-%E5%85%B6%E4%BB%96/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">SVD 和图形处理</source>
      <description>SVD 和图形处理</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数学建模</category>
      <pubDate>Wed, 23 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> SVD 和图形处理</h1>
<p>SVD：奇异值分解（矩阵的分解），可以将数据降维，将图形压缩</p>
<p>这里说的降维，更准确的是说使得矩阵的秩减小，矩阵的大小并没有减小</p>
<p>优点：可以简化数据，去除噪声点，对数据进行降维</p>
<p>缺点：数据的转换可能难以理解</p>
<p>适用的数据类型：数值型</p>
<p>通过 SVD 对数据进行处理，我们可以对原始数据进行精简，这样做实际上是去除了噪声和冗余信息，以此达到优化数据的目的</p>
<p>SVD 的其他重要应用：</p>
<ol>
<li>潜在语义索引（可以阅读吴军老师的《数学之美》）</li>
<li>推荐系统</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>常见模型汇总</title>
      <link>https://gzwrrr.github.io/article/modeling/Z-%E5%85%B6%E4%BB%96/%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B%E6%B1%87%E6%80%BB.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/Z-%E5%85%B6%E4%BB%96/%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B%E6%B1%87%E6%80%BB.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">常见模型汇总</source>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 常见模型汇总</h1>
<iframe :src="$withBase('/markmap/html/常见数学模型大总结.svg')" width="100%" height="750" frameborder="0" scrolling="" leftmargin="0" topmargin="0"></iframe>]]></content:encoded>
    </item>
    <item>
      <title>数据库</title>
      <link>https://gzwrrr.github.io/article/modeling/Z-%E5%85%B6%E4%BB%96/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B1%87%E6%80%BB.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/Z-%E5%85%B6%E4%BB%96/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B1%87%E6%80%BB.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">数据库</source>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 数据库</h1>
]]></content:encoded>
    </item>
    <item>
      <title>模型优缺点</title>
      <link>https://gzwrrr.github.io/article/modeling/Z-%E5%85%B6%E4%BB%96/%E6%A8%A1%E5%9E%8B%E4%BC%98%E7%BC%BA%E7%82%B9.html</link>
      <guid>https://gzwrrr.github.io/article/modeling/Z-%E5%85%B6%E4%BB%96/%E6%A8%A1%E5%9E%8B%E4%BC%98%E7%BC%BA%E7%82%B9.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">模型优缺点</source>
      <description>数学建模评价类算法优缺点总结 数学建模预测类算法优缺点总结</description>
      <pubDate>Wed, 15 Feb 2023 14:39:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 模型优缺点</h1>
<h2> 数学建模评价类算法优缺点总结</h2>
]]></content:encoded>
    </item>
    <item>
      <title>数据结构与算法</title>
      <link>https://gzwrrr.github.io/article/algorithm/</link>
      <guid>https://gzwrrr.github.io/article/algorithm/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">数据结构与算法</source>
      <description>数据结构与算法</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>算法</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 数据结构与算法</h1>
<h2> 什么是算法？</h2>
<p>算法是对特定问题求解步骤的一种描述，它是指令的优先序列，其中每一条指令表示一个或多个操作，此外，一个算法还有以下五个重要特性：</p>
<ul>
<li>有穷性</li>
<li>确定性</li>
<li>可行性</li>
<li>输入</li>
<li>输出</li>
</ul>
<p><strong>一个好的算法应该具有：</strong></p>
<ul>
<li>正确性</li>
<li>健壮性</li>
<li>可读性</li>
<li>效率与地存储量需求</li>
</ul>
<p><strong>算法效率的度量：</strong></p>
<ul>
<li>事后统计的方法</li>
<li>事前分析估算的方法</li>
</ul>
<p><strong>高级语言所消耗的时间取决于：</strong></p>
<ul>
<li>依据的算法采用何种策略</li>
<li>问题的规模</li>
<li>书写程序的语言</li>
<li>编译程序所产生的机器代码的质量</li>
<li>机器指令运行的速度</li>
</ul>
<p><strong>相关名词：</strong></p>
<ul>
<li>时间复杂度</li>
<li>频度：语句重复执行的次数</li>
<li>空间复杂度</li>
<li>常用的时间复杂度所耗费的时间从小到大依次是：<code>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</code></li>
</ul>
<br>
<h2> 八大数据结构</h2>
<ul>
<li>数组（Array）</li>
<li>链表（LinkedList）</li>
<li>队列（Queue）</li>
<li>栈（Stack）</li>
<li>堆（Heap）</li>
<li>散列表（Hash）</li>
<li>树（Tree）</li>
<li>图（Graph）</li>
</ul>
<br>
<h2> 八大常用算法思想</h2>
<ul>
<li>枚举/穷举</li>
<li>递推</li>
<li>递归</li>
<li>分治</li>
<li>动态规划</li>
<li>贪心算法</li>
<li>回溯算法</li>
<li>模拟算法</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>设计模式</title>
      <link>https://gzwrrr.github.io/article/design/</link>
      <guid>https://gzwrrr.github.io/article/design/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">设计模式</source>
      <pubDate>Sun, 12 Feb 2023 10:12:21 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 设计模式</h1>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL 优化</title>
      <link>https://gzwrrr.github.io/article/mysql/%E4%BC%98%E5%8C%96/SQL%E4%BC%98%E5%8C%96-%E6%9C%AA%E5%AE%8C%E5%96%84.html</link>
      <guid>https://gzwrrr.github.io/article/mysql/%E4%BC%98%E5%8C%96/SQL%E4%BC%98%E5%8C%96-%E6%9C%AA%E5%AE%8C%E5%96%84.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">MySQL 优化</source>
      <description>MySQL 优化</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数据库</category>
      <category>优化</category>
      <pubDate>Thu, 22 Dec 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> MySQL 本身的优化</h1>
<ul>
<li>MySQL 内核优化</li>
<li>SQL 优化</li>
<li>MySQL 服务器配置优化</li>
<li>参数常量设置优化</li>
<li>主从复制</li>
<li>容灾备份</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>脏读/不可重复读/幻读</title>
      <link>https://gzwrrr.github.io/article/mysql/%E9%80%9A%E7%94%A8/%E8%84%8F%E8%AF%BB-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB-%E5%B9%BB%E8%AF%BB-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/mysql/%E9%80%9A%E7%94%A8/%E8%84%8F%E8%AF%BB-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB-%E5%B9%BB%E8%AF%BB-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">脏读/不可重复读/幻读</source>
      <description>脏读/不可重复读/幻读</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>数据库</category>
      <category>小知识点</category>
      <pubDate>Sun, 07 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 脏读/不可重复读/幻读</h1>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读可能性</th>
<th>不能重复读可能性</th>
<th>幻读可能性</th>
<th>加锁读</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITTED</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>否</td>
<td>是</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>否</td>
<td>否</td>
<td>是（innodb 除外）</td>
<td>否</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>否</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>脏读：</p>
<ul>
<li>事务读取到其他事务没提交的数据（针对某个字段）</li>
</ul>
</li>
<li>
<p>不可重复读：</p>
<ul>
<li>指同一次事务中前后查询不一致的问题（针对某个字段）</li>
<li>即在并发更新时，另一个事务前后查询相同数据时不符合预期</li>
</ul>
</li>
<li>
<p>幻读：</p>
<ul>
<li>一次事务中前后数据量发生变化（针对某几行数据）</li>
<li>即在并发新增、删除这种会产生数量变化的操作时，另一个事务亲啊后查询相同数据时不符合预期</li>
</ul>
</li>
</ul>
<p><strong>PR 级别解决幻读问题：</strong></p>
<p>MySQL 5.1 以上默认使用 innodb，事务隔离级别为可重复读（REPEATABLE READ），但是由于 MVCC（Multi-Version Concurrency Control，多版本并发控制方案），这里的可重复读也可以解决幻读的问题；MVCC 核心为 UNDO_LOG 版本链和 ReadView 快照读（见下文的补充）</p>
<ul>
<li>
<p>UNDO_LOG 版本链使用链表的形式维护数据的历史版本，用于回滚，MySQL 在确保版本链数据不在被引用后才将其删除</p>
</li>
<li>
<p>ReadView 快照读是 SQL 执行时 MVCC 提取数据的依据；</p>
</li>
<li>
<p>【快照读】就是最普通的 Select 查询的 SQL 语句：【当前读】指代写操作对应的 SQL 语句，这时会加上写锁；只有【快照读】才会使用 MVCC，【当前读】会使用行锁与间隙锁</p>
</li>
<li>
<p>当使用 MVCC 时会访问 UNDO_LOG，根据 ReadView 中的数据与访问规则查找 UNDO_LOG 中的数据</p>
</li>
<li>
<p>但是其实 PR 级别下使用 MVCC 不能完全保证消除幻读</p>
<ul>
<li>当连续产生多次快照时，ReadView 会产生复用，没有幻读的问题</li>
<li>当两次快照之间存在【当前读】，ReadView 会重新生成，此时可能产生幻读</li>
</ul>
</li>
</ul>
<h1> 补充</h1>
<p><strong>UNDO_LOG 版本链的节点的数据结构包含四个字段：</strong></p>
<ul>
<li>id：标识</li>
<li>字段名：当前数据对应的字段名</li>
<li>trx_id：对应 ReadView 中的 trx_id</li>
<li>db_roll_ptr： next 指针</li>
</ul>
<p><strong>ReadView 的数据结构包含四个字段：</strong></p>
<ul>
<li>
<p>m_ids：当前活跃的事务编号集合，即还没有被提交的事务</p>
</li>
<li>
<p>min_trx_id：最小活跃事务编号</p>
</li>
<li>
<p>max_trx_id：预分配事务编号，当前最大事务编号 + 1</p>
</li>
<li>
<p>creator_trx_id： ReadView 创建者的事务编号</p>
</li>
</ul>
<p><strong>UNDO_LOG 版本链的访问规则：</strong></p>
<ul>
<li>当前事务 trx_id 等于 creator_trx_id 时，说明这个数据是自己修改的，可以访问</li>
<li>当 trx_id 小于 min_trx_id 时，说明数据已经提交，可以访问</li>
<li>当 trx_id 大于 max_trx_id时，说明该事务是 ReadView 生成之后才开启的，不允许访问</li>
<li>当 min_trx_id &lt;=  trx_id &lt;= max_trx_id 时，与 m_ids 中的事务比对，当 trx_id 不在m_ids 中时说明 trx_id 对应的已经提交，可以访问</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Coding 常用链接</title>
      <link>https://gzwrrr.github.io/article/other/%E5%B8%B8%E7%94%A8/Coding%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E5%B8%B8%E7%94%A8/Coding%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Coding 常用链接</source>
      <description>Coding 常用链接</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>链接</category>
      <category>导航</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Coding 常用链接</h1>
<h1> 学习路线</h1>
<ul>
<li><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">全栈学习路线参考-1</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 论坛/资源</h1>
<ul>
<li><a href="https://wx.zsxq.com/dweb2/index/group/51122858222824" target="_blank" rel="noopener noreferrer">知识星球</a></li>
<li><a href="https://yupi.icu/" target="_blank" rel="noopener noreferrer">编程导航知识星球</a></li>
<li><a href="https://www.mianshiya.com/" target="_blank" rel="noopener noreferrer">面试鸭</a></li>
<li><a href="https://www.code-nav.cn/" target="_blank" rel="noopener noreferrer">编程导航</a></li>
<li><a href="https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/tflvr3" target="_blank" rel="noopener noreferrer">学习指南</a></li>
</ul>
<br>
<hr>
<br>  
<h1> Java知识点整理</h1>
<ul>
<li><a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener noreferrer">cs-notes</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/157728866" target="_blank" rel="noopener noreferrer">知识点整理-1</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%9F%BA%E7%A1%80.md" target="_blank" rel="noopener noreferrer">Java 基础 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%AE%B9%E5%99%A8.md" target="_blank" rel="noopener noreferrer">Java 容器 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md" target="_blank" rel="noopener noreferrer">Java 并发 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md" target="_blank" rel="noopener noreferrer">Java 虚拟机 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20IO.md" target="_blank" rel="noopener noreferrer">Java IO - cs-notes</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 视频教程</h1>
<ul>
<li><a href="https://www.bilibili.com/video/BV1QF411Y7GY/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">八股文 -- 马士兵</a></li>
<li><a href="https://www.bilibili.com/video/BV16J411h7Rd?p=247&amp;spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Java 并发编程</a></li>
<li><a href="https://www.bilibili.com/video/BV1PJ411n7xZ?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Java 虚拟机</a></li>
<li><a href="https://www.bilibili.com/video/BV1E4411H73v?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Java 数据结构与算法</a></li>
<li><a href="https://www.bilibili.com/video/BV1G4411c7N4?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Java 23 种设计模式</a></li>
<li><a href="https://www.bilibili.com/video/BV1iq4y1u7vj?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">MySQL</a></li>
<li><a href="https://www.bilibili.com/video/BV1N741177F5?p=2&amp;spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">操作系统</a></li>
<li><a href="https://www.bilibili.com/video/BV1zW411t7YE?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">编译原理</a></li>
<li><a href="https://www.bilibili.com/video/BV1dp4y1Q7Hf?spm_id_from=333.999.0.0&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Maven</a></li>
<li><a href="https://www.bilibili.com/video/BV1Rv41177Af?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Redis</a></li>
<li><a href="https://www.bilibili.com/video/BV1cb4y1o7zz?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">RabbitMQ</a></li>
<li><a href="https://www.bilibili.com/video/BV19t41127de?p=2&amp;spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Quartz</a></li>
<li><a href="https://www.bilibili.com/video/BV18E411x7eT?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Spring Cloud Alibaba</a></li>
<li><a href="https://www.bilibili.com/video/BV1KW411u7vy?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">尚硅谷 MySQL 优化</a></li>
<li><a href="https://www.bilibili.com/video/BV18s411E78K?p=3&amp;spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">尚硅谷 Mongodb</a></li>
<li><a href="https://www.bilibili.com/video/BV1DJ411m7NR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">尚硅谷 Netty</a></li>
<li><a href="https://www.bilibili.com/video/BV1gz4y1C7RK/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">黑马 IO</a></li>
<li><a href="https://www.bilibili.com/video/BV1ZJ411s7Mn/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">黑马 SkyWalking</a></li>
<li><a href="https://www.bilibili.com/video/BV1DJ411m7NR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">尚硅谷 Netty</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 通用知识</h1>
<ul>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20-%20%E7%9B%AE%E5%BD%95.md" target="_blank" rel="noopener noreferrer">操作系统概述 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%20%E7%9B%AE%E5%BD%95.md" target="_blank" rel="noopener noreferrer">计算机网络概述 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md" target="_blank" rel="noopener noreferrer">数据库系统原理概述 - cs-notes</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 在线文档</h1>
<ul>
<li><a href="https://blog.algomooc.com/" target="_blank" rel="noopener noreferrer">剑指 offer 动画讲解</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 算题网站</h1>
<ul>
<li><a href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13" target="_blank" rel="noopener noreferrer">牛客-剑指 offer</a></li>
<li><a href="https://leetcode-cn.com/problem-list/xb9nqhhg/" target="_blank" rel="noopener noreferrer">Leetcode-剑指 offer</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 算法题解</h1>
<ul>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md" target="_blank" rel="noopener noreferrer">Leetcode-题解 - cs-notes</a></li>
<li><a href="https://space.bilibili.com/479038960/article" target="_blank" rel="noopener noreferrer">B 站专栏</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 前端</h1>
<ul>
<li><a href="https://www.bilibili.com/video/BV1934y1a7MN/?spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Vue 数据双向绑定实现</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>环境配置链接</title>
      <link>https://gzwrrr.github.io/article/other/%E5%B8%B8%E7%94%A8/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%93%BE%E6%8E%A5-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E5%B8%B8%E7%94%A8/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%93%BE%E6%8E%A5-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">环境配置链接</source>
      <description>环境配置链接</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>链接</category>
      <category>导航</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 环境配置链接</h1>
<h1> Docker</h1>
<ul>
<li><a href="https://www.cnblogs.com/qingyunzong/p/9011006.html#:~:text=CentOS7%20%E5%AE%89%E8%A3%85Docker%201%20%E4%B8%80%E3%80%81%E6%A3%80%E6%9F%A5%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%202%20%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85Docker%203%20%E4%B8%89%E3%80%81%E5%BB%BA%E7%AB%8Bdocker%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84,4%20%E5%9B%9B%E3%80%81%E5%AE%89%E8%A3%85centos%E9%95%9C%E5%83%8F....%205%20%E4%BA%94%E3%80%81%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8%206%20%E4%B8%83%E3%80%81%E4%B8%8A%E4%BC%A0%E8%BD%AF%E4%BB%B6%E5%88%B0%E5%AE%B9%E5%99%A8%E9%87%8C%E9%9D%A2%207%20%E5%85%AB%E3%80%81%E4%BF%9D%E5%AD%98%E9%95%9C%E5%83%8F" target="_blank" rel="noopener noreferrer">Centos7 安装 Docker -- 博客园用户： 扎心了，老铁 -- https://www.cnblogs.com/qingyunzong/</a></li>
<li><a href="https://www.cnblogs.com/hong01072/p/14078268.html#:~:text=%E5%9C%A8%E8%BF%90%E8%A1%8Cdocker%E5%AE%B9%E5%99%A8%E6%97%B6%E5%8F%AF%E4%BB%A5%E5%8A%A0%E5%A6%82%E4%B8%8B%E5%8F%82%E6%95%B0%E6%9D%A5%E4%BF%9D%E8%AF%81%E6%AF%8F%E6%AC%A1docker%E6%9C%8D%E5%8A%A1%E9%87%8D%E5%90%AF%E5%90%8E%E5%AE%B9%E5%99%A8%E4%B9%9F%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%EF%BC%9A%20docker,run%20--restart%3Dalways%20%E5%A6%82%E6%9E%9C%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%E4%BA%86%E5%88%99%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%A6%82%E4%B8%8B%E5%91%BD%E4%BB%A4%EF%BC%9A" target="_blank" rel="noopener noreferrer">Docker 容器自动重启 -- 博客园用户：QAQhong -- https://www.cnblogs.com/hong01072/</a></li>
<li><a href="https://blog.csdn.net/qq_27520051/article/details/91478732" target="_blank" rel="noopener noreferrer">Docker 网络故障修复 -- CSDN 用户：愤怒的小猿猿 -- https://blog.csdn.net/qq_27520051?type=blog</a></li>
</ul>
<br>
<h1> Nginx</h1>
<ul>
<li><a href="https://blog.csdn.net/lvxinchun/article/details/107589759" target="_blank" rel="noopener noreferrer">Centos7 安装 Nginx -- CSDN 用户：泗水长流 -- https://blog.csdn.net/lvxinchun</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/453181968#:~:text=%E5%AE%89%E8%A3%85Nginx%20%E4%B8%8B%E8%BD%BDNginx%E9%95%9C%E5%83%8F%20docker%20pull%20nginx%3Alatest%20%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84nginx%E7%9A%84%E9%95%9C%E5%83%8F%20%E8%BF%90%E8%A1%8Cnginx%E9%95%9C%E5%83%8F%20docker,-p%2080%3A80%20-d%20nginx%20%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3%20--name%20nginx%20%E6%8C%87%E5%AE%9A%E5%AE%B9%E5%99%A8%E7%9A%84%E5%90%8D%E7%A7%B0" target="_blank" rel="noopener noreferrer">Docker 安装 Nginx -- 知乎用户：xiaoyu -- https://www.zhihu.com/people/xiaoyu-19-4</a></li>
<li><a href="https://blog.csdn.net/weixin_44868863/article/details/91409710" target="_blank" rel="noopener noreferrer">Docker 安装 Nginx 报错解决 -- CSDN 用户：我还可以加班 -- https://blog.csdn.net/weixin_44868863?type=blog</a></li>
</ul>
<br>
<h1> 数据库</h1>
<ul>
<li><a href="https://blog.csdn.net/qq_36582604/article/details/80526287" target="_blank" rel="noopener noreferrer">Mysql57 -- CSND 用户：24只羊羊羊 -- https://blog.csdn.net/qq_36582604</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1657388" target="_blank" rel="noopener noreferrer">Docker 安装 Mysql -- 腾讯云开发者社区用户：飞翔的竹蜻蜓 -- https://cloud.tencent.com/developer/user/4510875</a></li>
</ul>
<br>
<h1> RabbitMQ</h1>
<ul>
<li><a href="https://www.jianshu.com/p/5d1f7652107b" target="_blank" rel="noopener noreferrer">Docker 安装 RabbitMQ -- 简书用户：zbsong  -- https://www.jianshu.com/u/b61284f47c2c</a></li>
<li><a href="https://blog.csdn.net/weixin_44200487/article/details/106189281#:~:text=1%E3%80%81%E5%85%88%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84rabbitmq%202%E3%80%81%E4%B8%8B%E8%BD%BD%E5%AE%8C%E4%BB%A5%E5%90%8E%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8%203%E3%80%81%20docker%20ps,%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E6%98%AF%E5%90%A6%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%204%E3%80%81%E6%B3%A8%E6%84%8F15672%E5%92%8C5672%E7%AB%AF%E5%8F%A3%E8%A6%81%E5%BC%80%E6%94%BE%205%E3%80%81%E8%BE%93%E5%85%A5http%3A%2F%2Fip%E5%9C%B0%E5%9D%80%EF%BC%9A%E7%AB%AF%E5%8F%A3%E5%8F%B7%20%E5%A6%82%EF%BC%9A%20http%3A%2F%2F192.168.06.22%3A15672%2F%206%E3%80%81%E8%AE%BF%E9%97%AErabbitmq%E4%B8%BB%E9%A1%B5%E6%97%B6%E4%BC%9A%E5%87%BA%E7%8E%B0%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%B2%A1%E6%9C%89%E5%BC%80%E5%90%AF%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener noreferrer">Docker 安装 RabbitMQ 后无法访问解决 -- CSDN 用户：光头才能变强 -- https://blog.csdn.net/weixin_44200487?type=blog</a></li>
</ul>
 <br>
<h1> Redis</h1>
<ul>
<li><a href="https://blog.csdn.net/qq_40313468/article/details/109249331" target="_blank" rel="noopener noreferrer">Docker 安装 Redis -- CSDN 用户：知 行 合 一 -- https://blog.csdn.net/qq_40313468</a></li>
</ul>
<br>
<h1> Zookeeper</h1>
<ul>
<li><a href="https://blog.csdn.net/zhang_m_h/article/details/123682877?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166460638616800182779227%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166460638616800182779227&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123682877-null-null.142%5Ev51%5Econtrol,201%5Ev3%5Eadd_ask&amp;utm_term=linux%E5%AE%89%E8%A3%85zookeeper&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener noreferrer">Centos7 安装 Zookeeper -- CSDN 用户：大梦_几千秋 -- https://blog.csdn.net/zhang_m_h?type=blog</a></li>
</ul>
<br>
<h1> Java</h1>
<ul>
<li><a href="https://www.cnblogs.com/huaisn/articles/14499330.html" target="_blank" rel="noopener noreferrer">JAVA_HOME 配置 -- 博客园用户：Huaisn --https://www.cnblogs.com/huaisn/</a></li>
</ul>
<br>
# PostgreSQL  
<ul>
<li><a href="https://blog.csdn.net/yetyrain/article/details/105642488" target="_blank" rel="noopener noreferrer">Docker 安装 PostgreSQL - CSDN 用户：raining…… -- https://blog.csdn.net/yetyrain</a></li>
</ul>
<br>
<br>]]></content:encoded>
    </item>
    <item>
      <title>领域模型分类</title>
      <link>https://gzwrrr.github.io/article/other/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B%E5%88%86%E7%B1%BB-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B%E5%88%86%E7%B1%BB-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">领域模型分类</source>
      <description>领域模型分类</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>架构</category>
      <category>通用</category>
      <pubDate>Sun, 25 Sep 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 领域模型分类</h1>
<h1> 写在前面</h1>
<blockquote>
<p>以下探讨的不是 DDD 领域驱动设计的内容，而是 MVC 架构中的 Model 一层；虽然概念比较多，一开始可能也比较摸不着头脑（会有疑问：为什么要弄得这么复杂），但是有一定的开发经验后再回过头来理解，就会发现其中的好处，所以这里就先放下疑问，先了解完再思考</p>
</blockquote>
<p><strong>领域模型大致有五类：</strong></p>
<ul>
<li>VO</li>
<li>DTO</li>
<li>DO</li>
<li>BO</li>
<li>PO</li>
</ul>
<p><strong>此外，还有一些关联的概念：</strong></p>
<ul>
<li>Entity</li>
<li>Domain</li>
<li>POJO</li>
</ul>
<br>
<h1> VO (View Object)</h1>
<blockquote>
<p><strong>门面</strong>：出去见人前要先把自己收拾好，让别人看到想看的；对接<strong>搬运工</strong>，拿到自己想要的东西再收拾自己</p>
</blockquote>
<ul>
<li>视图对象</li>
<li>用于展示层</li>
<li>用于把某个指定页面或者组件的所有数据封装起来</li>
<li>VO 对象中的数据一般是 DTO 经过一定的业务逻辑转化而来的（值或者字段可能都不一样）</li>
</ul>
<p>注：还用一种 VO 是指 Value Object，是只有状态而没有行为的对象，相关概念有贫血模型，这里就不展开叙述了</p>
<br>
<h1> DTO (Data Transfer Object)</h1>
<blockquote>
<p><strong>搬运工</strong>：搬运前要将物品（数据）搬上车整理好；对接<strong>门面</strong>，交付物品</p>
</blockquote>
<ul>
<li>数据传输对象</li>
<li>原本来源于 J2EE 的设计模式，旨在提供粗粒度的数据实体，减少分布式调用的次数，降低网络负载，提高性能</li>
<li>另一层是泛指展示层和服务层之间用于数据传输的对象</li>
</ul>
<p><strong>两种存在形式：</strong></p>
<ul>
<li>前端：DTO 存在形式通常是 JS 中的（JSON） 对象，是通过异步请求获取到的数据对象</li>
<li>后端：上述提到的传输对象，不需要考虑前后端对象的转换，使用的框架一般都会解决这个问题</li>
</ul>
<br>
<h1> PO (Persistent Object)</h1>
<blockquote>
<p><strong>记录员</strong>：负责把数据原原本本地记录到库中；对接主管，把数据悉数上交</p>
</blockquote>
<ul>
<li>持久化对象，与 Entity 实体的概念是一致的</li>
<li>跟持久层的数据形成一一对应的映射关系</li>
<li>对于现在的开发而言，一般来说 PO 对象就是上文所说的贫血模型（Value Object），行为只有 setter/getter（这里涉及到了 DDD，不展开叙述）</li>
<li>对于简单的业务来说，PO 有时也可以充当 DTO</li>
</ul>
<br>
<h1> BO (Business Object)</h1>
<blockquote>
<p><strong>主管</strong>：管记录员；对接搬运工，将记录员的全部数据交给搬运工运输</p>
</blockquote>
<ul>
<li>
<p>BO 简单来说就是 PO 的组合</p>
</li>
<li>
<p>如果 PO 是一条数据记录对象，那么 BO 就是全部数据记录的集合对象</p>
</li>
<li>
<p>不难发现 BO 其实就是一个业务对象，BO 中会有很多跟业务有关的行为或操作</p>
</li>
<li>
<p>BO 这个概念在许多框架中可能不易察觉，因为这些框架自身就带有数据组合的功能，因此 PO 拼接成 BO 这个操作可能在业务层完成（在实现业务逻辑中完成）；也有可能是在数据访问层由框架直接生成 BO</p>
</li>
<li>
<p>BO 与 DTO 的区别主要就是字段数量不同，一般 BO 的字段会比 DTO 多，因为处理业务过程中需要额外的数据，而交到 DTO 手中之后，DTO 就只需要选择自己需要的即可</p>
</li>
</ul>
<br>
<h1> DO (Domain Object)</h1>
<blockquote>
<p>实际含义比较抽象，就不拟人了</p>
</blockquote>
<ul>
<li>领域对象</li>
<li>指从现实世界抽象出来的业务实体（这里其实与 DDD 的关联更大，但是并非重点，不赘述）</li>
<li>当 DO 的含义为 Data Object 时，其实就等同于上面的 PO（阿里巴巴手册中的定义）</li>
<li>当 DO 的含义为 Domain Object 时，其实就等于上面的 BO</li>
</ul>
<br>
<h1> POJO (Plain ordinary java object)</h1>
<blockquote>
<p>无规则简单 Java 对象，也叫 Pure old java object，实际上就是普通的 JavaBean</p>
</blockquote>
<ul>
<li>
<p>POJO 其实是一个中间对象，可以转化为上述的 VO/PO/DTO</p>
</li>
<li>
<p>或者换种说法更为直接：POJO 持久化后就是 PO；POJO 在传输过程中就是 DTO；POJO 用作表示层时就是 VO</p>
</li>
<li>
<p>但是在一般的开发中，PO 对象所在的包一般以 pojo 命名（或者使用 entity/domain），而这只是为了区分不同的对象，不必太过纠结</p>
</li>
</ul>
<br>
<h1> Entity/Domain</h1>
<blockquote>
<p>可以理解成 pojo 的别名，虽然概念和范围上不太相同，但是并不会有影响</p>
</blockquote>
<ul>
<li>Entity：实体类，属性严格对应数据库表的字段，类似 PO</li>
<li>Domain：封装了数据库字段的 JavaBean 对象，其中可以封装多个表格数据，范围比较大，类似 BO</li>
<li>但是实际开发中，pojo/entity/domain 包下的对象一般都是 PO，这里不必纠结</li>
</ul>
<br>
<h1> 写在最后</h1>
<ul>
<li>其实有这么多概念只是为了做出<strong>层次划分</strong>和<strong>规范</strong>；划分层次其实是提供了类似防腐层的作用，使得项目结构清晰的同时有着更多的容错性，规范则是让团队协作开发更加容易</li>
<li>诚然，如果不考虑项目的实际情况就全部套用，可能会让项目变得复杂繁琐，而实际开发中，确实不会全部套用，更多的是开发小组内讨论决定使用怎么样的规范，最终目的其实是为了项目的<strong>开发效率</strong>和<strong>可维护性</strong></li>
<li>对于这些概念其实也不必太过纠结，更重要的是理解其背后的含义，如何称呼或者划分只是一个表现形式，实际落地要懂得变通，只要形成了组内的规范并且达到了其含义背后想要的结果即可</li>
</ul>
<p><br><br></p>
]]></content:encoded>
    </item>
    <item>
      <title>Linux下安装MySQL</title>
      <link>https://gzwrrr.github.io/article/other/%E8%BF%90%E7%BB%B4/Linux%E4%B8%8B%E5%AE%89%E8%A3%85MySQL-%E4%B8%8D%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E8%BF%90%E7%BB%B4/Linux%E4%B8%8B%E5%AE%89%E8%A3%85MySQL-%E4%B8%8D%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Linux下安装MySQL</source>
      <description>Linux下安装MySQL</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>linux</category>
      <category>安装</category>
      <pubDate>Thu, 21 Apr 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Linux下安装MySQL</h1>
<h1> 下载</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 解压</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 创建存储文件</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 创建用户组</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 初始化 MySQL</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 添加服务到系统</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Linux 常用命令</title>
      <link>https://gzwrrr.github.io/article/other/%E8%BF%90%E7%BB%B4/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E8%BF%90%E7%BB%B4/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Linux 常用命令</source>
      <description>Linux 常用命令</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>linux</category>
      <category>运维</category>
      <pubDate>Thu, 24 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Linux 常用命令</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>如何记录日志</title>
      <link>https://gzwrrr.github.io/article/other/%E9%80%9A%E7%94%A8/%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E9%80%9A%E7%94%A8/%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">如何记录日志</source>
      <description>如何记录日志</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>通用</category>
      <category>编程</category>
      <pubDate>Mon, 06 Jun 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 如何记录日志</h1>
<h1> 日志格式化</h1>
<h2> 基本内容</h2>
<ul>
<li>时间</li>
<li>日志级别</li>
<li>日志信息</li>
</ul>
<br>
<h2> 进阶</h2>
<ul>
<li>线程名：可以通过线程名区分业务流程</li>
<li>主机名：分布式场景下，可以通过主机名区分实例的级别</li>
<li>方法名：方便区分相同日志的出处</li>
<li>类名：方便快速定位业务流程</li>
<li>行数：方便快速定位具体位置</li>
</ul>
<br>
<h2> 修饰</h2>
<ul>
<li>中括号 [] ：修饰日志级别、线程名、主机名</li>
<li>小括号 () ：修饰方法名、类名、行数（冒号隔开类名和行号）</li>
<li>横线 -- ：分割行号和日志信息</li>
<li>日志信息自定，关键在于记录入参与可能出现的错误</li>
</ul>
<br>
<h1> 链式追踪</h1>
<ul>
<li>在每条日志中加入业务系统中的一个或者多个唯一的 ID 标识</li>
<li>在定位业务问题是可以通过这些唯一 ID 快速过滤出相关的日志</li>
</ul>
<br>
<h1> 日志级别</h1>
<p>以下只是重要的日志级别</p>
<ul>
<li>Debug：记录技术细节和帮助理解系统运行的日志</li>
<li>Info：记录业务信息的日志</li>
<li>Warn：非紧急的可接受的错误信息</li>
<li>Error：非期望的错误或系统表现，通常由系统 bug 或环境问题导致</li>
</ul>
<p>注：日志级别从低到高：All、Trace、Debug、Info、Warn、Error、Fatal、Off</p>
<p><strong>不同环境下建议的日志级别：</strong></p>
<ul>
<li>Dev：Debug</li>
<li>Test：Debug</li>
<li>UAT：Info</li>
<li>Prod：Info</li>
</ul>
<br>
<h1> 日志位置</h1>
<ul>
<li>其他系统调用自有系统时：在受到请求和完成请求时各打印一次日志</li>
<li>自用系统调用第三方系统的接口时：在发送请求前和收到返回信息后各打印一次日志</li>
<li>任何可能出现异常的地方都需要打上日志</li>
</ul>
<p>注：还有一种特殊情况是，像消息传递之类的系统，为了节省日志存储和减少查看干扰，大多时候我们不需要在收到消息后直接打印该消息，一般建议在收到消息后，如果系统处理有异常，在异常中将原始消息打印。</p>
<br>
<h1> 注意点</h1>
<ul>
<li>避免打印或记录任何敏感信息</li>
<li>...</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>开发环境分类</title>
      <link>https://gzwrrr.github.io/article/other/%E9%80%9A%E7%94%A8/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%88%86%E7%B1%BB-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E9%80%9A%E7%94%A8/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%88%86%E7%B1%BB-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">开发环境分类</source>
      <description>开发环境分类</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>通用</category>
      <category>编程</category>
      <pubDate>Sun, 12 Feb 2023 10:12:21 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 开发环境分类</h1>
<h1> 概述</h1>
<p><strong>开发环境一般分为以下四种：</strong></p>
<ul>
<li>开发环境（dev）</li>
<li>测试环境（test）</li>
<li>预发布环境（pre）</li>
<li>生产环境（prod）</li>
</ul>
<p>此外，还可能有灰度发布，指的是从预发布环境到生产环境之间的一个过程，目的是防止加入新功能后因某些错误导致产品不可用</p>
<br>
<h1> 开发环境</h1>
<blockquote>
<p>专门用于开发和调试的环境，与真实环境隔离开，有着独立的客户机服务器以及配置等</p>
</blockquote>
<ul>
<li>日志等级一般为 debug</li>
<li>确认代码在开发环境没有问题之后，交由测试环境进行测试</li>
</ul>
<br>
<h1> 测试环境</h1>
<blockquote>
<p>测试人员利用一些工具与数据模拟出来的，接近真实用户使用的环境</p>
</blockquote>
<ul>
<li>与开发环境隔离开，配置与生产环境类似</li>
<li>测试人员需要在该环境下进行功能模块测试、集成测试、系统测试等</li>
<li>测试环境中功能型 bug 暴露较多</li>
<li>当生产环境和开发环境版本不一致，且生产环境又发现了 bug，测试环境就可以充当中间测试的一层，即：使得开发环境不用回滚</li>
</ul>
<br>
<h1> 预发布环境</h1>
<blockquote>
<p>非必要的环境，如果是通过打包的形式发布的，那么可以不用预发布环境；如果是直接发布仓库代码，那么就应当加入预发布环境</p>
</blockquote>
<p><strong>仓库代码分支的作用：</strong></p>
<ul>
<li>dev：开发分支，对应开发环境</li>
<li>test：测试分支，对应测试分支</li>
<li>release：预发布分支，该分支是测试分支通过后开发人员将代码合并的分支，合并后测试通过就发布到线上环境</li>
<li>master：允许发布到线上部分的代码会合并到此分支，如果需要添加新功能，需要先拉取此分支后再创建新的分支进行开发</li>
</ul>
<p><strong>预发布的作用：</strong></p>
<ul>
<li>正式发布前的最后测试，环境与生产环境高度相似或相同，可以进一步发现在测试环境没发现的问题</li>
<li>预发布环境的数据量和测试环境可能不一样，预发布环境的数据量一般较大，发现错误的几率也较大，可以降低草草上线的维护成本</li>
<li>当测试环境和生产环境版本不一致，且生产环境又发现了 bug，预发布环境就可以充当中间测试的一层，即：使得测试环境不用回滚</li>
</ul>
<br>
<h1> 生产环境</h1>
<blockquote>
<p>线上环境，由运维人员维护，该环境正式提供对外服务，即真实用户的使用环境</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>接口调用出错的应对策略</title>
      <link>https://gzwrrr.github.io/article/other/%E9%80%9A%E7%94%A8/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%87%BA%E9%94%99%E7%9A%84%E5%BA%94%E5%AF%B9%E7%AD%96%E7%95%A5-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E9%80%9A%E7%94%A8/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%87%BA%E9%94%99%E7%9A%84%E5%BA%94%E5%AF%B9%E7%AD%96%E7%95%A5-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">接口调用出错的应对策略</source>
      <description>接口调用出错的应对策略</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>通用</category>
      <category>编程</category>
      <pubDate>Sun, 12 Feb 2023 10:12:21 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 接口调用出错的应对策略</h1>
<h1> 写在前面</h1>
<ul>
<li>对于接口调用失败的情况，如果没有相应的容错应对策略很可能导致服务不可用</li>
<li>常见的容错策略有：
<ul>
<li>故障转移</li>
<li>快速失败</li>
<li>安全失败</li>
<li>沉默失败</li>
</ul>
</li>
</ul>
<br>
<h1> 故障转移</h1>
<ul>
<li>高可用的服务集群中（尤其是被依赖的关键服务）均会部署多个副本</li>
<li>这些节点可以部署在不同的节点、网络交换区、可用区（分别应对节点宕机、网络分区、不可抗力导致的故障）</li>
<li>故障转移是指如果调用的服务器出现故障，系统不会立即向调用者返回失败结果，而是自动切换到其他的节点尝试返回成功调用的结果</li>
<li>这样可以保证整体的高可用性</li>
</ul>
<br>
<h1> 快速失败</h1>
<ul>
<li>有一些业务场景是不允许做故障转移的，因为故障转移策略的前提是服务具备幂等性</li>
<li>对于非幂等性的服务，重复调用就可能产生脏数据，这样带来的麻烦远远大于某次服务调用失败的，此时应该选择快速失败作为容错策略</li>
<li>当非幂等性服务调用失败后，往往是不清楚哪一步出现异常的，此时为了避免重复操作，最恰当的做法就是尽快让服务报错，尽快抛出异常让调用者处理</li>
</ul>
<br>
<h1> 安全失败</h1>
<ul>
<li>在一个调用链路中的服务通常分为主路和旁路，即不是每个服务都是不可或缺的，有些服务失败了也不影响核心业务的正确性</li>
<li>使用 Spring 开发时，通过扩展点、事件或者 AOP 注入的逻辑通常都属于旁路逻辑，如：审计、日志、调式信息等</li>
<li>属于旁路逻辑的另一个显著特征是后续处理不会依赖其返回值，或者该返回值不会影响后续的处理结果</li>
<li>对于这类旁路逻辑，一种理想的容错策略是：即使旁路逻辑失败了也当作正确的返回；如果需要返回值的话，系统就自动返回一个符合返回类型的值</li>
<li>失败后系统会自动记录一条服务调用出错的日志备查，这样的策略就被称为安全失败</li>
</ul>
<br>
<h1> 沉默失败</h1>
<ul>
<li>如果大量请求需要等到才是或者长时间处理后才能宣告失败，那么很容易由于某个远程服务的请求堆积而消耗大量的线程、内存、网络等资源而影响系统稳定</li>
<li>对于这种情况，一种合理的策略是当请求在一段时间连续失败若干次后，默认服务提供方在以一定时间内无法再对外服务，此时进行熔断，不在向它分配请求流量，即将错误隔离开来，避免对其他部分产生影响，这样的策略就被称为沉默失败</li>
</ul>
<br>
<h1> 优缺点/应用场景</h1>
<table>
<thead>
<tr>
<th style="text-align:center">容错策略</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">缺点</th>
<th style="text-align:center">应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">故障转移</td>
<td style="text-align:center">系统自动处理<br>调用者对失败的信息不可见</td>
<td style="text-align:center">增加了调用时间<br>消耗了额外的资源</td>
<td style="text-align:center">调用的是幂等性服务<br>对调用时间不敏感</td>
</tr>
<tr>
<td style="text-align:center">快速失败</td>
<td style="text-align:center">调用者对失败的处理有控制权<br>不依赖服务的幂等性</td>
<td style="text-align:center">调用则必须正确处理失败<br>如果只是抛异常可能引起雪崩</td>
<td style="text-align:center">调用的是非幂等性服务<br>超时阈值较低</td>
</tr>
<tr>
<td style="text-align:center">安全失败</td>
<td style="text-align:center">不影响主路逻辑</td>
<td style="text-align:center">只适用于旁路调用</td>
<td style="text-align:center">调用链中的旁路服务</td>
</tr>
<tr>
<td style="text-align:center">沉默失败</td>
<td style="text-align:center">能够控制错误，避免影响整体</td>
<td style="text-align:center">出错的服务将在一段时间内不可用</td>
<td style="text-align:center">频繁超时的服务</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>编程模式</title>
      <link>https://gzwrrr.github.io/article/other/%E9%80%9A%E7%94%A8/%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E9%80%9A%E7%94%A8/%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">编程模式</source>
      <description>编程模式</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>通用</category>
      <category>编程</category>
      <pubDate>Thu, 14 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 编程模式</h1>
<h1> 写在前面</h1>
<ul>
<li>无论哪种编程模式，都有其使用的场景，不存在优劣之分，也没有哪一种是银弹</li>
<li>在不同场景下选用不同的模式可以为所编写的代码带来更好的可读性或降低出错的概率</li>
<li>编程模式大致分为四种：命令式、声明式、过程式、函数式</li>
</ul>
<br>
<h1> 命令式</h1>
<ul>
<li>关注/强调实现的细节，即关注 How 而不是 What</li>
<li>可以理解为面向过程编程</li>
</ul>
<br>
<h1> 声明式</h1>
<ul>
<li>关注/强调结果而不是细节，即关注 What 而不是 How</li>
<li>SQL 语句就是典型的声明式编程</li>
</ul>
<br>
<h1> 过程式</h1>
<ul>
<li>用一系列的流程完成任务</li>
<li>无返回值，但是会产生副作用（副作用可以理解为：改变入参的内部状态）</li>
</ul>
<br>
<h1> 函数式</h1>
<ul>
<li>用一系列的函数完成任务</li>
<li>有返回值，但是没有副作用，即入参决定出参，无论调用多少次，只要入参相同，出参也一定相同</li>
<li>函数式编程中，函数还可以作为入参</li>
</ul>
<br>
<br>]]></content:encoded>
    </item>
    <item>
      <title>IOC</title>
      <link>https://gzwrrr.github.io/article/springs/%E5%8E%9F%E7%90%86/IOC-%E6%9C%AA%E5%AE%8C%E5%96%84.html</link>
      <guid>https://gzwrrr.github.io/article/springs/%E5%8E%9F%E7%90%86/IOC-%E6%9C%AA%E5%AE%8C%E5%96%84.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">IOC</source>
      <description>IOC</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>spring</category>
      <category>原理</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> IOC</h1>
<h2> IoC Servive Provider</h2>
<blockquote>
<p>理念是：让别人为你服务</p>
</blockquote>
<h3> 三种注入方式</h3>
<p><strong>1.构造方法注入（construct injection）</strong></p>
<blockquote>
<p>进酒吧就有酒送上</p>
</blockquote>
<ul>
<li>
<p>被注入对象可以通过在其构造方法中声明依赖对象的参数列表，让外部（通常是IoC容器）知道它需要哪些依赖对象</p>
</li>
<li>
<p>IoC Service Provider会检查被注入对象的构造方法，取得它所需要的依赖对象列表，进而为其注</p>
<p>入相应的对象</p>
</li>
<li>
<p>同一个对象是不可能被构造两次的，因此，被注入对象的构造乃至其整个生命周期，应该是由IoC Service Provider来管理的</p>
</li>
</ul>
<p>优点：</p>
<ul>
<li>方便，开箱即用</li>
</ul>
<p>缺点：</p>
<ul>
<li>注入的方法太多，构造方法参数会过长</li>
<li>使用反射创建该对象时可能会很麻烦</li>
<li>构造方法无法继承，无法设置默认值</li>
<li>对于非必要的依赖，如果使用构造方法进行依赖注入可能需要构建多个不同参数的构造方法，对之后的维护不利</li>
</ul>
<p><strong>2.setter 方法注入（setter injection）</strong></p>
<blockquote>
<p>进酒吧先选择喝什么</p>
</blockquote>
<ul>
<li>象只要为其依赖对象所对应的属性添加setter方法，就可以通过setter方法将相应的依赖对象设置到被注入对象中</li>
</ul>
<p>优点：</p>
<ul>
<li>可以被继承</li>
<li>可以设置默认值</li>
</ul>
<p>缺点：</p>
<ul>
<li>不能立即使用</li>
</ul>
<p><strong>3.接口注入（interface injection）</strong></p>
<blockquote>
<p>你不是来喝酒的</p>
</blockquote>
<ul>
<li>如果需要注入依赖对象，被注入对象就必须声明和实现另外的接口。</li>
<li>接口注入是现在不甚提倡的一种方式，基本处于“退役状态”。因为它强制被注入对象实现不必要的接口，带有侵入性。而构造方法注入和setter方法注入则不需要如此</li>
</ul>
<h3> 职责</h3>
<ul>
<li>业务对象的构建管理</li>
<li>业务对象间的依赖绑定</li>
</ul>
<h3> 管理依赖的方法</h3>
<ul>
<li>直接编码</li>
<li>编写配置文件（早期常使用 XML 配置文件的方式）</li>
<li>元数据方式（通过注解说明依赖关系，可以看作编码方式的一种特殊情况）</li>
</ul>
<h2> IoC Container</h2>
<blockquote>
<p>IoC 容器除了是一个 IoC Servive Provider 外，还提供了其他服务（衍生的高级特性），如：AOP 支持、对象生命周期管理、线程管理、查找服务...</p>
<p>Spring 的 IoC 容器提供了两种容器：BeanFactory 和 ApplicationContext</p>
</blockquote>
<h3> BeanFactory</h3>
<ul>
<li>基础类型容器，提供基本的但完整的 IoC 服务</li>
<li>采用延迟初始化策略（lazy-load），即：需要使用时才初始化并注入依赖</li>
<li>可以完成作为 IoC Servive Provider 的所有职责，包括了对象的注册和对象间依赖关系的绑定</li>
</ul>
<p><strong>依赖管理：</strong></p>
<p>XML 依赖管理（使用 Properties 配置文件管理的与 xml 类似）：</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//ioc/20230210/依赖管理.png" alt="image-20220930085813531" tabindex="0" loading="lazy"><figcaption>image-20220930085813531</figcaption></figure>
<div class="language-cml line-numbers-mode" data-ext="cml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接编码依赖管理：</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//ioc/20230210/直接编码依赖管理.png" alt="image-20220930083408110" tabindex="0" loading="lazy"><figcaption>image-20220930083408110</figcaption></figure>
<ul>
<li>BeanFactory 是图书管理员</li>
<li>BeanDefinitionRegistry 是书架</li>
<li>BeanDefinition 是书，每一个受管的对象，容器内都有一个对应的 BeanDefinition 实例</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解管理方式（spring 2.5 之后才支持）：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>classpath-scanning 触发器</p>
<div class="language-XML line-numbers-mode" data-ext="XML"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BeanFactory 的 Bean scope：</strong></p>
<ul>
<li>BeanFactory 作为轻量级的 IoC 容器，还可以管理对象的生命周期</li>
<li>scope 有 5 种范围（后三种是 2.0 之后引入的，只能在 Web 容器中使用）：
<ul>
<li>singleton：同一个容器中只存在一个共享实例（不要和单例模式弄混，单例模式是保证在同一个 ClassLoader 中只存在一个这样的实例），初始化后一直存活到容器退出</li>
<li>prototype：每次接收到请求后都生成一个新的对象实例给请求方，容器没有该实例的引用，即需要请求方自己管理该实例的声明周期</li>
<li>request：为每个 HTTP 请求创建一个全新的对象，当请求结束之后，这个实例的生命周期即告结束，可以看作是 prototype 的特例（场景更加具体，但是语义差不多）</li>
<li>session：经常将用户的登录信息放到 session 中。容器会为每个 session 创建数据它的全新的对象实例，存活的时间比使用 request 范围的对象长，其余的差不多</li>
<li>global session：只有应用在基于 pertlet 的 Web 应用程序中才有意义，它映射到 portlet 的 global 范围的 session；如果在普通的基于 servlet 的 Web 应用中使用这个类型的话，容器会将其作为普通的 session 类型对待</li>
</ul>
</li>
<li>scope 属性只能在 XSD 哥哥是的文档声明中使用</li>
<li>scope 属性可以自定义，这里省略不谈</li>
</ul>
<p>p69</p>
<h3> ApplicationContext</h3>
<ul>
<li>在 BeanFactory 的基础上构建（间接继承 BeanFactory，还额外继承了几个接口），是高级的容器实现</li>
<li>提供了其他的高级特性</li>
<li>管理的对象在容器启动后全部初始化完毕并绑定完成</li>
</ul>
]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//ioc/20230210/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.png" type="image/png"/>
    </item>
    <item>
      <title>依赖与配置项</title>
      <link>https://gzwrrr.github.io/article/springs/%E9%80%9A%E7%94%A8/%E4%BE%9D%E8%B5%96%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%B1%BB-%E6%9C%AA%E5%AE%8C%E5%96%84.html</link>
      <guid>https://gzwrrr.github.io/article/springs/%E9%80%9A%E7%94%A8/%E4%BE%9D%E8%B5%96%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%B1%BB-%E6%9C%AA%E5%AE%8C%E5%96%84.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">依赖与配置项</source>
      <description>依赖与配置项</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>spring</category>
      <category>配置</category>
      <pubDate>Sun, 11 Sep 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 依赖与配置项</h1>
<h1> 基本开发设置</h1>
<h2> 1.热重启</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 模板引擎</h1>
<h2> 1.thymeleaf</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 简化工具</h1>
<h2> 1.lombok</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 数据库连接</h1>
<h2> 1.Druid</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>DruidConfig.java</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.Mybatis</h2>
<blockquote>
<p>要在启动类上加 @MapperScan</p>
</blockquote>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>mybatis-config.xml</p>
</blockquote>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>mapper.xml 示例</p>
</blockquote>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3.Mybatis Plus + 代码生成配置</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>CodeGenerator.java</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 日志</h1>
<h2> 1.log4j</h2>
<blockquote>
<p>templates 包下的 log4j.properties</p>
</blockquote>
<div class="language-pr line-numbers-mode" data-ext="pr"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.slf4j + logback</h2>
<blockquote>
<p>logback.xml</p>
</blockquote>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3.starter-logging</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 安全配置</h1>
<h2> 1.Shiro</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.JWT</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 接口对接</h1>
<h2> 1.Swagger</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Spring Cloud 简单使用</title>
      <link>https://gzwrrr.github.io/article/springs/SpringCloud/Alibaba/SpringCloudAlibaba-%E6%9C%AA%E5%AE%8C%E5%96%84.html</link>
      <guid>https://gzwrrr.github.io/article/springs/SpringCloud/Alibaba/SpringCloudAlibaba-%E6%9C%AA%E5%AE%8C%E5%96%84.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Spring Cloud 简单使用</source>
      <description>Spring Cloud 简单使用</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>spring</category>
      <category>分布式</category>
      <pubDate>Sun, 12 Feb 2023 10:12:21 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Spring Cloud 简单使用</h1>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//springcloud/20230210/springcloud图标.png" alt="springCloud" tabindex="0" loading="lazy"><figcaption>springCloud</figcaption></figure>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//springcloud/20230210/架构.png" alt="image-20220212202341628" tabindex="0" loading="lazy"><figcaption>image-20220212202341628</figcaption></figure>
<h1> 概述</h1>
<ul>
<li><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">Spring Cloud 官网</a></li>
</ul>
<h2> 生态</h2>
<ol>
<li>Spring Cloud NetFlix —— 旧一站式解决方案</li>
<li>Apache Dubbo Zookeeper（注册与发现） —— 半自动解决方案</li>
<li>*<strong>Spring Cloud Alibaba —— 新一站式解决方案</strong></li>
</ol>
<p><strong>重点关注的问题：</strong></p>
<ol>
<li>服务注册和发现：
<ul>
<li><s>eureka</s> √</li>
<li>Zookeeper √</li>
<li>Consul √</li>
<li>Nacos √</li>
</ul>
</li>
<li>服务负载均衡与调用：
<ul>
<li><s>ribbon</s> / LoadBalancer</li>
<li><s>Feign</s> / OpenFeign</li>
</ul>
</li>
<li>服务熔断与降级：
<ul>
<li><s>hystrix</s></li>
<li><s>resilience4j</s></li>
<li>sentienl</li>
</ul>
</li>
<li>服务消息队列</li>
<li>配置中心管理：
<ul>
<li><s>Spring Cloud Config</s></li>
<li>Nacos</li>
</ul>
</li>
<li>服务网关：
<ul>
<li><s>Zuul</s></li>
<li>gateway</li>
</ul>
</li>
<li>服务总线
<ul>
<li><s>Bus</s></li>
<li>Nacos</li>
</ul>
</li>
<li>服务监控</li>
<li>全链路追踪</li>
<li>自动化构建部署</li>
<li>服务定时任务调度操作</li>
</ol>
<h1> 工程构建</h1>
<h2> 1.父项目</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.工具类</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3.Eureka 服务</h2>
<p><strong>虽然之后不使用 Eureka，但是也需要了解</strong></p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//springcloud/20230210/eureka首页.png" alt="image-20220930170624591" tabindex="0" loading="lazy"><figcaption>image-20220930170624591</figcaption></figure>
<p>主启动类加上 <code>@EnableEurekaServer</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4.Payment 模块</h2>
<p>主启动类加上 <code>@EnableEurekaClient</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5.Consumer 模块</h2>
<p>主启动类加上 <code>@EnableEurekaClient</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>远程调用的配置类:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>远程调用示例：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6.Zookeeper 模块</h2>
<p>主启动类上加上 <code>@EnableDiscoveryClient</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7.Consul 模块</h2>
<p>主启动类上加上 <code>@EnableDiscoveryClient</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.OpenFeign 模块</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9.Hystrix 模块</h2>
<h3> 9.1 Hystrix 服务模块</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>主启动类上加上服务发现和服务熔断的注解：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.2 Hystrix  消费模块</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>主启动类上加上服务调用和服务降级的注解：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9.3 Hystrix Dashboard</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>确保在需要监控的服务上的 Pom 文件中加上：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>然后在主启动类上加上：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 10.Gateway 模块</h2>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>过滤器配置示例：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 11.Config 模块</h2>
<h3> 11.1 配置总控中心</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11.2 配置客户端</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>bootstrap.yml：</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试读取配置：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注：更改完仓库的配置后需要发送一个 POST 请求才能动态读取配置，这里使用 curl 发送 POST 请求：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 12.Bus 模块</h2>
<p>注：需要有 RabbitMQ 的环境，这里环境配置不是重点就不赘述了</p>
<p><strong>在 Config 服务端和客户端的 pom.xml 中都加入 RabbitMQ 的支持：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务端配置文件修改如下：</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端的配置修改如下：</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注：更改完仓库的配置后需要发送一个 POST 请求给服务端才能让客户端动态读取配置，这里使用 curl 发送 POST 请求；这样与上面对比就只用发送一次请求就能修改所有的配置：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>定点通知某一个客户端（port 替换成对应的端口，cloud-config-client 是对应微服务的名称）：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 13.Stream 模块</h2>
<blockquote>
<p>这里使用的消息中间件是 RabbitMQ</p>
</blockquote>
<p><strong>服务端搭建：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端搭建（集群直接复制即可）：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 14.Sleuth/Zinkin 模块</h2>
<p><strong>在 Payment 客户端和服务端模块的 Pom.xml 中加上：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在 Payment 客户端和服务端模块的 application.yml 中加上：</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在服务端的 Controller 加上下面的代码测试：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在客户端的 Controller 加上下面的代码测试：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 15.Nacos 模块</h2>
<h3> 15.1 服务注册</h3>
<p><strong>服务端：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 15.2 配置中心</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 16.Sentinel 模块</h2>
<h3> 16.1 降级熔断</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h1> 知识点</h1>
<h2> 1.Eureka 集群</h2>
<blockquote>
<p>防止单点故障</p>
</blockquote>
<p>在 windows 上，修改 hosts 文件，用不同域名区分不同的 eureka 服务，不修改配置也行</p>
<p>修改 yml 配置，让不同的 eureka 服务相互绑定</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>改变客户端的配置：</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>两台集群搭建完的效果：</strong></p>
<ul>
<li>注：客户端也搭建集群，但是客户端只需要修改端口号即可</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//springcloud/20230210/eureka集群.png" alt="image-20220930174429748" tabindex="0" loading="lazy"><figcaption>image-20220930174429748</figcaption></figure>
<p><strong>负载均衡：</strong></p>
<p>注：如果想要请求实现负载均衡，那么请求地址不能写死（不能指定特定的端口），请求地址要写 eureka 上的服务名称</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 RestTemplate 的配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>开启服务发现：</strong></p>
<p>在主启动类上加上 <code>@EnableDiscoveryClient</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>故障保护机制：</strong></p>
<ul>
<li>属于 CAP 里面的 AP 分支</li>
<li>某时某个微服务不可用后，不会立即清理，而是依旧保留该微服务的信息</li>
</ul>
<h2> 2.客户端连接 Zookeeper</h2>
<p>主启动类加上 <code>@EnableDiscoveryClient</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>填写配置：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试接口：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3.客户端连接 Consul</h2>
<p>主启动类加上 <code>@EnableDiscoveryClient</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>填写配置：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试接口：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4.Ribbon 负载均衡策略替换</h2>
<p><strong>Ribbon 的负载均衡实现（7）：</strong></p>
<ul>
<li>
<p>RoundRobinRule：轮询</p>
</li>
<li>
<p>RandomRule：随机</p>
</li>
<li>
<p>RetryRule：获取服务失败时重试</p>
</li>
<li>
<p>WeightedResponseTimeRule：响应速度快的服务权重大（更容易被选择）</p>
</li>
<li>
<p>BestAvaliableRule：过滤掉由于多次访问故障而处于断路器跳闸状态的服务，之后选择一个并发量最小的服务</p>
</li>
<li>
<p>AvaliablilityFilteringRule：先过滤掉故障实例，再选择并发较小的实例</p>
</li>
<li>
<p>ZoneAvoidanceRule：默认规则，复合判断 server 所在区域的性能和 server 的可用性选择服务</p>
</li>
</ul>
<p><strong>在消费者模块中加入以下配置以更改负载均衡策略（注册中心这里使用 Eureka）：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>p42 未学</p>
<h2> 5.OpenFeign 基本使用</h2>
<p>主启动类加上 <code>@EnableFeignClients</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Service 与服务提供方接口保持一致：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>控制层与之前一样：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置日志级别：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6.Hystrix 服务降级</h2>
<h3> 6.1 方法单独降级</h3>
<p><strong>服务端：</strong></p>
<ul>
<li>只要服务端的服务不可用了（超时、抛异常、宕机），就做服务降级</li>
<li>服务端使用注解配置：一旦服务调用失败抛出错误信息，就自动调用 <code>@HystrixCommand</code> 标注好的 <code>fallbackMethod</code> 方法</li>
<li>注意：主启动类上要加上注解：<code>@EnableCircuitBreaker</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端：</strong></p>
<ul>
<li>客户端也可以做服务降级</li>
<li>注意：在主启动类上加上注解：<code>@EnableHystrix</code></li>
<li>在客户端的配置文件加上</li>
</ul>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>修改客户端的控制层</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.2 全局服务降级</h3>
<ul>
<li>注意：在主启动类上加上注解：<code>@EnableHystrix</code></li>
<li>在客户端的配置文件加上</li>
</ul>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>控制器上加上注解：<code>@DefaultProperties(defaultFallback = "paymentInfoGlobalHandler")</code></li>
<li>需要使用全局服务降级方法的接口加上注解：<code>@HystrixCommand</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>可以看出，使用上面的全局降级会使配置混杂在业务中，此时也可以使用实现类的方式实现服务降级</p>
</li>
<li>
<p>修改服务接口的注解，添加：<code>fallback = PaymentHystrixServiceImpl.class</code>，注意这里是写<strong>实现类</strong></p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>增加这个服务接口的实现类</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7.Hystrix 服务熔断</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.消息驱动集群搭建</h2>
<p><strong>存在的问题：</strong></p>
<ul>
<li>在 Stream 中处于同一个 group 中的多个消费者是竞争关系时，才能保证消息只被消费一次</li>
<li>不同组是可以全面消费的（重复消费）</li>
<li>默认不同的消费者分组时不同的（组流水号不同），也就是可以重复消费，所以需要配置消费者在同一个分组</li>
</ul>
<p>pass</p>
<h1> 对比</h1>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//springcloud/20230210/不同注册中心的对比.png" alt="image-20221019154657051" tabindex="0" loading="lazy"><figcaption>image-20221019154657051</figcaption></figure>
<p>CAP：Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性）</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>实现语言</th>
<th>CAP</th>
<th>服务健康检查</th>
<th>对外暴露接口</th>
<th>SpringCloud 集成</th>
</tr>
</thead>
<tbody>
<tr>
<td>Eureka</td>
<td>Java</td>
<td>AP</td>
<td>支持</td>
<td>HTTP</td>
<td>已集成</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>Java</td>
<td>CP</td>
<td>不支持</td>
<td>客户端</td>
<td>已集成</td>
</tr>
<tr>
<td>Consul</td>
<td>Go</td>
<td>CP</td>
<td>支持</td>
<td>HTTP/DNS</td>
<td>已集成</td>
</tr>
<tr>
<td>Nacos</td>
<td>Java</td>
<td>AP/CP</td>
<td>支持</td>
<td>HTTP</td>
<td>已集成</td>
</tr>
</tbody>
</table>
<p>p107</p>
]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//springcloud/20230210/springcloud%E5%9B%BE%E6%A0%87.png" type="image/png"/>
    </item>
    <item>
      <title>分布式架构中各组件简述</title>
      <link>https://gzwrrr.github.io/article/springs/SpringCloud/%E5%88%86%E5%B8%83%E5%BC%8F%E5%90%84%E7%BB%84%E4%BB%B6/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E4%B8%AD%E5%90%84%E7%BB%84%E4%BB%B6%E7%AE%80%E8%BF%B0.html</link>
      <guid>https://gzwrrr.github.io/article/springs/SpringCloud/%E5%88%86%E5%B8%83%E5%BC%8F%E5%90%84%E7%BB%84%E4%BB%B6/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E4%B8%AD%E5%90%84%E7%BB%84%E4%BB%B6%E7%AE%80%E8%BF%B0.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">分布式架构中各组件简述</source>
      <description>分布式架构中各组件简述</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>分布式</category>
      <pubDate>Sat, 28 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 分布式架构中各组件简述</h1>
<h1> 服务注册</h1>
<h2> Eureka</h2>
<h2> Consul</h2>
<h1> 服务调用</h1>
<h2> Ribbon</h2>
<blockquote>
<p>已经进入维护阶段</p>
</blockquote>
<ul>
<li>
<p>Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套<strong>客户端负载均衡工具</strong></p>
</li>
<li>
<p>主要功能是提供客户端软件<strong>负载均衡算法</strong>和<strong>服务调用</strong></p>
</li>
<li>
<p>Ribbon 客户端提供一系列完善的配置项：如连接超时、重试等</p>
</li>
<li>
<p>在配置文件中列出 LB（Load Balancer）后面所有的所有机器，Ribbon 都会自动基于某些规则（轮询，随机连接等）去连接这些机器</p>
</li>
</ul>
<br>
<h3> Load Balancer</h3>
<ul>
<li>将用户请求分摊到多个服务上，达到系统的高可用</li>
<li>常见的负载均衡工具还有 Nginx、LVS、硬件 F5 等</li>
<li>Nginx 是服务器负载均衡，客户端所有请i去都会交给 Nginx，然后由 Nginx 实现转发请求</li>
<li>Ribbon 是本地负载均衡，在调用微服务接口时，会在注册中心上在获取到注册信息服务列表后缓存到 JVM 本地，从而在本地实现 RPC 远程服务调用</li>
</ul>
<br>
<h3> 负载均衡类型</h3>
<ul>
<li>集中式：服务的消费方和提供方之间使用独立的 LB 设施（Nginx、F5 等），由该设施负责把请求通过某种策略发送给服务的提供方</li>
<li>进程内：将 LB 逻辑集成到消费方，消费方从服务注册中心获取可用的地址，然后从这些地址中选择出一台合适的服务器。Ribbon 就属于进程内 LB，它只是一个类库，集成于消费方进程，消费方通过它来获取服务提供方的地址</li>
</ul>
<br>
<h3> 总结</h3>
<ul>
<li>Ribbon 是一个软负载均衡的客户端组件</li>
<li>Ribbon 可以和其他所需请求的客户端结合使用，和 Eureka 结合就是其中一个实例（较新版的 Spring Cloud Eureka 自带了 Ribbon）</li>
</ul>
<br>
<h2> OpenFeign</h2>
<ul>
<li>一个声明式 WebServeice 客户端，使用 Feign 编写可以让客户端更加简单</li>
<li>使用方法式定义一个服务接口然后再上面添加注解</li>
<li>Feign 支持可插拔式的编码器和解码器</li>
<li>Spring Cloud 对 Feign 进行了封装，即 OpenFeign，使得其支持了 Spring MVC 标准注解和 HttpMessageConverters</li>
<li>OpenFiegn 可以与 Eureka 和 Ribbon 组合使用以支持负载均衡</li>
</ul>
<br>
<h3> Feign 的作用</h3>
<ul>
<li>使用 Ribbon 时要和 RestTemplate 一起使用，即使用 RestTemplate 对 http 请求进行封装，形成一套模板化的调用方法</li>
<li>但是在实际开发中，对服务依赖的调用可能不止一处，往往是一个接口会被多出调用，所以通常会对每个微服务自行封装一些客户端类来包装这些依赖服务的调用</li>
<li>Feign 在上述基础上做了进一步封装，由它来定义和实现依赖服务接口的定义</li>
<li>在 Feign 的是线下，我们只需要创建一个接口并使用注解的方式来配置它；以前是在 Mapper 接口上标注 Mapper 接口，现在是在一个微服务接口上标注一个 Feign 注解即可完成对服务提供方的接口绑定，即简化了 Ribbon 的使用</li>
<li>Feign 已经集成了 Ribbon，自带负载均衡</li>
</ul>
<br>
<hr>
<br>
<h1> 服务降级</h1>
<p><strong>服务雪崩：</strong></p>
<ul>
<li>多个微服务之间调用可能形成多条调用链，如果扇出的链路上某个微服务的响应时间太长或者服务不可用，那么最开始的服务就会占用越来越多的系统资源，进而引入系统崩溃</li>
<li>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源在几秒钟之内饱和</li>
<li>比失败更糟糕的情况是导致服务之间的延迟增加、备份队列、线程和其他系统资源紧张，导致整个系统发生更多的级联故障</li>
<li>对于这些故障和延迟都需要进行隔离和管理</li>
</ul>
<h2> Hystrix</h2>
<blockquote>
<p>需要手动搭建监控平台，没有一套 Web 界面能让我们进行更加细粒度的配置</p>
</blockquote>
<ul>
<li>一个用于处理分布式系统的<strong>延迟</strong>和<strong>容错</strong>的开源库</li>
<li>保证在一个依赖出问题的情况下，不会导致整体服务失败，避免了级联故障，提高了分布式系统的弹性</li>
<li>断路器本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常</li>
<li>保障了服务调用方的线程不会被长时间且不必要地占用，从而避免了故障在分布式系统中的蔓延乃至雪崩</li>
</ul>
<p><strong>服务降级（Fallback）：</strong></p>
<ul>
<li>向调用方返回一个符合预期的、可处理的备选响应（FallBack）</li>
<li>发生服务降级的情况：
<ul>
<li>程序运行异常</li>
<li>超时</li>
<li>服务熔断触发服务降级</li>
<li>线程池/信号量打满</li>
</ul>
</li>
</ul>
<p><strong>服务熔断（Break）：</strong></p>
<ul>
<li>达到最大访问量后，直接拒绝访问，然后调用服务降级方法返回提示</li>
<li>熔断机制是应对<strong>雪崩效应</strong>的一种微服务链路保护机制</li>
<li>当扇出链路的某个微服务出错不可用或者响应时间太长就会进行服务降级，进而熔断该节点的微服务的调用，快速返回错误的响应信息</li>
<li>当检测到该节点微服务调用响应正常后，恢复调用链路</li>
<li>在 Spring Cloud 中，Hystrix 会监控微服务间的调用状况，以此实现熔断机制</li>
<li>当失败的调用到达一定的阈值后（默认是 5 秒内 20 次调用失败），就会启动熔断机制</li>
<li>熔断状态：
<ul>
<li>打开：请求不再调用当前服务，内部设置始终一般为 MTTR（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态</li>
<li>关闭：不会对服务进行熔断</li>
<li>半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li>
</ul>
</li>
<li>断路器的三个重要参数：
<ul>
<li>快照时间窗口：断路器确定是否打开需要统计一些请求和错误数据，统计的时间范围就是快照时间窗口，默认为最近的 10 秒</li>
<li>请求总数阈值：在快照时间窗口内，必须满足请求总数阈值才有资格熔断。默认为 20，意味着在 10 秒内，如果该 Hystrix 命令的调用次数不足 20 次，即使所有的请求都超时或者因为其他的原因而失败，断路器也不会打开</li>
<li>错误百分比阈值：当请求总数在快照时间窗口内超过了阈值，比如发生了 30 次调用，如果在这 30 次调用中，有 15 次发生了超时异常，也就是超过了 50% 的错误百分比，那么在默认设定的 50% 阈值的情况下，断路器就会打开</li>
</ul>
</li>
<li>Hystrix 的自动恢复功能：
<ul>
<li>当断路器打开时，会对主逻辑进行熔断，之后会启动一个休眠时间窗口，在这个时间窗口内，降级逻辑临时成为逻辑</li>
<li>当休眠窗口期到期，断路器会进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将关闭，主逻辑恢复</li>
<li>如果这次请求依然有问题，那么还是保持打开的状态，休眠时间窗口重新计时</li>
</ul>
</li>
</ul>
<p><strong>服务限流（Flowlimit）：</strong></p>
<ul>
<li>在类似秒杀的高并发场景下，严禁流量瞬间涌入，此时请求需要排队有序进入</li>
</ul>
<br>
<h2> Sentinel</h2>
<blockquote>
<p>独立的组件，有 Web 界面，可以更加细粒度地配置</p>
</blockquote>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//分布式组件/20230210/sentinel.png" alt="image-20221023112720793" tabindex="0" loading="lazy"><figcaption>image-20221023112720793</figcaption></figure>
<h3> 流控规则</h3>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">资源名</td>
<td style="text-align:left">唯一名称，默认为请求路径</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">针对来源</td>
<td style="text-align:left">Sentinel 可以针对调用者进行限流，填写微服务名称，默认为 default（不区分来源）</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">阈值类型/单机阈值</td>
<td style="text-align:left">1. QPS（每秒请求数量）：当调用该 API 的 QPS 达到阈值时进行限流<br>2. 线程数：当调用该 API 的线程数达到阈值时进行限流</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">是否集群</td>
<td style="text-align:left">不需要集群</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">流控模式</td>
<td style="text-align:left">1. 直接：API 达到限流条件时直接限流<br>2. 关联：当关联的资源达到阈值时，限流自己（A 关联 B，B 达到阈值，A 挂）<br>3. 链路：只记录指定链路上的流量（API 级别），即指定资源入口进来的流量，如果达到阈值就进行限流</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">流控效果</td>
<td style="text-align:left">1. 快速失败：直接失败抛异常<br>2. Warm up：根据 codeFactor（冷加载因子，默认 3）的值，从阈值/codeFactor，进过预热时长才达到设置的 QPS 阈值<br>3. 排队等待：让请求匀速通过，阈值类型必须设置成 QPS 否则无效</td>
</tr>
</tbody>
</table>
<h3> 降级规则</h3>
<blockquote>
<p>Sentinel 熔断降级会在调用链路中某个资源出现不稳定时，对这个资源的调用进行限制，让请求快速失败，避免影响到其他的资源二导致级联错误；当资源被降级后，在接下来的降级时间窗口内，对该资源的调用都自动熔断（默认是抛出 DegradeException）</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">RT（平均响应时间，秒级）</td>
<td style="text-align:center">超出阈值且在时间窗口内通过的请求大于等于 5 时，触发降级<br>窗口期过后关闭断路器<br>RT 最大为 4900（更大的需要设置 -Dcsp.sentinel.statistic.max.rt=xxx）</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">异常比例（秒级）</td>
<td style="text-align:center">QPS 大于等于 5 且异常比例（秒级统计）超过阈值时，触发降级<br>时间窗口结束后，关闭降级</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">异常数（分钟级）</td>
<td style="text-align:center">异常数（分钟统计）超过阈值时，触发降级<br>时间窗口结束后，关闭降级</td>
</tr>
</tbody>
</table>
<br>
<h3> 热点规则</h3>
<p>p124</p>
<br>
<h1> 服务网关</h1>
<p><strong>Gateway（Zuul 不讨论）：</strong></p>
<ul>
<li>基于 Spring + S pring Boot 和 Project Reator 等技术开发的网关，为微服务架构提供一种简单有效的统一的 API 路由管理方式</li>
<li>基于 WebFlux 框架实现的，底层使用了高性能的 Reactor 模式通信框架 Netty，所以 Gateway 是异步非阻塞模型</li>
<li>目标是提供统一的路由方式，且是基于 Filter 链的方式提供的网关的基本功能（如：安全、监控、指标、限流）</li>
<li>Route 路由：构建网关的基本模块，由 ID、目标 URI 、一系列的断言和过滤器组成，如果断言为真就匹配该路由</li>
<li>Filter 过滤：GatewayFilter 实例，可以在请求前后做一些操作</li>
</ul>
<h1> 服务配置中心</h1>
<ul>
<li>为微服务提供集中化的外部配置支持，配置服务器为各个不同的微服务应用的所有环境提供一个中心化的外部配置</li>
<li>配置中心支持动态化的配置更新，可以分环境部署</li>
<li>运行期间可以动态调整配置，不需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li>
<li>当配置发生改动时，服务不需要重启即可感知到配置的变化并应用新的配置</li>
<li>配置信息以 RESTful 风格的接口暴露</li>
</ul>
<p><strong>配置文件分级：</strong></p>
<ul>
<li><code>application.yml</code> 是用户级的资源配置项；<code>bootstrap.yml</code> 是系统级的配置项，优先级更高</li>
<li>Spring Cloud 会创建一个 <code>Bootstrap Context</code> 作为 Spring 应用的 <code>Application Context</code> 的父上下文；两个上下文共享一个从外部获取的 <code>Environment</code></li>
<li>初始化时  <code>Bootstrap Context</code>  负责从外部源加载配置属性并解析配置</li>
<li>两个上下文有着不同的约定，保证它们之间的配置分离</li>
<li><code>Bootstrap Context</code> 属性有高优先级，默认情况下不会被本地配置覆盖</li>
<li>跟配置中心对接的客户端中的配置文件需要改成 `bootstrap.yml</li>
</ul>
<h1> 消息总线</h1>
<ul>
<li>这里说的是 <code>Spring Cloud Bus</code></li>
<li>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个公用的消息主题，并让系统中所有微服务实例都链接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称之为消息总线</li>
<li>基本原理是客户端实例都会监听消息队列中的同一个 <code>topic</code>（默认是 <code>Spring Cloud Bus</code>），当一个服务刷新数据时，它会把这个消息放到该主题中，这样其他监听同一个主题的服务就能得到新的通知，并更新自身的状态</li>
<li>可以配合 <code>Spring Cloud Config</code> 实现真正的动态配置刷新</li>
<li>支持两种消息代理：<code>RabbitMQ</code> 和 <code>Kafaka</code></li>
<li><code>Spring Cloud Bus</code> 是将分布式系统的节点与轻量级消息系统链接起来的框架，整合了 Java 事件处理机制和消息中间件的功能</li>
<li>能够管理和传播分布式系统间的消息，就像一个分布式执行器，可以用于广播状态更改、事件推送等，也可以作为微服务间的通信通道</li>
</ul>
<p><strong>两种触发方式：</strong></p>
<ul>
<li>
<p>利用消息总线触发一个客户端 <code>/bus/refresh</code> 端点从而刷新所有客户端的配置</p>
</li>
<li>
<p>利用消息总线触发一个服务端  <code>/bus/refresh</code> 端点从而刷新所有客户端的配置</p>
</li>
<li>
<p>注意：需要给配置中心的服务端和客户端都加上消息总线的支持</p>
</li>
</ul>
<p><strong>使用客户端通知的弊端：</strong></p>
<ul>
<li>打破了微服务的职责单一性，因为客户端本身是业务模块，本就不应该承担配置刷新的职责</li>
<li>破坏了微服务个节点的平衡性</li>
<li>存在其他的局限性，如微服务在迁移的时候，网络地址是常常发生改变的，如果这时候想要刷新可能需要更多的修改</li>
</ul>
<h1> 消息驱动</h1>
<blockquote>
<p>Spring Cloud Stream，Binder 对象是关键</p>
</blockquote>
<ul>
<li>构建消息驱动微服务的框架，屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</li>
<li>应用程序通过 inputs 或者 outputs 来与 Spring Cloud Strem 中的 binder 对象交互</li>
<li>binder 对象负责与消息中间件交互，我们只需要配置绑定即可，即只需要搞清楚如何与 Stream 交互就可以方便使用消息驱动的方式</li>
<li>通过 Spring Integration 来连接消息代理中间件以实现消息事件驱动</li>
<li>Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念</li>
</ul>
<p><strong>引入了 Stream 之后：</strong></p>
<ul>
<li>Stream 完成了大一统的任务（虽然现在只能选择 RabbitMQ 或者 Kafaka）</li>
<li>绑定器作为中间层能够完美实现应用程序与消息中间件之间细节的隔离，通过向应用程序暴露统一的 Channel，使得应用程序之间不需要再考虑各种不同的消息中间件的实现</li>
</ul>
<p><strong>Stream 标准流程：</strong></p>
<ul>
<li>Binder：方便连接中间件，可以屏蔽差异</li>
<li>Channel：对 Queue 的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过 Channel 对队列进行配置</li>
<li>Source 和 Sink：可以理解为参照对象是 Stream 自身，从 Stream 发布消息就是输出，接收消息就是输入</li>
</ul>
<h1> 链路追踪</h1>
<ul>
<li>在微服务框架中，一个由客户端发起的请求在后台系统中会经过多个不同的服务节点来协同产生最后的请求结果</li>
<li>每一个请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求的失败</li>
<li>Spring Cloud Sleuth（用于收集）提供了一套完整的服务追踪的解决方案，并且兼容了 zipkin（用于展示）</li>
<li>Sleuth 中一条请求链路通过 Trace Id 唯一标识，用 Span 标识发起的请求消息，各个 Span 通过 Parent Id 关联起来
<ul>
<li>Trace：类似于树结构的 Span 集合，表示一条调用链路，存在唯一标识</li>
<li>Span：表示调用链路的来源，可以理解成一次请求信息</li>
</ul>
</li>
</ul>
<h1> Nacos</h1>
<blockquote>
<p>相当于 Eureka + Config + Bus，Nacos 支持 AP、CP 的切换</p>
</blockquote>
<h2> Nacos 配置中心</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//分布式组件/20230210/nacos配置中心.png" alt="Nacos命名空间" tabindex="0" loading="lazy"><figcaption>Nacos命名空间</figcaption></figure>
<ul>
<li>配置中心使用 Namespace 命名空间隔离不同的配置，内部使用 Group 和 DataID 从逻辑上区分多个目标对象；默认的为：Namespace=public，Group=DEFAULT_GROUP，默认的集群是 DEFAULT</li>
<li>读取不同的配置有三种方式：
<ul>
<li>通过 DataID 区分</li>
<li>通过 Group 区分</li>
<li>通过 Namespace 区分</li>
</ul>
</li>
</ul>
<h2> 持久化配置</h2>
<ul>
<li>Nacos 默认使用的是嵌入式数据（derby）库实现数据的存储</li>
<li>集群模式下如果还使用默认持久化配置会存在数据一致性问题</li>
<li>集群模式下应该使用集中式存储的方式，目前只支持 MySQL</li>
</ul>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Linux 集群搭建</h2>
<ol>
<li>修改 <code>Nacos</code> 的 <code>conf</code> 文件夹下的 <code>cluster.conf</code> 为集群的 <code>ip:port</code>，注意 其中的 ip 必须为 <code>hostname -i</code> 或 <code>ip addr ens33</code>  中的：</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>修改 <code>nacos/bin/startup.sh</code>：</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>如果无法启动可能是内存分配过小，同样是修改 <code>nacos/bin/startup.sh</code>：</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>启动集群：</li>
</ol>
<p>注意：较高版本的 Nacos 可能无法在同一台机器的同一个目录下启动集群，此时只需要复制配置好的 Nacos 的整个目录即可</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//分布式组件/20230210/nacos集群.png" alt="image-20221022172459669" tabindex="0" loading="lazy"><figcaption>image-20221022172459669</figcaption></figure>
<ol start="5">
<li>修改 <code>nginx</code>  配置文件后，进入 <code>nginx/sbin</code> 执行：<code>./nginx -c /usr/local/nginx/conf/nginx.conf</code></li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//%E5%88%86%E5%B8%83%E5%BC%8F%E7%BB%84%E4%BB%B6/20230210/sentinel.png" type="image/png"/>
    </item>
    <item>
      <title>主从复制</title>
      <link>https://gzwrrr.github.io/article/springs/SpringCloud/%E9%80%9A%E7%94%A8/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/springs/SpringCloud/%E9%80%9A%E7%94%A8/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">主从复制</source>
      <description>主从复制</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>分布式</category>
      <category>小知识点</category>
      <pubDate>Fri, 25 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 主从复制</h1>
<p>—— 需要在 <strong>可用性</strong> 与 <strong>一致性</strong> 之间的做出权衡</p>
<h2> 简述</h2>
<ul>
<li>赋予副本不同角色，其中存在一个主副本</li>
<li>主副本将数据存储子啊本地后，将数据更改作为 <strong>日志</strong> 或者以 <strong>更改流</strong> 的方式发送到各个副本（结点）</li>
<li>写请求全部打到主副本上，读请求主从副本均可处理（做到了负载均衡，但是存在 <strong>一致性</strong> 问题）</li>
</ul>
<br>
<h2> 复制方式</h2>
<p>分为 <strong>异步复制</strong> 和 <strong>同步复制</strong></p>
<ul>
<li>异步复制：主副本保存完成后立即向客户端返回成功消息（此时不同副本的 <strong>读请求</strong> 可能出现数据不一致）</li>
<li>同步复制：主副本等待数据传送到从副本，并且得到确认之后向客户端返回成功消息</li>
</ul>
<br>
<h2> 一致性问题</h2>
<p>两种角度：</p>
<ul>
<li>客户端只从主副本读取数据（如 Kafaka）</li>
<li>采用同步复制（单纯的同步复制会有问题，如一个副本故障会阻塞），这样会非常影响吞吐量；如果只使用异步复制并由主副本承担读请求，当主副本发生故障切换结点时也会发生数据不一致的问题</li>
</ul>
<br>
<h2> 抛出问题</h2>
<p>让用户决策是使用同步还是异步，使用不同语义决定：</p>
<ul>
<li>客户端使用 acks 参数确认</li>
<li>ISR 机制</li>
</ul>
<br>
<h2> 主从复制需要的能力</h2>
<ul>
<li>新增（从）副本（Kafuka 中新增副本会 <strong>追赶</strong> 主副本的数据，数据库中使用 <strong>快照</strong> + <strong>增量</strong>）
<ul>
<li>过程：某时间点产生一个一致性的快照，将快照拷贝到从节点，从节点连接到主节点并请求所有快照点后发生的日志改变</li>
<li>追赶：获取到日志后，应用到自己的副本中（上述过程可能发生多次）</li>
</ul>
</li>
<li>处理结点失效
<ul>
<li>主节点失效：使用 <strong>节点切换</strong>，三个步骤：确认主节点失效（例如无心跳响应）、选举新的主节点（新节点与旧节点差距要小）、重配系统使新节点生效</li>
<li>从节点失效：使用 **追赶式恢复 **（从节点获取崩溃前执行的最后一个事务，使用上述的 <strong>追赶</strong> 恢复）</li>
</ul>
</li>
</ul>
<p>注：主节点失效情况下，如果是使用 <strong>异步复制</strong> 还可能导致数据不一致的问题，可能是主节点在角色转变后还没意识到从而对数据造成破坏；此外主节点超时时间设置也是个问题：太长会导致服务不可用，太短可能导致节点频繁切换</p>
<br>
<h2> 复制滞后</h2>
<ul>
<li>同步复制可能会影响到吞吐量和可用性，但是使用异步复制又可能会造成数据不一致，此处需要做出权衡</li>
<li><strong>最终一致性</strong>：客户端读取不同的副本的数据可能不一致，即复制滞后的现象，存在这种问题的复制行为所形成的数据一致性统称为最终一致性</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>分布式系统特有的故障</title>
      <link>https://gzwrrr.github.io/article/springs/SpringCloud/%E9%80%9A%E7%94%A8/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%89%B9%E6%9C%89%E7%9A%84%E6%95%85%E9%9A%9C-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/springs/SpringCloud/%E9%80%9A%E7%94%A8/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%89%B9%E6%9C%89%E7%9A%84%E6%95%85%E9%9A%9C-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">分布式系统特有的故障</source>
      <description>分布式系统特有的故障</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>分布式</category>
      <category>小知识点</category>
      <pubDate>Mon, 10 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 分布式系统特有的故障</h1>
<h1> 写在前面</h1>
<ul>
<li>分布式架构中存在着许多不确定的因素，产生的原因各有不同，但是最终都会影响到数据密集型服务的数据一致性，严重的还可能导致服务不可用</li>
<li>我们在搭建时就必须明确各种问题产生的原因及其应对方案，但是选型往往不是固定的，而是需要根据实际情况做出权衡</li>
</ul>
<br>
<h1> 不可靠网络</h1>
<h2> 可能的问题</h2>
<ul>
<li>对于一个纯分布式，它的架构大多数为 Share Nothing 架构（Nothing but Network），即网络是不同节点间共享信息的唯一途径，数据的创数主要是通过以太网进行传输的</li>
<li>这是一种异步的网络，网络本身并不保证发出去的数据包一定能被接收到或者是何时被收到</li>
<li>不可靠网络传输可能出现的情况有：
<ul>
<li>请求丢失</li>
<li>请求在某个队列中等待</li>
<li>远程节点失效</li>
<li>远程节点无法响应</li>
<li>远程节点已经处理完请求，但是 ACK 确认的时候丢包</li>
<li>远程节点已经处理完请求，但是回复处理很慢</li>
</ul>
</li>
<li>造成网络不可靠的原因可能还有应用本身会时常抛出异常，这也是其中的一个诱因</li>
<li>这里的网络大多数情况下都是使用 TCP 协议的，应用层的错误可能会导致网络包排队得不到处理或者无法响应，例如：
<ul>
<li>应用程序 GC</li>
<li>处理节点在进行较重的磁盘 I/O 操作，CPU 无法从中断中恢复而导致无法处理网络请求</li>
<li>由于内存分页导致的颠簸延迟</li>
</ul>
</li>
<li>上述问题会跟网络本身的不稳定性相叠加，使得在外界看来网络更加不可靠；这种不可靠加重复制滞后并最终导致一致性问题</li>
</ul>
<br>
<h2> 如何应对</h2>
<ul>
<li>网络异常时返回的状态是不能确定的，我们需要把这种不确定变为一种更加确定的形式，这里可以利用超时机制</li>
<li>使用超时机制需要考虑的许多问题。短的超时时间便于更快地发现故障，但是增加了误判的风险；长的超时时间可能会导致服务不可用等问题。这是个需要根据具体业务做出权衡的问题</li>
<li>如果我们知道了失效是可以检测到的，还可以进行下面的操作：
<ul>
<li>依靠服务发现模块中的健康检查功能，负载均衡时需要避免往失效节点上发送数据</li>
<li>如果是在主从复制模式中，倘若主节点失效则需要触发选举机制</li>
<li>如果是服务进程崩溃，但是操作系统正常，那么还可以使用脚本通知其他节点来代替掉线的节点</li>
<li>如果路由器已经确认目标节点不可访问，直接返回 ICMP 不可达</li>
</ul>
</li>
</ul>
<br>
<h1> 不可靠的时钟</h1>
<p><strong>时钟主要的作用：</strong></p>
<ul>
<li>描述当前的绝对时间</li>
<li>描述某件事的持续时间</li>
</ul>
<p><strong>可能的问题：</strong></p>
<ul>
<li>当一个节点 A 上的时钟比另外一个节点 B 上的时钟快时，当两个节点处理完了本地的请求准备写入另外的节点时就可能产生问题</li>
<li>因为节点 B 上的写入可能原本比节点 A 的写入早，但是由于节点 A 的时钟快了，时间错更大，进而导致放弃了节点 B 的写入</li>
<li>应对时钟不准确需要引入置信区间的概念（这里不展开），需要以此确定处理时间是在什么范围内的并将这个范围返回，实现这一点可以做到类似快照隔离的操作</li>
</ul>
<br>
<h1> 系统模型设计</h1>
<blockquote>
<p>网络以及时钟的不可靠会造成不同程度的延迟和节点的失效，针对这些需要有不同的模型应对</p>
</blockquote>
<p><strong>针对延迟的模型：</strong></p>
<ol>
<li>
<p>同步模型：</p>
<ul>
<li>假设网络延迟是有界的，并且我们能获取到延迟的上下界</li>
<li>在任何情况下延迟都不会超出这个上下界</li>
</ul>
</li>
<li>
<p>半同步模型（普遍使用）：</p>
<ul>
<li>认为大部分情况下延迟都是正常的</li>
<li>如果出现了违背的情况，就认为偏差非常大</li>
</ul>
</li>
<li>
<p>异步模型：</p>
<ul>
<li>对延迟不做任何假设</li>
<li>不使用任何超时机制</li>
</ul>
</li>
</ol>
<p><strong>针对失效的模型：</strong></p>
<ol>
<li>崩溃-终止模型：
<ul>
<li>假设一个节点只能以崩溃的方式故障</li>
<li>这种情况下它可能在任意时刻停止响应，此后无法恢复</li>
</ul>
</li>
<li>崩溃-恢复模型：
<ul>
<li>节点可能在任何时刻发生崩溃</li>
<li>但是这种崩溃可能在一段时间后恢复并再次响应</li>
<li>这种情况下已经持久化的数据得以保存，但是内存中的数据丢失</li>
</ul>
</li>
</ol>
<p><strong>注：大多数解决这些问题的算法都是基于半同步模型 + 崩溃-恢复模型来设计的</strong></p>
<p>注：在分布式算法设计中，安全性（safety，指发生意外无法撤回，但是我们一定知道发生的时间节点）和灵活性（liveness，指预期的事在未来某个时间点一定会发生）非常重要，其中安全性是必须满足的，而灵活性是需要具备一定的前提的</p>
<p><br><br></p>
]]></content:encoded>
    </item>
    <item>
      <title>多节点复制</title>
      <link>https://gzwrrr.github.io/article/springs/SpringCloud/%E9%80%9A%E7%94%A8/%E5%A4%9A%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/springs/SpringCloud/%E9%80%9A%E7%94%A8/%E5%A4%9A%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">多节点复制</source>
      <description>多节点复制</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>分布式</category>
      <category>小知识点</category>
      <pubDate>Thu, 01 Sep 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 多节点复制</h1>
<h1> 写在前面</h1>
<ul>
<li>
<p>主从复制所有的写请求都必须经过主节点，而又因为只有一个主节点，所以就很容易出现性能问题</p>
</li>
<li>
<p>虽然从节点可以冗余应对容错，但是对写请求实际上是不具备扩展性的</p>
</li>
</ul>
<p><strong>如何加大容错率：</strong></p>
<ul>
<li>如果客户端来源于多个地区，那么不同地区的客户端感知到的服务响应时间差距可能会非常大</li>
<li>顺着主从复制继续延申，采用多个主节点同时承担写请求，主节点收到写请求后再将数据同步到从节点</li>
<li>主节点还可能是其他主节点的从节点，同步数据时不同的主节点是同步到自己处于的数据中心的从节点的</li>
<li>这些主节点会不断同步在另一个数据中心节点上的数据</li>
<li>由于每个节点是同时处理其他节点的数据和客户端发送的数据，所以每个数据中心的主节点需要增加一个冲突处理模块</li>
</ul>
<br>
<h1> 多主节点的使用场景</h1>
<ul>
<li>多数据中心部署：
<ul>
<li>异地多活：一般是为了做多数据中心容灾或让客户端就近访问，因此同一个地区使用多主节点意义不大</li>
<li>性能提升：与主从复制相比，由于有多个主节点，所以吞吐量自然可以上去；此外因为是多个区域搭建的，所以客户端可以就近访问，响应时间就变快了</li>
<li>容灾能力提升：主从复制下主节点故障比较难以将流量全部切换到另一个数据中心，但是使用多主节点的话就可以无缝切换到另一个数据中心，提高整体服务的可用性</li>
</ul>
</li>
<li>离线客户端操作：
<ul>
<li>网络离线下还可以工作：离线是先将数据保存在本地，连接上节点后再将数据同步到远程节点上</li>
<li>这里可以将客户端可看成是其中的一个节点（副本），这样就可以承担用户再本地的变更请求</li>
</ul>
</li>
<li>协同编辑：
<ul>
<li>多人编辑同一个文档时，可以将这个文档看作是一个主节点，每个人单独保存时系统就可以自动地将数据同步到其他的主节点上，然后各个节点再处理冲突</li>
</ul>
</li>
</ul>
<br>
<h1> 解决冲突</h1>
<blockquote>
<p>// TODO 待完善</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>微服务架构设计模式</title>
      <link>https://gzwrrr.github.io/article/springs/SpringCloud/%E9%80%9A%E7%94%A8/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/springs/SpringCloud/%E9%80%9A%E7%94%A8/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">微服务架构设计模式</source>
      <description>微服务架构设计模式</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>分布式</category>
      <category>小知识点</category>
      <category>设计模式</category>
      <pubDate>Mon, 12 Dec 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 微服务架构设计模式</h1>
<p>原文：https://dzone.com/articles/popular-design-patterns-for-microservices-architec</p>
<h1> API 网关模式</h1>
<p>将业务分解为多个微服务带来的问题：</p>
<ul>
<li>如何处理横切关注点：授权、速率控制、负载均衡、重试策略、服务发现</li>
<li>如何解决客户端和服务端之间的直接通信会导致过多的流量往返和紧密耦合</li>
<li>如何过滤和映射得到数据子集</li>
<li>如何将多个微服务的数据进行耦合</li>
</ul>
<p><strong>使用 API 网关，具有的功能有：</strong></p>
<ul>
<li>反向代理</li>
<li>请求聚合</li>
<li>网关卸载</li>
<li>服务发现</li>
<li>...</li>
</ul>
<br>
<h1> 客户端 UI 组合（SPA）模式</h1>
<ul>
<li>每个微服务都由面向业务功能的团队负责开发</li>
<li>一些 UI 界面可能需要来自多个微服务的数据，其中每个数据项都由不同的团队维护</li>
<li>为了实现这些 UI 团队应该创建一个页面骨架（SPA），通过组合多个 UI 组件来构建页面</li>
<li>每个团队开发一个特定于某个服务的客户端 UI 组件</li>
</ul>
<br>
<h1> 服务-数据库对应模式</h1>
<ul>
<li>微服务需要的是<strong>独立</strong>和<strong>松耦合</strong></li>
<li>在多语言的微服务架构中，每个微服务可能有着不一样的数据存储需求，数据库也需要通过复制和分片来实现伸缩性</li>
<li>这里的微服务的事务就必须限制在自己的数据库中，其他服务要想使用数据必须通过 API 来获取</li>
<li>如果使用的是关系型数据库，那么一个服务对应一个 Schema 是实现数据私有化的最佳选择。可以为每一个服务分配不同的数据库用户 ID 来创建这种屏障</li>
</ul>
<br>
<h1> Saga 模式</h1>
<ul>
<li>如果每一个服务都使用一个数据库，那么在实现跨服务的事务时会出问题，此时需要考虑如何保持数据的一致性</li>
<li>本地的 ACID 事务在这里不会起作用，此时可以采用 Saga 模式</li>
<li>Saga 是一种<strong>本地事务链</strong>，事务链中的每一个事务更新数据库并发布一个<strong>事件</strong>来触发下一个本地事务</li>
<li>Saga 模式要求在本地事务失败时对事务进行补偿</li>
</ul>
<p><strong>Saga 模式的两种实现方式：</strong></p>
<ul>
<li>编配（Orchestration）：<strong>编配器</strong>负责协调所有的服务执行本地事务、获取更新和执行下一个事件。如果失败，则它负责触发补偿事件</li>
<li>编排（Choreography）：每个微服务负责<strong>监听</strong>和<strong>发布</strong>事件，并且在失败时触发补偿事件</li>
</ul>
<p>注：<strong>编配</strong>比<strong>编排</strong>更容易实现。在编配实现中只有一个组件需要协调所有事件；而在编排视线中，每个微服务都必须监听和响应事件</p>
<br>
<h1> 断路器模式</h1>
<p>在微服务架构中，如果一个事务涉及到多个服务，那么当下游微服务发生故障时，还会继续调用并耗尽所有服务的网络资源，并且还会影响到用户体验</p>
<p>如何解决<strong>级联故障：</strong></p>
<ul>
<li>在客户端和服务端之间设置一个代理，跟踪连续调用失败的次数，如果超过一个阈值，那么就中断连接并立即<strong>宣告失败</strong></li>
<li>在经过一个超时时间之后，断路器再次允许有限数量的测试请求，检查连接是否可以恢复，否则超时时间重置</li>
</ul>
<br>
<h1> 业务能力或子域分解模式</h1>
<ul>
<li>在微服务加否中，复杂的大型应用不仅需要进行分解、内聚和松耦合，还必须是自主且足够小的</li>
<li>有两种分解方法：
<ul>
<li>根据业务能力分解：业务能力是产生价值的东西，如航空公司中可以是预定、销售、支付等</li>
<li>根据子域分解：子域的概念来自于领域驱动设计（DDD），一个域由多个子域组成，如产品目录、订单管理、交付管理等</li>
</ul>
</li>
</ul>
<br>
<h1> 绞杀榕模式</h1>
<ul>
<li>此模式是描述如何将单体应用转化成微服务架构的，绞杀榕模式以藤蔓作为类比，藤蔓会扼死它所缠绕的树。</li>
<li>将单体应用程序的一小部分转化为微服务，对于用户而言其外部的 API 保持不变，直至所有部分被重构形成微服务架构</li>
</ul>
<br>
<h1> 反腐蚀层模式</h1>
<ul>
<li>当现代应用程序需要于遗留应用程序集成时，与过时的基础设施协议、API和数据模型交互将是一项巨大的挑战。坚持旧的模式和语义可能会腐蚀新系统</li>
<li>此时需要一个层来装欢两个系统之间的通信。反腐蚀层于遗留系统或新系统的数据模式相匹配，具体取决于他从哪个系统获取数据</li>
<li>这样可以确保旧的系统不需要做出改变，同时新系统也不需要在设计和技术方面做出妥协</li>
</ul>
<br>
<br>]]></content:encoded>
    </item>
    <item>
      <title>无主节点复制</title>
      <link>https://gzwrrr.github.io/article/springs/SpringCloud/%E9%80%9A%E7%94%A8/%E6%97%A0%E4%B8%BB%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/springs/SpringCloud/%E9%80%9A%E7%94%A8/%E6%97%A0%E4%B8%BB%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">无主节点复制</source>
      <description>无主节点复制</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>分布式</category>
      <category>小知识点</category>
      <pubDate>Thu, 17 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 无主节点复制</h1>
<h1> 写在前面</h1>
<ul>
<li>主从复制和多主节点复制都是存在明确的主节点的，主节点需要将数据复制到从节点，而写入顺序也是由主节点控制的</li>
<li>还有一种思路就是让任何副本都能接收来自客户端的写请求，或设置一个协调者代表客户端进行写入操作，这个协调者不负责控制写入顺序</li>
</ul>
<br>
<h1> 处理节点失效</h1>
<ul>
<li>在主从模式中，如果主节点失效会发生节点切换，但是在无主模式下则并不存在这一步骤</li>
<li>当都一个节点服务不可用时，写请求可以直接请求其他的节点而不用理会当前节点；当这个节点恢复时会重新提供读写服务，此时客户端如果向该节点读取数据，就会请求到过期值</li>
<li>对于过期值，客户端不能简单地向一个节点请求数据，而是向多个节点请求，获取到不同的数据后通过类似版本号来区分数据的新旧</li>
<li>而数据落后的刚恢复的节点有两种思路同步数据：
<ul>
<li>客户端读取时对副本做修复，即如果客户端读取到了过期值，可以将数据写入到旧副本中，以便追上新副本</li>
<li>反熵查询：副本节点启动后，后台就不断查找副本之间的差异，节点读取到后将差异写到自己的副本中，但是这个过程不保证写入顺序，可能会引起明显的复制滞后</li>
</ul>
</li>
</ul>
<br>
<h1> 读写 Quorum</h1>
<ul>
<li>无主模式中，要想保证读到的是新值，不能只向一个节点请求，核心点是让写入的副本和读取的副本有交集</li>
<li>需要实现上述的要求，每次并行写入的节点数（W）和每次同时读取的节点数（R）要大于副本总数（N），一般的配置是：W = R = （N + 1）/ 2，可以容忍的失效节点数是：（（N + 1）/ 2 ）- 1</li>
<li>实际实现中，数据一般会发送或读取所有节点，W 和 R 决定需要等待几个节点的写入或读取确认</li>
</ul>
<br>
<h1> Quorum 的局限</h1>
<ul>
<li>并不要求多数：重点是读写副本有重合的部分，可以按照读写的可用性调整配置</li>
<li>对于没有强一致性要求的系统，可以配置 W + R &lt;= N，这样可以等待更少的节点返回确认，并且可以提升系统的可用性</li>
<li>注意，即使符合了 W + R &gt; N，也会存在一些边界问题导致的一致性问题：
<ul>
<li>使用的算法可能使得读写节点完全不相交，此时无法保证数据一定是新的</li>
<li>如果两个写操作同时发生，也存在冲突，如果合并时基于 LWW，还可能导致数据丢失</li>
<li>如果读写同时发生，不能保证读取到的一定是新值（复制滞后）</li>
<li>如果写入时某些节点写入失败，导致最后的确认数少于 W，那么写入成功的副本并不会回滚，即写入失败后还是可能读取到新值</li>
</ul>
</li>
<li>综上，这种方法最后可能只能达到最终一致性，并且还需要共识算法的加持</li>
</ul>
<br>
<h1> 小结</h1>
<ul>
<li>光有复制是不足以达到数据一致性的，因为还存在着很多不确定的因素和边界问题</li>
<li>后续还需要使用各种事务以及共识算法保证数据一致性</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>PWA 基本介绍</title>
      <link>https://gzwrrr.github.io/article/other/%E5%89%8D%E7%AB%AF/PWA/PWA.html</link>
      <guid>https://gzwrrr.github.io/article/other/%E5%89%8D%E7%AB%AF/PWA/PWA.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">PWA 基本介绍</source>
      <description>PWA 基本介绍</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>优化</category>
      <category>缓存</category>
      <category>通用</category>
      <pubDate>Fri, 03 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> PWA 基本介绍</h1>
<p>PWA 的优势：</p>
<ul>
<li>渐进式</li>
<li>流畅</li>
<li>可安装</li>
<li>原生体验</li>
<li>用户粘性</li>
</ul>
<h1> 核心技术</h1>
<h2> Web app manifest</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Manifest" target="_blank" rel="noopener noreferrer">配置清单</a></p>
<ul>
<li>可以添加到主屏幕</li>
<li>启动时可以有过渡图标</li>
<li>隐藏浏览器 UI</li>
</ul>
<h2> Service worker</h2>
<p>HTML5 API，主要用来做离线缓存</p>
<p>前端有很多需要联网才能使用的优化：</p>
<ul>
<li>CDN</li>
<li>CSS Sprite</li>
<li>文件的合并压缩</li>
<li>异步加载</li>
<li>资源缓存</li>
</ul>
<p>在断网的情况下：</p>
<ol>
<li>Service worker 可以极大提升用户体验</li>
<li>Service worker 是一个独立的 worker 线程，独立于当前网页进程，可以操作缓存，是一种特殊的 Web worker（不能操作 DOM 和 BOM）</li>
</ol>
<p>Service worker 的生命周期事件：</p>
<ol>
<li><code>install</code> 事件会在注册成功时触发，主要用于缓存资源；文件发生改变时会触发该事件</li>
<li><code>active</code> 事件会在激活的时候触发，主要用于删除旧的资源；会在 <code>install</code> 事件后触发，但是如果已经存在 Service worker 了，就不会触发直到其终止（这里可以跳过等待）</li>
<li><code>fetch</code> 事件会在发送请求的时候触发，主要用于操作缓存或者读取网络资源</li>
</ol>
<h2> Cache API</h2>
<p><code>cacheStorage</code> 接口表示 Cache 对象的存储，配合 Service worker 操作缓存，和操作数据库类似</p>
]]></content:encoded>
    </item>
    <item>
      <title>数学建模</title>
      <link>https://gzwrrr.github.io/article/modeling/</link>
      <guid>https://gzwrrr.github.io/article/modeling/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">数学建模</source>
      <description>数学建模要点 三大块：建模; 编程; 协作; 赛题分类优化类; 评价类; 预测类; 算法分类 ==分类算法：==模糊聚类; 层次聚类; 系统聚类; 密度聚类; 其它聚类算法; ==判别算法：==贝叶斯判别; 费舍尔判别; 模糊识别; 神经网络; 支持向量机; 对应的模型 ==评价类：==层次分析法; 熵权法; TO...</description>
      <pubDate>Tue, 07 Feb 2023 19:13:24 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 数学建模</h1>
<h2> 数学建模要点</h2>
<p>三大块：</p>
<ul>
<li>建模</li>
<li>编程</li>
<li>协作</li>
</ul>
<h2> 赛题分类</h2>
<ul>
<li>优化类</li>
<li>评价类</li>
<li>预测类</li>
</ul>
<h2> 算法分类</h2>
<p><mark>分类算法：</mark></p>
<ul>
<li>模糊聚类</li>
<li>层次聚类</li>
<li>系统聚类</li>
<li>密度聚类</li>
<li>其它聚类算法</li>
</ul>
<p><mark>判别算法：</mark></p>
<ul>
<li>贝叶斯判别</li>
<li>费舍尔判别</li>
<li>模糊识别</li>
<li>神经网络</li>
<li>支持向量机</li>
</ul>
<h2> 对应的模型</h2>
<p><mark>评价类：</mark></p>
<ul>
<li>层次分析法</li>
<li>熵权法</li>
<li>TOPSIS</li>
<li>CRITIC</li>
<li>组合权重法</li>
<li>秩和比</li>
<li>灰色关联</li>
<li>分析</li>
<li>数据包络分析</li>
</ul>
<h2> 关联与因果</h2>
<p>不同变量对应的相关系数或方法</p>
<p><mark>两个变量之间：</mark></p>
<ul>
<li>Person相关系数</li>
<li>Sperman相关系数</li>
<li>Kendall秩相关系数</li>
<li>Copula相关系数</li>
</ul>
<br>
<p><mark>一个变量对多个变量：</mark></p>
<ul>
<li>
<p>标准化回归算法</p>
</li>
<li>
<p>路径分析算法</p>
</li>
</ul>
<br>
<p><mark>多个变量对多个变量：</mark></p>
<ul>
<li>典型相关系数</li>
<li>偏最小二乘回归</li>
</ul>
<br>
<p><mark>研究多个变量之间内部关系：</mark></p>
<ul>
<li>主成分分析</li>
<li>因子分析</li>
<li>岭回归</li>
</ul>
<br>
<p><mark>因果检验：</mark></p>
<ul>
<li>
<p>格兰杰因果检验</p>
</li>
<li>
<p>协整检验</p>
</li>
</ul>
<h2> 预测与预报</h2>
<p><mark>单序列预测：</mark></p>
<ul>
<li>灰色预测</li>
<li>时间序列预测</li>
<li>小波分析预测</li>
<li>马尔可夫预测</li>
<li>神经网络预测</li>
</ul>
<br>
<p><mark>回归分析预测：</mark></p>
<ul>
<li>线性回归、非线性回归</li>
<li>logistic回归、Probit回归</li>
<li>微分方程回归</li>
<li>向量自回归</li>
<li>偏最小二乘回归</li>
</ul>
<br>
<p><mark>优化与控制：</mark></p>
<ul>
<li>线性规划</li>
<li>整数规划</li>
<li>0-1规划</li>
<li>非线性规划与智能优化算法</li>
<li>多目标规划和目标规划</li>
<li>动态规划</li>
<li>网络优化</li>
<li>排队论与计算机仿真</li>
<li>模糊规划</li>
<li>随机优化</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>关于我</title>
      <link>https://gzwrrr.github.io/about/</link>
      <guid>https://gzwrrr.github.io/about/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">关于我</source>
      <description>博主目前是个学习「Java 后端」的小白，博客也是最近才搭建，很多东西都没有完善，学习笔记还未整理多少，内容格式排本都有点混乱...所以现阶段主要是给自己看，平时有时间会加以改善; 之后打算慢慢加入「踩坑日记/环境配置/打包部署」等模块; 致力于打造简洁但知识体系完整的博客，加油加油！; 目前状态：广东人，双非准大三; 专业：软件工程; 方向...</description>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 关于我</h1>
<ul>
<li>博主目前是个学习「Java 后端」的小白，博客也是最近才搭建，很多东西都没有完善，学习笔记还未整理多少，内容格式排本都有点混乱...所以现阶段主要是给自己看，平时有时间会加以改善</li>
<li>之后打算慢慢加入「踩坑日记/环境配置/打包部署」等模块</li>
<li>致力于打造简洁但知识体系完整的博客，加油加油！</li>
</ul>
<br>
<h1> 个人概述：</h1>
<ul>
<li>目前状态：广东人，双非准大三</li>
<li>专业：软件工程</li>
<li>方向：Java 后端 / 全栈</li>
</ul>
<br>
<h1> 个人经历：</h1>
<ul>
<li>2020 年大一上：
<ul>
<li>初识编程，小白上路，接触 C/C++ 并写下第一个简易版贪吃蛇，对发展方向还不明确；加入学生会，遇到一直提点我的学长</li>
</ul>
</li>
<li>2021 年大一下：
<ul>
<li>在舍友介绍下接触 Flutter，自学 Dart 写出第一个战损版 APP</li>
<li>某日有幸看到 codesheep 羊哥的视频，把羊哥的大部分视频刷完后，受到鼓舞和启发，确定走 Java 后端 / 全栈开发路线，不考研，希望毕业直接工作</li>
<li>期间也开始学习 Python，期末大作业复刻出当年微信的飞机大战</li>
<li>同时还进行着 B 站大学之旅，跟着尚硅谷、黑马、狂神持续学习，直到大一下暑假专业实训时完成前端三大件、SSM 的学习（简单过一遍），并几乎独立完成第一个网站（未上线）结束实训</li>
</ul>
</li>
<li>2021年大二上：
<ul>
<li>确定加入本科生导师制，磨合期继续学习 Spring Boot 与 Vue，不久后加入导师工作室，随后使用 Uniapp 完成第一个战损版小程序（未上线），跳过了工作室的考核</li>
<li>后来还学习了 Redis 与 Linux，逐渐能独立开发前后端分离的项目</li>
<li>期间跟着学长参加了互联网+、计算机设计大赛以及院级校级比赛等，拿到一定名次</li>
<li>寒假期间趁着优惠购买了第一台服务器，开始尝试搭建博客与部署网站</li>
</ul>
</li>
<li>2022 年大二下：
<ul>
<li>跳过工作室开发组的考核直接参与真实项目开发，起初稍有不适应，因为组里都是大三大四的学长，害怕干错事，磨合一段时间后适应了团队开发</li>
<li>这个学期中期逐渐感受到学业压力，因为计网、计组、数据库、算法、汇编以及几乎每一门都有的实验和实验报告都挤到了一块，原本有几门课是在大三上才学的，不知道为什么提前了，整个学期也缩短到了 17 周，这就意味着期末时课程和实验还没结束就要考试，所以不得不投入多点精力到课程学习</li>
<li>虽然课程压力很大，但是还是学习了 Docker、React、CI/CD 等知识，最后也成功实现了第一个前后端分离的持续集成流水线</li>
<li>期间还跟着入职了美团的学长一起做分布式压力测试，受益良多</li>
</ul>
</li>
<li>2022 年准大三上（此时）：
<ul>
<li>探索后端性能优化，遇到瓶颈，进度缓慢...也稍微有点散漫...</li>
<li>看到了鱼皮的知识星球，决定加入共勉</li>
</ul>
</li>
</ul>
<br>
<h1> 技术栈</h1>
<p><strong>前端：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HTML</td>
<td style="text-align:center">搭建页面骨架</td>
</tr>
<tr>
<td style="text-align:center">CSS</td>
<td style="text-align:center">修改页面样式</td>
</tr>
<tr>
<td style="text-align:center">Bootstrap</td>
<td style="text-align:center">CSS 框架</td>
</tr>
<tr>
<td style="text-align:center">Element-ui</td>
<td style="text-align:center">组件库</td>
</tr>
<tr>
<td style="text-align:center">JavaScript</td>
<td style="text-align:center">负责交互逻辑</td>
</tr>
<tr>
<td style="text-align:center">TypeScript</td>
<td style="text-align:center">JavaScript 的超集，用于规范工程项目</td>
</tr>
<tr>
<td style="text-align:center">jQuery.js</td>
<td style="text-align:center">JavaScript 工具库，直接操作 DOM（过时）</td>
</tr>
<tr>
<td style="text-align:center">Vue.js</td>
<td style="text-align:center">JavaScript 框架，操作虚拟 DOM（MVVM）</td>
</tr>
<tr>
<td style="text-align:center">React.js</td>
<td style="text-align:center">JavaScript 框架，操作虚拟 DOM（MVVM）</td>
</tr>
<tr>
<td style="text-align:center">Uni-app</td>
<td style="text-align:center">基于 Vue.js 的框架，可以将 Vue 源码编译成各种平台的可运行文件</td>
</tr>
</tbody>
</table>
<br>
<p><strong>后端：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">汇编</td>
<td style="text-align:center">基本算是最底层可编程的语言，能看懂</td>
</tr>
<tr>
<td style="text-align:center">Dart</td>
<td style="text-align:center">用于编写 Flutter APP</td>
</tr>
<tr>
<td style="text-align:center">Python</td>
<td style="text-align:center">解释型语言，对我而言用于爬数据/写脚本</td>
</tr>
<tr>
<td style="text-align:center">C/C++</td>
<td style="text-align:center">编译型语言，最早接触，提升编程思维</td>
</tr>
<tr>
<td style="text-align:center">Express</td>
<td style="text-align:center">基于 Node.js 的 Web 应用开发框架</td>
</tr>
<tr>
<td style="text-align:center">Java</td>
<td style="text-align:center">跨平台编程语言</td>
</tr>
<tr>
<td style="text-align:center">JSP</td>
<td style="text-align:center">Java 与 HTML 混合编写</td>
</tr>
<tr>
<td style="text-align:center">JDBC</td>
<td style="text-align:center">Java 操作 MySQL 的桥梁</td>
</tr>
<tr>
<td style="text-align:center">MySQL</td>
<td style="text-align:center">关系型数据库</td>
</tr>
<tr>
<td style="text-align:center">Mybatis / Mybatis-Plus</td>
<td style="text-align:center">MySQL 框架</td>
</tr>
<tr>
<td style="text-align:center">MongoDB</td>
<td style="text-align:center">非关系型数据库</td>
</tr>
<tr>
<td style="text-align:center">Maven</td>
<td style="text-align:center">项目依赖管理工具</td>
</tr>
<tr>
<td style="text-align:center">Git</td>
<td style="text-align:center">项目版本管理工具</td>
</tr>
<tr>
<td style="text-align:center">Spring</td>
<td style="text-align:center">Java 框架，基于 IOC 和 AOP 的轻量级框架</td>
</tr>
<tr>
<td style="text-align:center">SpringMVC</td>
<td style="text-align:center">Java 框架，MVC（model-view-controller）框架</td>
</tr>
<tr>
<td style="text-align:center">Spring Boot</td>
<td style="text-align:center">Java 框架，用于创建微服务，是 SSM 的整合与进阶</td>
</tr>
<tr>
<td style="text-align:center">Redis</td>
<td style="text-align:center">用于做缓存</td>
</tr>
<tr>
<td style="text-align:center">ElasticSearch</td>
<td style="text-align:center">分布式搜索引擎</td>
</tr>
</tbody>
</table>
<br>
<p><strong>运维：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Nginx</td>
<td style="text-align:center">反向代理服务器</td>
</tr>
<tr>
<td style="text-align:center">Docker</td>
<td style="text-align:center">虚拟容器</td>
</tr>
<tr>
<td style="text-align:center">Jenkins</td>
<td style="text-align:center">用于持续集成</td>
</tr>
<tr>
<td style="text-align:center">Linux</td>
<td style="text-align:center">服务器常用的操作系统</td>
</tr>
</tbody>
</table>
<br>]]></content:encoded>
    </item>
    <item>
      <title>设计模式</title>
      <link>https://gzwrrr.github.io/article/design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%B2%E5%8F%91%E5%B8%83.html</link>
      <guid>https://gzwrrr.github.io/article/design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%B2%E5%8F%91%E5%B8%83.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">设计模式</source>
      <description>设计模式</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>设计模式</category>
      <pubDate>Wed, 02 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 设计模式</h1>
<h1> 七大原则</h1>
<p>注：下面的前五个也称为面向对象的五大基本原则</p>
<p><strong>1.单一职责原则（SRP）：</strong></p>
<blockquote>
<p>类的功能要单一，不能包罗万象，跟杂货铺似的</p>
</blockquote>
<ul>
<li>一个类只负责一项职责</li>
</ul>
<br>
<p><strong>2.接口隔离原则（ISP）：</strong></p>
<blockquote>
<p>设计时采用多个与特定客户类有关的接口比采用一个通用的接口要好。就比如一个手机拥有打电话，看视频，玩游戏等功能，把这几个功能拆分成不同的接口，比在一个接口里要好的多</p>
</blockquote>
<ul>
<li>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</li>
</ul>
<br>
<p><strong>3.依赖倒转原则（DIP）：</strong></p>
<blockquote>
<p>就是你出国要说你是中国人，而不能说你是哪个村子的。比如说中国人是抽象的，下面有具体的xx省，xx市，xx县。你要依赖的抽象是中国人，而不是你是xx村的</p>
</blockquote>
<ul>
<li>
<p>高层模块不应该依赖底层模块，二者都应该依赖其抽象</p>
</li>
<li>
<p>抽象不应该依赖细节，细节应该依赖抽象</p>
</li>
<li>
<p>中心思想是面向接口编程</p>
</li>
<li>
<p>细节具有多变性，抽象具有稳定性</p>
</li>
<li>
<p>接口和抽象类的目的是制定规范，细节交给实现类实现</p>
</li>
</ul>
<br>
<p><strong>4.里氏替换原则（LSP，正确地使用继承）：</strong></p>
<blockquote>
<p>子类可以替换父类出现在父类能够出现的任何地方。比如你能代表你爸去你姥姥家干活</p>
</blockquote>
<ul>
<li>
<p>引用基类的地方必须能透明地使用其子类的对象</p>
</li>
<li>
<p>在使用继承时，在子类中尽量不要重写父类的方法</p>
</li>
<li>
<p>可以通过聚合/组合/依赖来解决重现方法的问题（加入 B 继承了 A 并且 B 需要重写方法，那么可以再提出一个基类，让 A/B 分别继承，即提到了同一个层级）</p>
</li>
</ul>
<br>
<p><strong>5.开闭原则（OCP）：</strong></p>
<blockquote>
<p>一个模块对于拓展是开放的，对于修改是封闭的，想要增加功能热烈欢迎，想要修改，哼，一万个不乐意</p>
</blockquote>
<ul>
<li>
<p>编程中最基础和最重要的设计原则</p>
</li>
<li>
<p>模块和函数应该对扩展开放（提供方），对修改关闭（使用方）。用抽象构框架，用实现扩展细节</p>
</li>
<li>
<p>需要增加新功能时，最好通过扩展来实现</p>
</li>
<li>
<p>设计模式的目的就是遵循开闭原则</p>
</li>
</ul>
<br>
<p><strong>6.迪米特法则（最少知道法则）：</strong></p>
<ul>
<li>
<p>一个对象应该对其他对象保持最少的了解</p>
</li>
<li>
<p>尽量将逻辑封装在类的内部，对外只提供 public 方法，不对外泄露任何私密信息</p>
</li>
<li>
<p>称出现在成员变量，方法参数，方法返回值的类为直接朋友（两个类之间存在耦合关系即为朋友关系），出现在局部变量中的类不是直接朋友，即陌生的类最好不要以局部变量的形式出现在类的内部</p>
</li>
</ul>
<br>
<p><strong>7.合成复用原则：</strong></p>
<ul>
<li>尽量使用合成/聚合的方式，而不是继承</li>
</ul>
<br>
<h1> 设计模式概述</h1>
<h2> 1.核心思想</h2>
<ul>
<li>
<p>找出应用中可能需要变化的地方，把它们独立出来，不和那些不需要变化的代码混在一起</p>
</li>
<li>
<p>针对接口编程，不针对实现编程</p>
</li>
<li>
<p>为了交互对象直接的松耦合设计而努力</p>
</li>
</ul>
<br>
<h2> 2.目的</h2>
<ul>
<li>
<p>高内聚/低耦合</p>
</li>
<li>
<p>可维护性（可扩展性）</p>
</li>
<li>
<p>重用性：相同代码不必重复编写</p>
</li>
<li>
<p>可读性：编程规范，便于开发人员阅读和理解</p>
</li>
<li>
<p>可靠性：增加新的功能后对原本的功能没有影响</p>
</li>
<li>
<p>灵活性</p>
</li>
<li>
<p>让软件更好</p>
</li>
</ul>
<br>
<h2> 3.分类</h2>
<p><strong>创建型（5）</strong>：</p>
<blockquote>
<p>对象实例化的模式，创建型模式用于解耦对象的实例化过程</p>
</blockquote>
<ol>
<li>单例模式</li>
<li>工厂模式</li>
<li>抽象工厂模式</li>
<li>原型模式</li>
<li>建造者模式</li>
</ol>
<br>
<p><strong>结构型（7）</strong>：</p>
<blockquote>
<p>把类和对象结合在一起形成一个更大的结构</p>
</blockquote>
<ol>
<li>适配器模式</li>
<li>桥接模式</li>
<li>装饰器模式</li>
<li>组合模式</li>
<li>外观模式</li>
<li>享元模式</li>
<li>代理模式</li>
</ol>
<br>
<p><strong>行为型（11）</strong>：</p>
<blockquote>
<p>类和对象如何交互，划分责任和算法</p>
</blockquote>
<ol>
<li>模板模式</li>
<li>命令模式</li>
<li>访问者模式</li>
<li>迭代器模式</li>
<li>观察者模式</li>
<li>中介者模式</li>
<li>备忘录模式</li>
<li>解释器模式</li>
<li>状态模式</li>
<li>策略模式</li>
<li>责任链模式</li>
</ol>
<br>
<h1> 23 种设计模式</h1>
<h2> 创建型（5）</h2>
<h3> 1.单例模式</h3>
<p><strong>8 种实现方法：</strong></p>
<ul>
<li>
<p>饿汉式（3）</p>
</li>
<li>
<p>懒汉式（5）</p>
</li>
</ul>
<br>
<h3> 2.工厂模式</h3>
<p><strong>1.简单工厂模式：</strong></p>
<ul>
<li>
<p>简单工厂模式（静态工厂模式）是由一个工厂对象决定创建哪一类产品类的实例</p>
</li>
<li>
<p>定义了一个创建对象的类，有这个类俩封装实例化对象的行为</p>
</li>
<li>
<p>在开发种，当我们用到大量的创建某种/某类/谋批对象时，就会使用到工厂模式</p>
</li>
</ul>
<p><strong>2.工厂方法模式：</strong></p>
<ul>
<li>将实例化功能抽象成抽象方法</li>
<li>定义一个创建对象的抽象方法，有子类决定要实例化的类</li>
<li>工厂方法可以将对象的实例化推迟到「子类」</li>
</ul>
<br>
<h3> 3.抽象工厂模式</h3>
<ul>
<li>定义一个接口用于创建相关或有依赖关系的「对象簇」，无需指明具体的类</li>
<li>可以将「简单工厂模式」和「工厂方法模式」进行整合</li>
<li>从设计层面来看，抽象工厂模式就是对「简单工厂模式」和「工厂方法模式」的进一步抽象</li>
<li>将工厂抽象成两层，「抽象工厂」和「具体实现的工厂子类」，</li>
<li>可以根据创建对象类型使用相应的工厂子类，这样是将简单工厂类变成了工厂簇，利于代码的「维护」和「扩展」</li>
</ul>
<br>
<h3> 4.原型模式</h3>
<blockquote>
<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象</p>
<p>这是一种创建型设计模式，允许一个对象在创建另外一个「可定制的对象」，无需知道创建的细节</p>
<p>通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象，通过请求原型对象「拷贝，clone」他们自己来实施创建</p>
</blockquote>
<p><strong>浅拷贝：</strong></p>
<ul>
<li>
<p>对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性复制一份给新的对象</p>
</li>
<li>
<p>对于数据类型是引用数据类型的成员变量，例如成员变量是，数据，某个类的对象等，那么浅拷贝会进行引用传递，也就是将改成员变量的引用值（内存地址）复制一份给新的对象，这样修改任意一个对象中成员变量的值都会改变最初引的成员变量的值</p>
</li>
<li>
<p>浅拷贝是使用默认的 clone() 方法来实现的</p>
</li>
</ul>
<p><strong>深拷贝：</strong></p>
<ul>
<li>
<p>复制对象的所有基本数据类型的成员变量值</p>
</li>
<li>
<p>可以动态地获得对象运行时的状态</p>
</li>
<li>
<p>为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象进行拷贝</p>
</li>
<li>
<p>两种实现方式：</p>
<ul>
<li>重现 clone 方法来实现深拷贝</li>
<li>通过对象序列化实现深拷贝</li>
</ul>
</li>
</ul>
<br>
<h3> 5.建造者模式</h3>
<ul>
<li>
<p>又称为「生成器模式」，将产品和产品建造过程进行解耦</p>
</li>
<li>
<p>是一种对象构建模式，它可以将复杂对象的建造过程抽象出来，使这个抽象过程的不同实现方法可以构建出不同表现的对象</p>
</li>
<li>
<p>逐步船舰复杂的对象，允许用户只通过指定复杂对象的「类型」和「内容」就可以构建他们，用户不需要知道内部的具体构建细节</p>
</li>
<li>
<p>四个角色：</p>
<ul>
<li>Product（产品角色）：一个具体的产品对象</li>
<li>Builder（抽象建造者）：创建一个 Product 对象的各个部件指定的接口/抽象类</li>
<li>ConcreteBuilder（具体建造者）：实现接口，构建和装配各个部件</li>
<li>Director（指挥者）：构建一个使用 Builder 接口的对象，它主要是用于创建一个复杂的对象。主要有两个作用：
<ul>
<li>隔离客户与对象的生产过程</li>
<li>负责控制产品对象的生产过程</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>
<h2> 创建型（7）</h2>
<h3> 6.适配器模式</h3>
<ul>
<li>
<p>将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容</p>
</li>
<li>
<p>从用户的角度看不到「被适配者 」，是解耦的</p>
</li>
<li>
<p>用户调用适配器转化出来的目标i接口方法，适配器再调用「被适配者」的相关接口方法</p>
</li>
<li>
<p>将一个类中的方法通过适配器进行一定的转换</p>
</li>
<li>
<p>分类：</p>
<ul>
<li>类适配器：使用继承的方式</li>
<li>对象适配器：使用聚合的方式，体现了「合成复用原则」</li>
<li>接口适配器：使用抽象类实现不同的接口的全部方法，只不过这些方法都是空方法，这样在真正使用的时候就可以单独重写一个方法（匿名类重写方法）并只使用该方法</li>
</ul>
</li>
</ul>
<br>
<h3> 7.桥接模式</h3>
<ul>
<li>
<p>结构型设计模式</p>
</li>
<li>
<p>将「实现」和「抽象」放在两个不同的类层次中，使得两个层次可以「独立改变」</p>
</li>
<li>
<p>基于类的「最下设计原则」，通过使用「封装」、「聚合」和「继承」等行为让不同的类承担不同的职责</p>
</li>
<li>
<p>最主要的特点是把「抽象」与「行为实现」分离开来，从而可以保持各个部分的「独立性」以及应对他们的「功能扩展」</p>
</li>
</ul>
<br>
<h3> 8.装饰器模式</h3>
<ul>
<li>
<p>装饰器模式就像打包一个快递，主体是被修饰者，填充/纸板等的就为修饰物</p>
</li>
<li>
<p>动态地将新功能「附加」到对象上。在对象的扩展方面，他比继承更有「弹性」，装饰者模式也体现了开闭原则</p>
</li>
<li>
<p>装饰器中可以包含被装饰者，相当于把饮料往调料里边加，而不是把调料往饮料中加</p>
</li>
</ul>
<br>
<h3> 9.组合模式</h3>
<ul>
<li>
<p>结构型型模式</p>
</li>
<li>
<p>又称「部分整体模式」，它创建了对象组的树形结构，将对象组合成树状结构以表示「整体-部分」的关系</p>
</li>
<li>
<p>依据树形结构来组合对象，用来表示部分以及整体层次</p>
</li>
<li>
<p>使得用户对单个对象和组合对象的访问具有「一致性」，即组合能让客户以一致的方式处理个别对象以及组合对象</p>
</li>
</ul>
<br>
<h3> 10.外观模式</h3>
<ul>
<li>
<p>又称「过程模式」，位子系统中的「一组接口」提供一个「一致的界面」，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p>
</li>
<li>
<p>外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需要跟这个接口发生调用，而无需关心这个子系统的内部细节</p>
</li>
</ul>
<br>
<h3> 11.享元模式</h3>
<ol>
<li>又称「蝇量模式」，运用共享技术有效地支持大量「细粒度」的对象</li>
<li>常用于系统的底层开发，解决系统性能问题。例如数据库连接池里边都是创建好的连接对象，在这些连接对象中我们需要的则直接拿来用，避免了重复创建，如果没有需要的则再创建一个</li>
<li>能够解决重复对象的内存浪费问题，当系统中有大量相似的对象，需要缓冲池时，不需要总是创建新的对象，可以从缓存池中拿，这样可以降低系统内存，同时提高效率</li>
<li>经典的应用场景就是「池」技术，String 常量池/数据库连接池/缓存池等都是享元模式的应用，这是「池」技术的重要实现方式</li>
</ol>
<br>
<h3> 12.代理模式</h3>
<ol>
<li>
<p>为一个对象提供一个替身，以控制对这个对象的访问</p>
</li>
<li>
<p>通过代理模式访问目标对象的好处是，可与在目标对象实现的基础上，增加「额外的功能操作」，即扩展目标对象的功能</p>
</li>
<li>
<p>被代理的对象可以是「远程对象」，「创建开销打大」的对象，「需要安全控制」的对象</p>
</li>
<li>
<p>代理模式有三种不同的形式：</p>
<ul>
<li>静态代理
<ul>
<li>需要定义接口或父类，被代理对象与代理对象一起实现相同的接口或者是继承相同的父类</li>
<li>能够在不修改目标对象功能的情况下，对目标功能进行扩展</li>
</ul>
</li>
<li>动态代理（JDK 代理/接口代理，主要是使用「反射」）
<ul>
<li>代理对象不需要实现接口，但是目标对象需要实现接口，否则不能用动态代理</li>
<li>代理对象的生成是利用 JDK 的 API，动态地在内存中构建代理对象</li>
</ul>
</li>
<li>Cglib 代理（可以在内存中动态地创建对象，而不需要实现接口，属于动态代理的范畴）
<ul>
<li>又称子类代理，当目标对象只有一个单独的对象的时候，没有任何的接口，这个时候就可以用目标对象子类来实现代理</li>
<li>它是在内存中构建一个子类对象从而实现对目标对象功能扩展</li>
<li>Cglib 是一个强大的高性能的代码生成包，它可以在运行期间扩展 Java 类与实现 Java 接口，它广泛地被许多 AOP 框架使用，实现方法拦截</li>
<li>在 AOP 编程中的两种代理：
<ul>
<li>目标对象需要实现接口，用 JDK 代理</li>
<li>目标对象不需要实现接口，用 Cglib 代理</li>
</ul>
</li>
<li>Cglib 包的底层是通过使用字节码处理框架 ASM 来转换字节码并生成新的类</li>
</ul>
</li>
</ul>
</li>
<li>
<p>代理模式的变体：</p>
<ul>
<li>防火墙代理：内网通过代理穿透防火墙，实现对公网的访问</li>
<li>缓存代理：例如：当请求图片文件等资源时，先到缓存代理取，如果取不到资源再到公网或者数据库取，之后再缓存</li>
<li>远程代理：远程对象的本地代表，通过它可以把远程对象当成本地对象来调用。远程代理通过网络和真正的远程对象沟通信息</li>
<li>同步代理：主要使用在多线程编程中，完成多线程间的同步工作</li>
</ul>
</li>
</ol>
<br>
<h2> 行为型（11）</h2>
<h3> 13.模板方法模式</h3>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230208/模板方法.png" alt="12-模板模式" style="zoom: 80%;">
<p><strong>概述：</strong></p>
<ul>
<li>
<p>行为型模式</p>
</li>
<li>
<p>模板模式在一个抽象类公开定义了执行它的方法的模板</p>
</li>
<li>
<p>它的子类可以按需重写方法实现，但调用将以抽象类中定义的方法进行</p>
</li>
<li>
<p>简单说就是定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构就可以重新定义某些特定的步骤</p>
</li>
<li>
<p>基本思想：</p>
<ul>
<li>算法或说逻辑只存在于父类中</li>
<li>需要修改时，子类只需要也只能修改其中的某些步骤</li>
<li>实现最大化代码复用</li>
<li>统一算法的同时提供较大的灵活性，即父类模板方法保证结构不变，子类灵活实现</li>
</ul>
</li>
<li>
<p>不足之处：</p>
<ul>
<li>每一个不同的实现都需要一个子类实现，导致类的数量增加而变得复杂</li>
</ul>
</li>
<li>
<p>模板方法一般都是用 final 关键字防止子类覆盖</p>
</li>
<li>
<p>模板模式的使用场景：</p>
<ul>
<li>当在完成某个过程时需要执行一系列步骤</li>
<li>这一系列步骤基本相同，但是个别步骤在实现时可能不同</li>
</ul>
</li>
</ul>
<p><strong>使用实例：</strong></p>
<ul>
<li>统计代码运行时间</li>
</ul>
<p><strong>钩子方法：</strong></p>
<ul>
<li>在模板模式的父类中，可以定义一个默认不做任何事的方法，子类可以视情况来决定需不需要覆盖它，这种方法称为【钩子方法】</li>
</ul>
<p>**简单例子：**制作豆浆，分为四步：</p>
<ul>
<li>选材</li>
<li>加入配料（交给子类实现）</li>
<li>浸泡</li>
<li>打磨</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>框架使用：</strong></p>
<ul>
<li>IOC 容器初始化时运用了模板模式</li>
</ul>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230208/模板方法-IOC.png" alt="12-模板模式-IOC" style="zoom:80%;">
<br>
<h3> 14.命令模式</h3>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/命令模式.png" alt="13-命令模式" style="zoom:80%;">
<p><strong>概述：</strong></p>
<ul>
<li>命令模式使得请求的【发送者】与【接收者】彼此之间解耦合，让对象直接的调用关系更加灵活</li>
<li>在命令模式中会将一个请求封装成一个对象，以便使用不同的参数来表示不同的请求，同时也支持可撤销的操作</li>
<li>类似打仗时将军发号施令，士兵执行命令，其中有几个关键的角色：
<ul>
<li>将军：命令发布者</li>
<li>士兵：命令的具体执行者</li>
<li>命令：连接将军和士兵</li>
</ul>
</li>
<li>可以设计一个命令队列，只要将命令放到队列中就可以通过多线程执行命令</li>
<li>不足之处：
<ul>
<li>可能导致某些系统有过多的具体命令类，增加系统的复杂度</li>
</ul>
</li>
<li>其中会使用到空命令，这也可以看作一种设计模式，因为让我们省去了判空的操作，如果没有则需要在执行每一个命令前判断是否为空</li>
</ul>
<p><strong>使用场景：</strong></p>
<ul>
<li>我们需要向某些对象发送请求，但是不知道具体的接收者是谁，也不知道被请求的操作是哪一个</li>
<li>此时需要在程序运行时指定具体的接收者，即可以使用命令模式设计</li>
</ul>
<p><strong>使用实例：</strong></p>
<ul>
<li>界面的每一个按钮都是一条命令，与 cmd 中的命令类似</li>
</ul>
<p>**简单例子：**智能家居控制</p>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/命令模式-智能家居.png" alt="13-命令模式-智能家居" style="zoom:80%;">
<p>**框架使用：**spring 框架中的 JdbcTemplate</p>
<br>
<h3> 15.访问者模式</h3>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/访问者模式.png" alt="14-访问者模式" style="zoom:80%;">
<p><strong>概述：</strong></p>
<ul>
<li>
<p>访问者模式用于封装一些作用于某种数据结构的各种元素的操作</p>
</li>
<li>
<p>可以在不改变数据结构的前提下定义作用域这些元素的新的操作</p>
</li>
<li>
<p>主要将数据结构于数据操作分离，解决数据结构和操作耦合性的问题</p>
</li>
<li>
<p>基本工作原理为：在被访问的类中加一个对外提供接待访问者的接口</p>
</li>
<li>
<p>角色以及职责：</p>
<ul>
<li>Visitor：抽象的访问者，为该对象结构中的 ConcreteElement 的每一个类声明一个 visit 操作</li>
<li>ConcreteVisitor：是一个具体的访问者，实现每个 Visitor 声明操作</li>
<li>ObjectStructure：能够枚举它的元素，可以提供一个高层的接口，用于允许访问者访问元素</li>
<li>Element：定义了一个 accept 方法，接收一个访问者对象</li>
<li>ConcreteElement：为具体元素，实现了 accept 方法</li>
</ul>
</li>
<li>
<p>其中会使用到双分派，指不管类怎么变化，都能找到期望的方式运行，意味着得到执行的操作取决于请求的种类和两个接收者的类型</p>
</li>
<li>
<p>优点：</p>
<ul>
<li>符合单一职责原则，让程序具有优秀的扩展性，灵活性非常高</li>
<li>可以对功能进行统一，适用于数据结构相对稳定的系统</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>具体元素要对访问者公布细节，即访问者关注了其他类的内部细节，这是迪米特法则所不建议的，这样造成了具体元素变成比较困难</li>
<li>违背了依赖倒置原则，即访问者依赖的是具体元素，而不是抽象元素</li>
</ul>
</li>
</ul>
<p><strong>使用场景：</strong></p>
<ul>
<li>有比较稳定的数据结构并且又有经常变化的功能需求</li>
<li>需要对一个对象结构中的对象进行很多的不同的操作，这些操作彼此之间没有关联</li>
<li>避免这些操作【污染】这些对象的类</li>
</ul>
<p><strong>使用实例：</strong></p>
<ul>
<li>报表</li>
<li>UI</li>
<li>拦截器与过滤器</li>
</ul>
<p>**简单例子：**观众投票</p>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/访问者模式-投票.png" alt="14-访问者模式-投票" style="zoom:80%;">
<br>
<h3> 16.迭代器模式</h3>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/迭代器模式.png" alt="15-迭代器模式" style="zoom:80%;">
<p><strong>概述：</strong></p>
<ul>
<li>行为型模式</li>
<li>如果集合元素使用不同的方式实现的，当客户端需要遍历这些集合元素时就要使用多种遍历方式，而且会暴露元素的内部结构</li>
<li>迭代器模式提供一种遍历集合元素的统一接口，用一致的方法遍历元素，不需要知道集合对象的底层表示，即不暴露元素的内部结构</li>
<li>角色与职责：
<ul>
<li>Iterator：迭代器接口</li>
<li>ConcreteIterator：具体的迭代器类，管理迭代</li>
<li>Aggregate：一个统一的聚合接口，将客户端与具体聚合解耦</li>
<li>ConcreteAggreage：具体的聚合持有对象的集合</li>
</ul>
</li>
<li>优点：
<ul>
<li>提供了一个统一的方法遍历对象，客户不需要再考虑聚合的类型，使用一个方法就可以遍历对象</li>
<li>隐藏了聚合的内部结构</li>
<li>提供了一种设计思想，即一个类应该只有一个引起变化的原因（单一职责），在聚合类中，把迭代器分开，就是要把管理对象集合和遍历对象集合的责任分开，这样一来，依赖集合改变也只会影响到聚合对象，遍历方式改变也只会影响到迭代器</li>
</ul>
</li>
<li>缺点：
<ul>
<li>每个聚合对象都要一个迭代器，会产生多个迭代器导致复杂度上升</li>
</ul>
</li>
</ul>
<p><strong>使用场景：</strong></p>
<ul>
<li>当要展示一组相似的对象，或者遍历一组相同对象</li>
</ul>
<br>
<h3> 17.观察者模式</h3>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/观察者模式.png" alt="16-观察者模式" style="zoom:80%;">
<p><strong>需求：</strong></p>
<p>气象站天气推送设计</p>
<ul>
<li>
<p>气象站可以将每天测量到的温度、气压、湿度等以公告的形式发布出去</p>
</li>
<li>
<p>需要设计开放型 API，便于第三方介入获取数据</p>
</li>
<li>
<p>角色：</p>
<ul>
<li>气象站：Subject，负责登记注册、移除、通知</li>
<li>第三方介入网站：Observer，接收输入</li>
</ul>
</li>
</ul>
<p><strong>概述：</strong></p>
<ul>
<li>对象之间多对一依赖的一种设计方案</li>
<li>被依赖的对象为 Subject，依赖的对象为 Observer</li>
<li>Subject 通知 Observer 变化的信息</li>
</ul>
<p><strong>框架使用：</strong></p>
<ul>
<li>JDK 中有使用观察者模式</li>
<li>其中的 Observable 就是 Subject，只不过 Observable 是类而不是接口</li>
<li>因为 Observable  是类，所以 Observer 要通过继承来实现观察者模式</li>
</ul>
<br>
<h3> 18.中介者模式</h3>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/中介者模式.png" alt="17-中介者模式" style="zoom:80%;">
<p><strong>概述：</strong></p>
<ul>
<li>
<p>行为型模式</p>
</li>
<li>
<p>用一个中介对象来封装一系列的对象交互</p>
</li>
<li>
<p>中介者使各个对象不需要显示地互相引用，从而解耦合</p>
</li>
<li>
<p>就如 MVC 模式，Controller 就是中介</p>
</li>
<li>
<p>减少了类间的依赖，降低了耦合，符合迪米特原则</p>
</li>
<li>
<p>但是中介者承担了较多的责任，一旦中介者出现问题，那么整个系统都会受影响</p>
</li>
<li>
<p>如果设计不当，中介者对象本身会变得过于复杂，这点在实际应用时应当注意</p>
</li>
</ul>
<p><strong>案例：</strong></p>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/中介者模式-家居.png" alt="17-中介者模式-家居" style="zoom:80%;">
<br>
<h3> 19.备忘录模式</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/备忘录模式.png" alt="18.备忘录模式" tabindex="0" loading="lazy"><figcaption>18.备忘录模式</figcaption></figure>
<p><strong>概述：</strong></p>
<ul>
<li>
<p>行为型模式</p>
</li>
<li>
<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象外保存这个状态</p>
</li>
<li>
<p>之后可以将对象恢复成原先保存的状态</p>
</li>
<li>
<p>实现了信息的封装，使得用户不需要关心状态的保存细节</p>
</li>
<li>
<p>但是如果类的成员变量过多，会占用比较大的资源，而且每次保存都会消耗一定的内存</p>
</li>
<li>
<p>为了节约内存，可以配合原型模式使用</p>
</li>
</ul>
<p><strong>使用场景：</strong></p>
<ul>
<li>
<p>游戏存档</p>
</li>
<li>
<p>操作撤销</p>
</li>
<li>
<p>数据库的事务管理</p>
</li>
</ul>
<br>
<h3> 20.解释器模式</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/解释器模式.png" alt="19-解释器模式" tabindex="0" loading="lazy"><figcaption>19-解释器模式</figcaption></figure>
<p><strong>概述：</strong></p>
<ul>
<li>在编译原理中，一个算数表达式通过词法分析器形成词法单元，而这些词法单元再通过语法分析器构建语法分析树，最终形成一个抽象的语法分析树</li>
<li>词法分析器和语法分析器都可以看作解释器</li>
<li>解释器模式是指给定一种语言（表达式），定义它的文法的一种表示，并定义一个解释器。使用该解释器来解释语言中的句子（表达式）</li>
<li>角色说明：
<ul>
<li>Context：环境角色，含有解释器之外的全局信息</li>
<li>AbstactExpression：抽象表达式，声明一个抽象的解释操作，这个方法为抽象语法树中所有的节点所共享</li>
<li>TerminaExpression：为终结符表达式，实现与文法中的终结符相关的解释操作</li>
<li>NonTermialExpression：为非终结符表达式，为文法中的非终结符实现解释操作</li>
</ul>
</li>
<li>当一个语言需要解释执行，可以将语言中的句子表示成一个抽象语法树，使用解释器模式，让程序具有良好的扩展性</li>
<li>但是使用解释器可能会引起类膨胀；如果解释器模式采用递归调用方法，将导致调试变得复杂，效率也可能低下</li>
</ul>
<p><strong>使用场景：</strong></p>
<ul>
<li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li>
<li>一些重复出现的问题可以用一种简单的语言来表达</li>
<li>一个简单语法需要解释的场景</li>
<li>编译器</li>
<li>运算表达式计算</li>
<li>正则表达式</li>
</ul>
<p><strong>案例：</strong></p>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/解释器模式-运算器.png" alt="19-解释器模式-运算器" style="zoom:80%;">
<p><strong>框架使用：</strong></p>
<ul>
<li>spring 中的 Expression 运算器就是使用的解释器模式设计的</li>
</ul>
<br>
<h3> 21.状态模式</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/状态模式.png" alt="20-状态模式" tabindex="0" loading="lazy"><figcaption>20-状态模式</figcaption></figure>
<p><strong>概述：</strong></p>
<ul>
<li>
<p>主要是用来解决对象在多种状态转换时，需要对外输出不同的行为的问题</p>
</li>
<li>
<p>状态和行为是一一对应的，状态之间可以互相转换</p>
</li>
<li>
<p>当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类</p>
</li>
<li>
<p>角色说明：</p>
<ul>
<li>Context：环境角色，用于伟华 State 实例，这个实例定义当前状态</li>
<li>State 时抽象状态角色，定义一个接口封装与 Context 的一个特定接口的相关行为</li>
<li>ConcreteState 具体的状态角色，每个子类实现一个与 Context 的一个状态相关的行为</li>
</ul>
</li>
<li>
<p>优点：</p>
<ul>
<li>让代码具有很强的可读性</li>
<li>状态模式将每个状态的行为封装到一个类中，方便维护</li>
<li>可以将容易产生问题的 if-else 语句删除</li>
<li>符合开闭原则，容易增删状态</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>容易产生很多类，每个状态都要有一个对应的类，当状态过多时会产生大量的类，难以维护</li>
</ul>
</li>
</ul>
<p><strong>使用场景：</strong></p>
<ul>
<li>
<p>当业务流程设计很多状态时，可以使用状态模式去除大量的 if-else 判断</p>
</li>
<li>
<p>当一个事件或者对象有很多种状态且状态之间会互相转化，对不同的状态也要求有不同的行为时，可以考虑使用状态模式</p>
</li>
</ul>
<p><strong>使用实例：</strong></p>
<ul>
<li>借贷平台订单的审核-发布-抢单流程</li>
</ul>
<p><strong>案例：</strong>（抽奖问题）</p>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/状态模式-抽奖.png" alt="20-状态模式-抽奖" style="zoom:80%;">
<br>
<h3> 22.策略模式</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/策略模式.png" alt="21-策略模式" tabindex="0" loading="lazy"><figcaption>21-策略模式</figcaption></figure>
<p><strong>概述：</strong></p>
<ul>
<li>策略模式可以定义算法族，分别封装起来，让它们之间可以相互替换，让算法的变化独立于使用算法的客户</li>
<li>让变化的代码从不变的代码中分离开来</li>
<li>针对接口编程而不是具体类（定义了策略接口）</li>
<li>多用组合/聚合而不是继承（客户端通过组合方式使用策略）；用行为类组合而不是行为类的继承</li>
<li>策略模式的关键是分析项目中变化和不变的部分</li>
<li>对修改关闭，对扩展开放，避免使用大量的 if-else</li>
<li>提供了可以替换继承关系的办法：策略模式将算法封装在独立的 Strategy 类中，使得可以独立于其他 Context 改变算法，即做到了易于切换、理解、扩展</li>
<li>但是每添加一个策略就要增加一个类，当策略过多就会难以管理</li>
</ul>
<p><strong>案例：</strong>（鸭子分类问题）</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/策略模式-鸭子分类.png" alt="21-策略模式-鸭子分类" tabindex="0" loading="lazy"><figcaption>21-策略模式-鸭子分类</figcaption></figure>
<p><strong>框架使用：</strong></p>
<ul>
<li>JDK 中 Arrays 的 Comparator 使用了策略模式</li>
</ul>
<br>
<h3> 23.责任链模式</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式/20230209/责任链模式.png" alt="22-责任链模式" tabindex="0" loading="lazy"><figcaption>22-责任链模式</figcaption></figure>
<p><strong>概述：</strong></p>
<ul>
<li>又叫职责链模式，为请求创建一个接收者对象的链条，这样可以对请求的发送者和接收者进行解耦</li>
<li>责任链模式中通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么他会把相同的请求传给下一个接收者，以此类推</li>
<li>角色说明：
<ul>
<li>Handler：抽象的接收者，定义了一个处理请求的接口，同时包含了其他的 Handler</li>
<li>ConcreteHandlerA，B：具体的处理者，处理它自己负责的请求，可以访问它的后继者（即下一个处理者）；如果当前请求自己可以处理就接收，如果不可以者交给后继者处理</li>
<li>Request：含有很多属性，表示一个请求</li>
</ul>
</li>
</ul>
<p><strong>案例：</strong>（OA 系统采购审批需求，不同金额由不同人负责）</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//设计模式及/20230209/责任链模式-审批.png" alt="22-责任链模式-审批" tabindex="0" loading="lazy"><figcaption>22-责任链模式-审批</figcaption></figure>
<p><br><br></p>
]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20230209/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.png" type="image/png"/>
    </item>
    <item>
      <title>Docker</title>
      <link>https://gzwrrr.github.io/article/docker/docker.html</link>
      <guid>https://gzwrrr.github.io/article/docker/docker.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Docker</source>
      <description>Docker 基本使用</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>运维</category>
      <category>docker</category>
      <pubDate>Sun, 13 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Docker</h1>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//icon/20230209/docker-small.png" alt="What is Docker?" style="zoom:50%;">
<h1> Docker 常用命令（持续更新...）</h1>
<p><a href="https://docs.docker.com/docker-hub/" target="_blank" rel="noopener noreferrer">官方文档地址</a></p>
<img src="http://gitee.com/gzwrrr/typora-img/raw/master/images/docker.png" alt="docker" style="zoom:50%;">
<h2> 1.命令</h2>
<p><strong>命令中带中文的都需要替换</strong></p>
<p>(除了括号前有 $ 符号的，括号中的内容都是可选项)</p>
<h3> 1.1 安装与启动</h3>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">命令</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><code>yum remove docker \</code></td>
<td style="text-align:center">卸载旧版本</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><code>yum install -y yum-utils</code></td>
<td style="text-align:center">下载工具包</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"><code>yum install docker-ce doceker-ce-cli containerd.io</code></td>
<td style="text-align:center">安装 docker</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center"><code>systemctl start docker</code></td>
<td style="text-align:center">启动 docker</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center"><code>docker version</code></td>
<td style="text-align:center">查看版本</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center"><code>docker run hello-world</code></td>
<td style="text-align:center">运行 hello-world</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center"><code>yum remove docker-ce docker-ce-cli containerd.io</code></td>
<td style="text-align:center">卸载 docker</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center"><code>sudo systemctl daemon-reload</code></td>
<td style="text-align:center">重新加载守护进程</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center"><code>sudo systemctl restart docker</code></td>
<td style="text-align:center">重启 docker</td>
</tr>
</tbody>
</table>
<h3> 1.2 常用基本命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><code>docker info</code></td>
<td>查看信息</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><code>docker 命令 --help</code></td>
<td>帮助文档</td>
</tr>
</tbody>
</table>
<p><strong>常用镜像命令</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><code>docker images</code></td>
<td>查看镜像</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><code>docker images -aq</code></td>
<td>列出所有的镜像（id）</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><code>docker search images名 (--filter=字段=限定值)</code></td>
<td>搜索镜像（如: --filter=STARS=300 指显示 stars 不小于 3000 的结果）</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><code>docker pull 镜像(:版本)</code></td>
<td>下载镜像（默认下载最新版，下载指定版本如: docker pull mysql:5.7）</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><code>docker rmi -f (id)</code></td>
<td>删除所有镜像（加上 id 则删除对应的镜像）</td>
</tr>
</tbody>
</table>
<p><strong>常用容器命令</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><code>docker run (可选参数，具体用 --help 查看) image名</code></td>
<td>运行容器</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><code>docker run -it 镜像名 /bin/bash</code></td>
<td>运行并进入该容器</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><code>exit</code></td>
<td>容器停止并退出容器</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><code>快捷键[ctrl + p + q]</code></td>
<td>退出容器，但容器不停止</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><code>docker ps</code></td>
<td>查看正在运行的容器</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><code>docker rm -f $(docker ps -aq)</code></td>
<td>递归删除所有容器</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td>`docker ps -a -q</td>
<td>xargs docker rm`</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td><code>docker start 容器id</code></td>
<td>启动容器</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td><code>docker restart 容器id</code></td>
<td>重启容器</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td><code>docker stop 容器id</code></td>
<td>停止当前正在运行的容器</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td><code>docker kill 容器id</code></td>
<td>强制停止当前容器</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td><code>docker run -d 镜像名</code></td>
<td>后台运行容器，但是如果没有前台，后台容器会直接结束</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td><code>docker logs -f -t --tail 容器id</code></td>
<td>查看日志</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td><code>docker top 容器id</code></td>
<td>查看容器进程</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td><code>docker inspect 容器id</code></td>
<td>查看容器的信息</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td><code>docker exec -it 容器id bash路径</code></td>
<td>进入容器并开启了新的终端</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td><code>docker exec -it 容器id ip addr</code></td>
<td>查看容器的内部网络地址</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td><code>docker attach 容器id</code></td>
<td>进入容器但不会开启新的终端</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td><code>docker cp 容器id:容器内的路径 主机目录 </code></td>
<td>拷贝文件到主机</td>
</tr>
</tbody>
</table>
<h2> 2.容器数据卷</h2>
<blockquote>
<p>docker 容器中的数据可以同步到本地，就是将容器内的目录挂载到 Linux 中</p>
</blockquote>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>docker run -it -v 本地目录:容器目录 镜像名 bash路径</code></td>
<td>将容器中的目录挂载到本地目录上</td>
</tr>
<tr>
<td>2</td>
<td><code>docker run -it --name 容器名1 --volumes-from 容器名2 容器镜像(:版本)</code></td>
<td>相当于容器1继承容器二，数据共享（双向复制）</td>
</tr>
</tbody>
</table>
<h2> 3.dockerfile</h2>
<blockquote>
<p>脚本生成镜像</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td>FROM</td>
<td>指定镜像的基础镜像</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>MAINTAINER</td>
<td>说明作者和邮箱</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>RUN</td>
<td>镜像运行执行的脚本</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td>ADD</td>
<td>编译镜像时复制文件到镜像中</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td>CMD</td>
<td>设置容器的启动命令</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td>LABEL</td>
<td>添加镜像标签</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td>ENV</td>
<td>设置容器的环境变量</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td>EXPOESE</td>
<td>镜像暴露的端口</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td>COPY</td>
<td>编译时复制文件到镜像中</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td>ENTRYPOINT</td>
<td>设置容器的入口程序</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td>VOLUME</td>
<td>设置容器的挂载卷</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td>USER</td>
<td>设置运行 RUN CMD ENTRYPOIN 的用户名</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td>WORKDIR</td>
<td>设置 RUN CMD ENTRYPOINT COPY ADD 的工作目录</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td>ARG</td>
<td>设置编译镜像时加入的参数</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td>ONBUILD</td>
<td>设置镜像的构建命令</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td>STOPSIGNAL</td>
<td>设置容器的退出信号量</td>
</tr>
</tbody>
</table>
<h2> 4.docker 网络</h2>
<blockquote>
<ol>
<li>安装了 docker 后，主机上就会多出一个 docker0 网卡，该网卡是桥接模式，使用了 evth-pair 技术，相当于连通各个容器的路由器</li>
<li>每启动一个 docker 容器，docker 就会给 docker 容器分配一个容器 ip，容器网卡都是成对出现的，因为 evth-pair 就是一对虚拟设备接口，一端连接协议，另一端成对的网卡彼此相连</li>
</ol>
</blockquote>
<h3> 4.1 自定义网络</h3>
<blockquote>
<ul>
<li>
<p>自己创建网络使用「桥接模式」</p>
</li>
<li>
<p>自定义网络可以直接使用「容器名」ping 通其他容器</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><code>docker network ls</code></td>
<td>列出所有 docker 网络</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><code>docker network inspect 网络名</code></td>
<td>查看网络的配置信息</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><code>docker network create --driver bridge --subnet 自定ip --gateway 自定网关 网络名</code></td>
<td>自定义一个网络并指定 ip 、网关、网络名</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><code>docker run -d -P --name 容器名 --net 网络名 镜像名</code></td>
<td>在自定义网络中启动容器</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><code>docker network connect 网络名 容器名</code></td>
<td>将一个网络下的容器与另一个网络连通，这样命令中的容器就相当于到了指定的网络中，即一个容器两个 ip</td>
</tr>
</tbody>
</table>
<h3> 4.2 docker compose</h3>
<blockquote>
<p>docker compose 可以管理编排容器</p>
<p>使用 yml 文件配置</p>
<p>三个步骤：</p>
<ol>
<li>docker file</li>
<li>docker-compose.yml</li>
<li>docker-compose up</li>
</ol>
</blockquote>
<h4>4.2.1 安装步骤</h4>
<ol>
<li>下载 docker-compose</li>
</ol>
<blockquote>
<p>官方下载地址，很慢，而且版本太高后续案例可能会启动失败</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>国内镜像地址，版本也比较低，推荐使用这个</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>授权</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>查看版本</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4>4.2.2 测试案例（官网案例）</h4>
<ol>
<li>创建并进入目录</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>创建测试文件 ( python 应用 )</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>在 app.py 中写入服务内容</li>
</ol>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>创建 requirements.txt ，在其中说明使用到的依赖</li>
</ol>
<div class="language-txt line-numbers-mode" data-ext="txt"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>创建并编写 Dockerfile</li>
</ol>
<div class="language-txt line-numbers-mode" data-ext="txt"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6">
<li>创建 docker-compose.yml 文件并定义服务</li>
</ol>
<blockquote>
<p>version 版本过高，例如使用 3.9 ，之后 docker-compose up 可能会失败</p>
</blockquote>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7">
<li>确认所有文件准备完毕</li>
</ol>
<figure><img src="http://gitee.com/gzwrrr/typora-img/raw/master/images/image-20220319110958738.png" alt="image-20220319110958738" tabindex="0" loading="lazy"><figcaption>image-20220319110958738</figcaption></figure>
<ol start="8">
<li>执行启动命令</li>
</ol>
<blockquote>
<p>这一步可能会特别慢，主要是拉取镜像的问题，就算可以科学上网也可能构建失败，需要多试几次</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9">
<li>在 docker-compose 所在的目录下停止服务</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4>4.2.3 docker-compose 编写规则</h4>
<blockquote>
<p>docker-compose 核心概念：</p>
<ol>
<li>服务 service：一个个容器示例</li>
<li>工程 project：由一组关联的应用容器组成的一个「完整业务单元」，在 docker-compose.yml 文件中定义</li>
</ol>
<p>docker-compose 核心配置有三层：</p>
<ol>
<li>version: ‘xx’</li>
<li>services:
<ul>
<li>...</li>
</ul>
</li>
<li>其他：</li>
</ol>
<p>​      volumes:</p>
<p>​	  networks:</p>
<p>​	  config:</p>
</blockquote>
<p><strong>常用命令</strong>：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><code>docker-compose -h</code></td>
<td>查看帮助</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><code>docker-compose up</code></td>
<td>启动所有 docker-compose 服务</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><code>docker-compose up -d</code></td>
<td>启动所有 docker-compose 服务并在后台运行</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><code>docker-compose down</code></td>
<td>停止并删除容器、网络、卷、镜像等</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><code>docker-compose exec yml里的服务id</code></td>
<td>进入容器示例内部</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td><code>docker-compose ps</code></td>
<td>展示当前 docker-compose 编排过的运行的所有容器</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td><code>docker-compose top</code></td>
<td>展示当前 docker-compose 编排过的容器进程</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td><code>docker-compose logs yml里的服务id</code></td>
<td>查看容器输出日志</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td><code>docker-compose config</code></td>
<td>检查配置</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td><code>docker-compose config -q</code></td>
<td>检查配置，有问题才输出</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td><code>docker-compose restart</code></td>
<td>重启服务</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td><code>docker-compose start</code></td>
<td>启动服务</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td><code>docker-compose stop</code></td>
<td>停止服务</td>
</tr>
</tbody>
</table>
<h3> 4.3 docker swarm</h3>
<blockquote>
<p>集群部署</p>
</blockquote>
]]></content:encoded>
      <enclosure url="http://gitee.com/gzwrrr/typora-img/raw/master/images/image-20220319110958738.png" type="image/png"/>
    </item>
    <item>
      <title>Docker</title>
      <link>https://gzwrrr.github.io/article/docker/</link>
      <guid>https://gzwrrr.github.io/article/docker/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Docker</source>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Docker</h1>
]]></content:encoded>
    </item>
    <item>
      <title>ElasticSearch 简单使用</title>
      <link>https://gzwrrr.github.io/article/elasticsearch/ElasticSearch.html</link>
      <guid>https://gzwrrr.github.io/article/elasticsearch/ElasticSearch.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">ElasticSearch 简单使用</source>
      <description>ElasticSearch 简单使用</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>中间件</category>
      <category>elasticsearch</category>
      <pubDate>Sat, 23 Apr 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> ElasticSearch 简单使用</h1>
<h1> 写在前面</h1>
<p>ElasticSearch 是分布式的「搜索」与「分析」引擎，可以快速地存储、搜索和分析海量数据，底层是对 Lucene 进行封装，以此提供 RESTful API 接口，开箱即用</p>
<p>基本概念</p>
<ol>
<li>索引：理解为动词时，相当于 MySQL 中的 insert；理解为名词时，相当于 MySQL 中的 database</li>
<li>字段类型：在索引中可以定义一个或多个类型，类似于 MySQL 中的表（table），其中每一种类型的数据放在一起。补充：ES 7 以上的版本都建议不使用类型，即将数据直接存储在索引下面，原因是使用类型时，不同类型下的字段可能相同，这样在检索时效率会下降，并且在 8 以上的版本类型将会被移除</li>
<li>文档：保存在某个索引某个类型下的数据就称为文档，文档是以 JSON 格式存储的，类似于 MySQL 中的表的内容</li>
<li>分片（倒排索引）：先将整句分词，之后维护一张记录这些词出现在哪条记录的倒排索引表，搜索时也会先分词然后匹配所有相关记录，同一条记录出现次数最高的相关性得分最高，那么这条记录就是最符合的搜索结果</li>
</ol>
<p>补充：ElesticSearch 和 Kibana（图形化界面） 的版本要一致</p>
<br>
<h1> 安装 ES 与 Kibana</h1>
<ul>
<li><code>docker pull elasticsearch:7.5.1</code></li>
<li><code>mkdir -p /data/elasticsearch/config</code></li>
<li><code>mkdir -p /data/elasticsearch/data</code></li>
<li><code>chmod -R 777 /data/elasticsearch/data</code></li>
<li><code>echo "http.host: 0.0.0.0"&gt;&gt;/data/elasticsearch/config/elsticsearch.yml</code></li>
<li><code>docker run --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms256m -Xmx512m" -v /data/elasticsearch/config/elsticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /data/elasticsearch/data:/usr/share/elasticsearch/data -v /data/elasticsearch/plugins:/usr/share/elasticsearch/plugins -d elasticsearch:7.5.1</code></li>
</ul>
<p>docker 安装 Kibana：</p>
<ul>
<li><code>docker pull kibana:7.5.1</code></li>
<li><code>docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.30.100:9200 -p  5601:5601 -d kibana:7.5.1</code></li>
</ul>
<br>
<h1> CRUD</h1>
<p><strong>新增或更新：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查询与删除：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bulk 批量 API 语法：对需要携带数据的操作，两行为一个整体操作；用大括号区分不同行，请求体类型是 text，不是 json：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h1> Search API（Query DSL）</h1>
<p>ES 支持两种基本方式检索：</p>
<ol>
<li>通过 RESTful API 发送搜索参数</li>
<li>使用 REST request body 发送参数</li>
</ol>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面就是上述示例的搜索条件，称为领域搜索语言（Query DSL，内容比较多）：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 查询</h2>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 排序</h2>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 分页</h2>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 返回部分字段</h2>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 聚合</h2>
<p>ES 在查询出数据的同时还能将数据分析聚合起来，这样一次查询就可以得到我们想要的结果，注意，聚合操作是可以嵌套的，也即可以聚合完之后再聚合</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h1> Mapping 映射</h1>
<p>映射操作下不使用「类型」，而是直接在「索引」下进行数据处理</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 添加新字段</h2>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 修改字段</h2>
<p>映射中不能直接修改字段，真的需要修改时需要创建一个新的正确的索引并将数据迁移</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h1> 分词</h1>
<p>ES 中的默认分词器只能对英语句子进行分词，对中文进行操作会将一个句子中所有的字单独拆开，一般都会采用开源的 ik 分词器进行中文句子的分词</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h1> Spring Boot 整合 ElasticSearch</h1>
<p>下面一定要指定版本，Spring Boot 的默认版本是 6.8.5</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置类：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h1> 补充</h1>
<p>ES 中数组会被扁平化处理，即把不同对象的每一个字段单独抽取一个数组，然后将这些对象该字段的值全部存储在一起，不做任何处理会让搜索结果不符合预期</p>
<p>解决方法：可以指定字段类型 <code>"type":"nested"</code> ，即把数据指定成嵌入的</p>
]]></content:encoded>
    </item>
    <item>
      <title>ElasticSearch</title>
      <link>https://gzwrrr.github.io/article/elasticsearch/</link>
      <guid>https://gzwrrr.github.io/article/elasticsearch/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">ElasticSearch</source>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> ElasticSearch</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Git 速查</title>
      <link>https://gzwrrr.github.io/article/git/Git%E9%80%9F%E6%9F%A5.html</link>
      <guid>https://gzwrrr.github.io/article/git/Git%E9%80%9F%E6%9F%A5.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Git 速查</source>
      <description>Git 速查</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>git</category>
      <category>运维</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Git 速查</h1>
<h1> 写在前面</h1>
<ul>
<li>本文章为 Git 常用命令的速查记录</li>
<li>持续添加...</li>
</ul>
<h1> 强制覆盖本地分支</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 本地强制回滚</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Git</title>
      <link>https://gzwrrr.github.io/article/git/</link>
      <guid>https://gzwrrr.github.io/article/git/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Git</source>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Git</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Go 简单使用</title>
      <link>https://gzwrrr.github.io/article/go/Go.html</link>
      <guid>https://gzwrrr.github.io/article/go/Go.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Go 简单使用</source>
      <description>Go 简单使用</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>go</category>
      <category>编程</category>
      <pubDate>Fri, 20 Jan 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Go 简单使用</h1>
<h2> Go 的特点</h2>
<ul>
<li>犹如 C + Python，具有垃圾回收机制，是强类型语言，也是静态语言，编译型语言</li>
<li>天然支持并发</li>
<li>管道通信机制</li>
<li>支持返回多值</li>
</ul>
<p>GO 中没有 <code>public</code> 或者 <code>private</code> 等关键字，作为代替的是：如果变量名、函数名、常量名的「首字母大写」，则表明可以被其他的包访问；如果「首字母小写」，则表明只能在本包中使用</p>
<p>注意：GO 有很强的语法规范，设计理念是一种事情有且只有一种方法完成，目的是让代码不产生太多歧义，比如 GO 中不支持「三目运算符」</p>
<p>【补充】</p>
<p>GO 语言中有跳转控制语句 <code>goto</code>，可以无条件的转移到程序中指定的行</p>
<p>该语句通常与条件语句配合使用，实现跳转转移，跳出循环等功能</p>
<p>虽然有该特性，但是 GO 官方不建议使用 goto 语句，这样可以避免程序流程的混乱</p>
<p>GO 的优势：</p>
<ul>
<li>易上手，有丰富的标准库</li>
<li>基于 goroutines 和 channels 的简单并发编程</li>
<li>性能优越（与 Java 相比 Go 打败 Java 地方是内存使用和垃圾回收）</li>
<li>在语言层面定义了源码的格式化</li>
<li>有标准化的测试框架</li>
<li>defer 延时处理</li>
<li>有垃圾回收机制（这点有些人也认为是缺点，因为有经验的工程师宁愿掌握对内存的管理；另外一点就是 Rust 也有内存管理机制，但是并没有使用 GC）</li>
</ul>
<p>GO 的缺陷：</p>
<ul>
<li>目前还没有泛型、枚举、函数式编程（2022 之后就有了）</li>
<li>忽略现代语言设计需要的进步，可能导致少即是多的情况</li>
<li>异常处理比较复杂且痛苦（Rust 中也没有真正的异常，但是通过泛型和宏规避了这一点）</li>
<li>依赖管理痛苦（2022 及之后就改善了）</li>
<li>结构体易变，需要使用到深拷贝</li>
<li>除了 map 和 slice 之外几乎没有其他的数据结构</li>
</ul>
<h2> 生态</h2>
<table>
<thead>
<tr>
<th>软件</th>
<th>描述</th>
<th>链接</th>
</tr>
</thead>
<tbody>
<tr>
<td>docker</td>
<td>家喻户晓的容器技术</td>
<td><a href="https://github.com/moby/moby" target="_blank" rel="noopener noreferrer">github.com/moby/moby</a></td>
</tr>
<tr>
<td>kubernetes</td>
<td>容器编排引擎，google出品</td>
<td><a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener noreferrer">github.com/kubernetes/kubernetes</a></td>
</tr>
<tr>
<td>etcd</td>
<td>分布式服务注册发现系统</td>
<td><a href="https://github.com/etcd-io/etcd" target="_blank" rel="noopener noreferrer">github.com/etcd-io/etcd</a></td>
</tr>
<tr>
<td>influxdb</td>
<td>时序数据库</td>
<td><a href="https://github.com/influxdata/influxdb" target="_blank" rel="noopener noreferrer">github.com/influxdata/influxdb</a></td>
</tr>
<tr>
<td>grafana</td>
<td>数据监控可视化看板</td>
<td><a href="https://github.com/grafana/grafana" target="_blank" rel="noopener noreferrer">github.com/grafana/grafana</a></td>
</tr>
<tr>
<td>prometheus</td>
<td>开源监控系统</td>
<td><a href="https://github.com/prometheus/prometheus" target="_blank" rel="noopener noreferrer">github.com/prometheus/prometheus</a></td>
</tr>
<tr>
<td>consul</td>
<td>分布式服务发现系统</td>
<td><a href="https://github.com/hashicorp/consul" target="_blank" rel="noopener noreferrer">github.com/hashicorp/consul</a></td>
</tr>
<tr>
<td>nsq</td>
<td>亿级消息队列</td>
<td><a href="https://github.com/nsqio/nsq" target="_blank" rel="noopener noreferrer">github.com/nsqio/nsq</a></td>
</tr>
<tr>
<td>TiDB</td>
<td>分布式数据库, go + rust 打造</td>
<td><a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener noreferrer">github.com/pingcap/tidb</a></td>
</tr>
</tbody>
</table>
<h2> 变量</h2>
<p><strong>变量三种使用细节：</strong></p>
<ol>
<li>指定变量类型后不赋值，则会使用默认值</li>
<li>根据值自行判断变量的类型，此时不用指定变量的类型</li>
<li>定义变量时可以省略 <code>var</code>，可以使用 <code>i := 10</code> 的形式定义变量并自动进行类型推导</li>
</ol>
<p><strong>基本数据类型：</strong></p>
<ul>
<li>数值型
<ul>
<li>整数类型（int，int8，int16，int32，int64，uint，uint8，uint16，uint32，byte）</li>
<li>浮点类型（float32，float64）</li>
</ul>
</li>
<li>字符型（没有专门的字符型，是使用 byte 来保存单个字符类型的，保存的是字符的码值，超过后应该用更大的整型保存）</li>
<li>布尔型</li>
<li>字符串（官方将字符串归属到基本数据类型...）</li>
</ul>
<p><strong>派生类型/复杂类型：</strong></p>
<ol>
<li>指针</li>
<li>数组</li>
<li>结构体</li>
<li>管道</li>
<li>函数（也属于一种类型）</li>
<li>切片</li>
<li>接口</li>
<li>map</li>
</ol>
<p><strong>类型转化：</strong></p>
<p>Go 中不同类型的变量之间需要进行「显式转化」，即 Go 中数据类型不能自动转换</p>
<p>任意数值类型都可以相互转换，但是当超出转换到的类型的范围时，会直接做溢出处理，即不会报错，但是结果不一定是期望得到的，所以转换时需要特别小心</p>
<p>数值型与字符串的相互转换需要使用到两个包：<code>fmt</code> 和 <code>strconv</code></p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 指针</h2>
<p>值类型：基本数据类型、数组、结构体</p>
<p>引用类型：指针、切片、map、管道、接口</p>
<p>值类型与引用类型的特点：</p>
<ul>
<li>值类型：变量直接存储值，内存通常在栈中分配</li>
<li>引用类型：变量存储的是一个地址，这个地址对应的空间才是真正存储的数据，内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就变为了一个垃圾，在 GO 中由 GC 进行回收</li>
</ul>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 函数</h2>
<p>GO 中的函数允许「多返回值」</p>
<p>在 GO 中使用函数脱离不了包的管理，包的规范包括：</p>
<ul>
<li>对文件打包时，包对应着一个文件夹，文件的包名通常和文件所在的文件夹名称一致，一般包名为小写字母</li>
<li>当要使用其他包函数或者变量时，需要先引入对应的包</li>
<li>引入包时，路径是从 <code>$GOPATH</code> 的 <code>src</code> 下开始寻找的</li>
<li>同一个包中（同一个文件夹中），不允许有两个重名的函数或者变量名，也就是说 GO 中没有「函数重载」的概念（会有其他方式代替）</li>
</ul>
<h3> 函数的简单使用</h3>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：GO 中函数也是一种数据类型，所以可以直接作为形参进行传递与调用</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了简化数据类型定义，GO 支持自定义类型，并且函数支持为「函数返回值」命名</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数形参还可以使用可变参数，这个可变参数本质是切片（可变参数一定是形参列表中的最后一个）</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> init 函数</h3>
<p>每个源文件中都可以包含一个 init 函数，该函数会在 main 函数执行前被 GO 调用</p>
<p>如果还有全局变量的定义，那么初始化的顺序为：全局变量定义 -&gt; init 函数 -&gt; main 函数</p>
<p>如果是一个文件引入一个包，而这个包中有变量定义和 init 函数，且引入该包的文件也有变量定义和 init 函数，那么初始化的顺序为：被引用的包的全局变量定义 -&gt; 被引用的包的 init 函数 -&gt; 本文件的全局变量定义 -&gt; 本文件的 init 函数</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 匿名函数</h3>
<p>两种使用场景：</p>
<ul>
<li>定义匿名函数时就直接调用，这种函数只能调用一次</li>
<li>将匿名函数赋值给一个变量，再通过该变量来调用匿名函数</li>
</ul>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 闭包</h3>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> defer</h3>
<p>在函数执行中，经常需要创建资源（数据库连接、文件句柄等），为了能够在函数执行完后即使释放资源，提供了延时机制（defer）</p>
<p>defer 将语句放入栈时，会把相关的值同时拷贝到并入栈</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 异常处理</h2>
<p><strong>简单使用：</strong></p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 数组</h2>
<p>数组的简单使用</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的注意事项：</p>
<ol>
<li>数组是多个「相同类型」的数据的组合，一旦声明了数组的长度，之后就不能改变</li>
<li><code>var arr[]int</code> 是声明了一个切片而不是数组</li>
<li>数组中的元素可以是任意数据类型，包括值类型和引用类型，但是不能二者混用</li>
<li>数组创建后，如果没有赋值则有默认零值</li>
<li>特别注意：GO 的数组属于「值类型」，再默认情况下进行的是值传递，因此会进行值拷贝，所以数组之间不会互相影响</li>
<li>如果想要在函数中修改原本的数组，需要使用「引用传递」</li>
</ol>
<div class="language-GO line-numbers-mode" data-ext="GO"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 切片</h2>
<p>切片是数组的一个引用，因此切片是引用类型，在进行传递时遵守引用传递机制</p>
<p>切片长度可变，可以理解成可以动态变化的数组</p>
<h3> 简单使用</h3>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 切片示例</h3>
<p>将 arr 中从下标 <code>startIndex</code> 到 <code>endIndex-1</code> 下的元素创建为一个新的切片</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认 <code>endIndex</code> 时将表示一直到arr的最后一个元素</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认 <code>startIndex</code> 时将表示从 arr 的第一个元素开始</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过切片 s 初始化切片 s1</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过内置函数 <strong>make()</strong> 初始化切片<strong>s</strong>，<strong>[]int</strong> 标识为其元素类型为 int 的切片</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注：string 类型底层是 byte 数组，同样可以进行切片，但是注意，字符串是不可变的，不能直接通过下标直接修改</p>
]]></content:encoded>
    </item>
    <item>
      <title>Go</title>
      <link>https://gzwrrr.github.io/article/go/</link>
      <guid>https://gzwrrr.github.io/article/go/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Go</source>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Go</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Jenkinsfile 配置</title>
      <link>https://gzwrrr.github.io/article/jenkins/Jenkinsfile.html</link>
      <guid>https://gzwrrr.github.io/article/jenkins/Jenkinsfile.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Jenkinsfile 配置</source>
      <description>Jenkinsfile 配置</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>jenkins</category>
      <category>运维</category>
      <pubDate>Tue, 12 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Jenkinsfile 简单使用</h1>
<h2> 声明式流水线</h2>
<h3> 1.结构</h3>
<div class="language-groovy line-numbers-mode" data-ext="groovy"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.各部分解释</h3>
<ul>
<li>agent</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/agent.png" alt="image-20220516235709630" tabindex="0" loading="lazy"><figcaption>image-20220516235709630</figcaption></figure>
<ul>
<li>post</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/post.png" alt="image-20220516235920789" tabindex="0" loading="lazy"><figcaption>image-20220516235920789</figcaption></figure>
<ul>
<li>stages</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/stages.png" alt="image-20220517000051638" tabindex="0" loading="lazy"><figcaption>image-20220517000051638</figcaption></figure>
<ul>
<li>environment</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/environment.png" alt="image-20220517000225049" tabindex="0" loading="lazy"><figcaption>image-20220517000225049</figcaption></figure>
<ul>
<li>options</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/options.png" alt="image-20220517000337820" tabindex="0" loading="lazy"><figcaption>image-20220517000337820</figcaption></figure>
<ul>
<li>paramters</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/paramters.png" alt="image-20220517000520950" tabindex="0" loading="lazy"><figcaption>image-20220517000520950</figcaption></figure>
<ul>
<li>trigger</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/trigger.png" alt="image-20220517000551382" tabindex="0" loading="lazy"><figcaption>image-20220517000551382</figcaption></figure>
<ul>
<li>tool</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/tool.png" alt="image-20220517000643113" tabindex="0" loading="lazy"><figcaption>image-20220517000643113</figcaption></figure>
<ul>
<li>input</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/input.png" alt="image-20220517000914784" tabindex="0" loading="lazy"><figcaption>image-20220517000914784</figcaption></figure>
<ul>
<li>when</li>
</ul>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/when.png" alt="image-20220517001202914" tabindex="0" loading="lazy"><figcaption>image-20220517001202914</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jenkins/20230209/agent.png" type="image/png"/>
    </item>
    <item>
      <title>Jenkins</title>
      <link>https://gzwrrr.github.io/article/jenkins/</link>
      <guid>https://gzwrrr.github.io/article/jenkins/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Jenkins</source>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Jenkins</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Linux 命令整理</title>
      <link>https://gzwrrr.github.io/article/linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</link>
      <guid>https://gzwrrr.github.io/article/linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Linux 命令整理</source>
      <description>Linux 命令整理</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>linux</category>
      <category>运维</category>
      <pubDate>Wed, 10 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Linux命令整理</h1>
<h2> 1.关机指令</h2>
<ul>
<li><code>sync</code> 将数据由内存同步到硬盘中</li>
<li><code>shutdown</code> 关机指令，可以用man shutdown看一下所有的关机指令</li>
<li><code>shutdown -h 10</code> 计算机10秒后关机</li>
<li><code>shutdown -h now</code> 立即关机</li>
<li><code>shutdown -h 20 : 00</code> 在今天的20 : 00关机</li>
<li><code>shutdown -h +10</code> 十分钟后关机</li>
<li><code>shutdown -r now</code> 系统立即重启</li>
<li><code>shutdown -r +10</code> 系统10分钟过后重启</li>
<li><code>reboot</code> 重启命令，等同于 <code>shutdown -r now</code></li>
<li><code>halt</code> 关闭系统，等同于<code>shutdown -h now</code> 和 <code>poweroff</code></li>
</ul>
<p><mark>注：不管是重启还是关闭系统，都需要首先运行<code>sync</code>命令，即把内存中的数据存储到磁盘中</mark></p>
<h2> 2.系统目录结构</h2>
<blockquote>
<p>1.一切皆文件</p>
<p>2.根目录/，所有的文件都挂载在这个节点下</p>
</blockquote>
<h3> 对目录的解释</h3>
<ul>
<li>
<p><mark><strong>/root</strong> : 该目录为系统管理员，也称作超级权限者的用户主目录</mark></p>
</li>
<li>
<p><mark><strong>/etc</strong> : 这个目录用来存放所有的系统管理所需要的配置文件和子目录</mark></p>
</li>
<li>
<p><mark><strong>/home</strong> : 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</mark></p>
</li>
<li>
<p><mark><strong>/tmp</strong> : 这个目录是用来存放一些临时文件的，用完即丢的文件可以放在这个目录下，例如安装包</mark></p>
</li>
<li>
<p><mark><strong>/usr</strong> : 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录</mark></p>
</li>
<li>
<p><mark><strong>/opt</strong> : 这个是主机额外安装软件所摆放的目录，默认为空</mark></p>
</li>
<li>
<p><mark><strong>/www</strong> : 存放服务器网站相关的资源，环境，网站的项目（LNMP就放在其server/目录里）</mark></p>
</li>
<li>
<p><mark><strong>/var</strong> : 这个目录存放着在不断扩充的东西，我们习惯将那些经常被修改的文件放在这个目录下，包括各种日志文件</mark></p>
</li>
<li>
<p><strong>/bin</strong> :  bin是binary的缩写，这个目录存放着最经常使用的命令</p>
</li>
<li>
<p><strong>/boot</strong> : 这里存放这启动Linux时使用的一些核心命令 <strong>（不能动）</strong></p>
</li>
<li>
<p><strong>/dev</strong> : dev是device的缩写，存放的是Linux的外部设备（例如U盘），在Linux中访问设备的方式和访问文件的方式是相同的</p>
</li>
<li>
<p><strong>/lib</strong> : 这个目录存放着系统最基本的动态连接共享库，其作用类似与Windows系统中的dll文件 <strong>（不能动）</strong></p>
</li>
<li>
<p><strong>/lost+found</strong> : 这个目录一般情况下是空的，当系统非法关机后，这里就存放着一些文件</p>
</li>
<li>
<p><strong>/media</strong> : Linux系统会自动识别一些设备，例如U盘、光驱等，当识别后，就会把设备挂载到这个目录下</p>
</li>
<li>
<p><strong>/mnt</strong> : 系统提供该目录是为了用用户临时挂载别的文件系统，我们可以将光驱挂载到/mnt/上，然后进入该目录就可以查看光驱里面的内容了（也会把一些本地文件挂载在这个目录下）</p>
</li>
<li>
<p><strong>/proc</strong> : 这个目录是一个虚拟的目录，他是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息</p>
</li>
<li>
<p><strong>/sbin</strong> : s就是super user的意思，这里存放的是系统管理员使用的系统管理程序</p>
</li>
<li>
<p><strong>/srv</strong> : 该目录存放一些服务启动之后需要提取的数据</p>
</li>
<li>
<p><strong>/sys</strong> : 这里是Linux2.6内核的一个很大的变化，该目录下安装了新出现的一个系统文件sysfs</p>
</li>
<li>
<p><strong>/usr/bin</strong> : 系统用户使用的应用程序</p>
</li>
<li>
<p><strong>/usr/sbin</strong> : 超级用户使用的比较高级的管理程序和系统守护程序</p>
</li>
<li>
<p><strong>/usr/src</strong> : 内核源代码默认的放置目录</p>
</li>
<li>
<p><strong>/run</strong> : 这个是一个临时文件系统，存储系统启动以来的信息，当系统重启时，这个目录下的文件应该被删除或清除</p>
</li>
</ul>
<h2> 3.常用的基本命令</h2>
<h3> 3.1 目录相关命令</h3>
<h4>3.1.1 清理</h4>
<ul>
<li><code>clear</code> 清屏</li>
</ul>
<h4>3.1.2 切换</h4>
<ul>
<li><code>cd</code> 切换，目录命令</li>
<li><code>./</code> 当前目录</li>
<li><code>cd ..</code> 返回上一级目录</li>
<li><code>cd ~</code> 进入用户目录（/root）</li>
</ul>
<h4>3.1.3 查看</h4>
<ul>
<li><code>ls</code> 列出目录（最常使用的命令）</li>
<li><code>pwd</code> 显示当前所处的目录</li>
</ul>
<h4>3.1.4 创建与删除</h4>
<ul>
<li><code>mkdir 目录名 </code> 创建单级目录</li>
<li><code>mkdir -p 目录/目录/...</code> 递归创建多级目录</li>
<li><code>rmdir 目录</code> 删除空目录</li>
<li><code>rmdir -p 目录/目录/...</code> 删除多级目录</li>
<li><code>rm</code> 移除目录或文件</li>
<li><code>rm -rf</code> 极其危险，可以强制删除任何文件，尤其是不能使用 <code>rm -rf /*</code> 命令，这会删除所有的文件，最终导致系统崩溃</li>
</ul>
<h4>3.1.5 移动/重命名文件或者目录</h4>
<ul>
<li><code>mv 被移动的目录或文件名 进入的文件名/</code></li>
<li><code>mv 被重命名的文件 新文件名</code></li>
</ul>
<h4>3.1.6 复制</h4>
<ul>
<li><code>cp 被拷贝的文件 拷贝进入的目录</code> 复制文件</li>
</ul>
<h3> 3.2 各种参数</h3>
<p><mark>注：所有的参数都可以组合使用</mark></p>
<ul>
<li><code>-a</code> all，查看所有的文件，包括隐藏文件</li>
<li><code>-l</code> list，列出除颖仓文件外的所有文件，包括文件的属性和权限</li>
<li><code>-p</code> 配合创建或删除多级目录</li>
<li><code>-f</code> 忽略不存在的文件，删除时不会出现警告，即强制删除</li>
<li><code>-R</code> 递归更改文件属性</li>
<li><code>-r</code> 递归，递归删除目录</li>
<li><code>-i</code> 互动，删除时询问是否删除</li>
<li><code>-n</code> 与查看文件命令搭配，指定查看的总行数</li>
<li><code>-s</code> 辅助创建软链接</li>
</ul>
<h3> 3.3 文件/目录的基本属性</h3>
<p><mark>注：用-l参数后才能显示</mark></p>
<p>图片：</p>
<p>示例（重点 ）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">属主</th>
<th style="text-align:center">属组</th>
<th style="text-align:center">大小</th>
<th style="text-align:center">时间</th>
<th style="text-align:center">文件/目录名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">drwxrwxrwx</td>
<td style="text-align:center">root</td>
<td style="text-align:center">root</td>
<td style="text-align:center">4096</td>
<td style="text-align:center">Feb 20 10 : 00</td>
<td style="text-align:center">boot</td>
</tr>
<tr>
<td style="text-align:center">l---r-xr-x</td>
<td style="text-align:center">root</td>
<td style="text-align:center">usr</td>
<td style="text-align:center">7</td>
<td style="text-align:center">Feb 20 12 : 00</td>
<td style="text-align:center">bin -&gt; usr/bin</td>
</tr>
</tbody>
</table>
<h4>3.3.1 表示的含义</h4>
<p><mark>注：第一个字母</mark></p>
<ul>
<li><code>d</code> 目录</li>
<li><code>-</code> 文件</li>
<li><code>l</code> 链接文档（link file）</li>
<li><code>b</code> 装置文件里面的可提供储存的接口设备（可随机存储装置）</li>
<li><code>c</code> 则表示为装置文件里面的串行端口设备，例如鼠标、键盘（一次性读取装置）</li>
<li><code>-&gt;</code> 链接指向的地方</li>
</ul>
<h4>3.3.2 权限</h4>
<p><mark>注：后九个字母，三个为一组，每组分别对应owner/group/others，三种身份有着各自的权限</mark></p>
<ul>
<li><code>r</code> 可读，权重为4</li>
<li><code>w</code> 可写，权重为2</li>
<li><code>x</code> 可执行，权重为1</li>
<li><code>-</code> 无权限，权重为0</li>
</ul>
<p><strong>注：单个身份最高权限对应的权重为7</strong></p>
<h4>3.3.3 修改文件属性</h4>
<ul>
<li><code>chgrp -R 新组 文件或目录名</code> 更改组</li>
<li><code>chown -R 新主 文件或目录名</code> 更改主</li>
<li><code>chmod -R xyz 文件或目录名</code> 更改文件的属性</li>
</ul>
<p><strong>注：<code>chmod -R 777 文件或目录名</code> 表示最高权限</strong></p>
<h3> 3.4 文件内容查看</h3>
<p>注：<strong>下面命令后+文件名</strong></p>
<ul>
<li><code>cat</code> 由第一行开始显示文件内容</li>
<li><code>tac</code> 从最有一行开始显示文件内容</li>
<li><code>nl</code> 显示的时候顺道输出行号</li>
<li><code>more</code> 一页一页地显示文件内容（空格代表翻页，回车代表向下看一行，f代表显示当前行号）</li>
<li><code>less</code> 与<code>more</code>类似，但是less可以往前翻页==（空格翻页，上下键翻动页面，q退出，/关键字+回车查找文件中的字符串，继续用n表示寻找下一个，N表示寻找上一个）==</li>
<li><code>head -n 20</code> 只看头20行</li>
<li><code>tail -n 10</code> 只看尾10行</li>
</ul>
<p>可以使用man[命令]来查看各个命令的使用文档，如<code>man cp</code></p>
<h3> 3.5 文件相关命令</h3>
<h4>3.5.1 创建与删除</h4>
<table>
<thead>
<tr>
<th>序号</th>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>touch 文件名</code></td>
<td>创建文件</td>
</tr>
<tr>
<td>2</td>
<td><code>echo "插入语句" &gt;&gt; 文件名 </code></td>
<td>向指定文件插入语句</td>
</tr>
</tbody>
</table>
<h3> 3.6 Linux的链接</h3>
<blockquote>
<p>Linux的链接分为两种：硬链接、软链接</p>
</blockquote>
<ul>
<li>
<p>硬链接：<code>A---B</code> 假设B是A的硬链接，那么他们两个指向了同一个文件，即允许一个文件拥有多个路劲，用户可以通过这种机制建立硬链接到一些重要文件上，<mark>防止误删</mark></p>
</li>
<li>
<p>软链接：类似Windows下的快捷方式，删除源文件，那么快捷方式也不能访问</p>
<h4>3.5.1 <strong>创建的语法</strong></h4>
<table>
<thead>
<tr>
<th>序号</th>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>ln 文件名1 文件名2</code></td>
<td>创建硬链接（文件名2）</td>
</tr>
<tr>
<td>2</td>
<td><code>ln -s 文件名1 文件名2</code></td>
<td>创建软链接（文件名2）</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h2> 4.VIM编辑器</h2>
<p><mark>vim键盘图</mark></p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//linux/20230209/vim编辑器键位.png" alt="image-20230209011324200" tabindex="0" loading="lazy"><figcaption>image-20230209011324200</figcaption></figure>
<h3> 4.1 vim相关知识</h3>
<h4>4.1.1 三种使用模式</h4>
<ul>
<li>命令模式（command mode）</li>
<li>输入模式（Insert mode）</li>
<li>底线命令模式（Last line mode）</li>
</ul>
<h4>4.1.2 三种模式的相关指令</h4>
<p><strong>（1）命令模式：</strong></p>
<p>​		<mark>用户刚进入vim时是命令模式，不能编辑</mark>，此模式下，敲击键盘会被识别为命令，不会输入字符</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>i</td>
<td>切换到输入模式输入字符</td>
</tr>
<tr>
<td>2</td>
<td>x</td>
<td>删除当前光标所处的子字符</td>
</tr>
<tr>
<td>3</td>
<td>:</td>
<td>切换到底线命令模式，以在最底下一行输入更多命令。如果处在编辑模式则需要先按下esc退出</td>
</tr>
</tbody>
</table>
<p><strong>（2）底线命令模式：</strong></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>w</td>
<td>保存文件</td>
</tr>
<tr>
<td>2</td>
<td>q</td>
<td>文件</td>
</tr>
</tbody>
</table>
<p><strong>常常使用 <code>wq</code> 保存并退出</strong></p>
<h2> 5.账号管理</h2>
<h3> 5.1 增删改操作</h3>
<table>
<thead>
<tr>
<th>序号</th>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>useradd -参数 用户名</code></td>
<td>添加用户</td>
</tr>
<tr>
<td>2</td>
<td><code>userdel 用户名</code></td>
<td>删除用户（一般加-r参数清理文件）</td>
</tr>
<tr>
<td>3</td>
<td><code>usermod 修改的内容 修改的用户</code></td>
<td>修改用户</td>
</tr>
<tr>
<td>4</td>
<td><code>su 用户名</code></td>
<td>切换用户</td>
</tr>
<tr>
<td>5</td>
<td><code>passwd 用户名</code></td>
<td>设置密码（root用户）</td>
</tr>
<tr>
<td>6</td>
<td><code>passwd</code></td>
<td>设置摩玛（普通用户）</td>
</tr>
<tr>
<td>7</td>
<td><code>passwd -l 用户名</code></td>
<td>root用户冻结普通用户</td>
</tr>
<tr>
<td>8</td>
<td><code>passwd -d 用户名</code></td>
<td>没有密码的用户也不能登录</td>
</tr>
<tr>
<td>9</td>
<td><code>passwd -u 用户名</code></td>
<td>解冻用户</td>
</tr>
</tbody>
</table>
<p><strong>参数说明</strong></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-m</code></td>
<td>使用者目录如果不存在则自动创建</td>
</tr>
<tr>
<td>2</td>
<td><code>-c</code></td>
<td>指定一段注释性描述</td>
</tr>
<tr>
<td>3</td>
<td><code>-d</code></td>
<td>指定用户目录，如果此目录不存在则同时使用<code>-m</code>选项</td>
</tr>
<tr>
<td>4</td>
<td><code>-g</code></td>
<td>指定用户所属的用户组</td>
</tr>
<tr>
<td>5</td>
<td><code>-G</code></td>
<td>指定用户所属的附属组</td>
</tr>
<tr>
<td>6</td>
<td><code>-s</code></td>
<td>指定用户的登录shell</td>
</tr>
<tr>
<td>7</td>
<td><code>-u</code></td>
<td>指定用户的用户号，如果同时有 <code>-o</code> 选项，则可以重复其他用户的表示号</td>
</tr>
<tr>
<td>8</td>
<td><code>-l</code></td>
<td>冻结用户</td>
</tr>
<tr>
<td>9</td>
<td><code>-u</code></td>
<td>解冻用户</td>
</tr>
</tbody>
</table>
<h3> 5.2 用户组管理</h3>
<table>
<thead>
<tr>
<th>序号</th>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>groupadd 用户组</code></td>
<td>添加用户组</td>
</tr>
<tr>
<td>2</td>
<td><code>groupadd -g 500 用户组</code></td>
<td>指定用户组id为500</td>
</tr>
<tr>
<td>3</td>
<td><code>groupdel 用户组</code></td>
<td>删除用户组</td>
</tr>
<tr>
<td>4</td>
<td><code>groupmod -g id -n 新名 用户组</code></td>
<td>修改用户组</td>
</tr>
</tbody>
</table>
<h2> 6.磁盘管理</h2>
<table>
<thead>
<tr>
<th>序号</th>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>df</code></td>
<td>列出文件系统整体的磁盘使用量（一般搭配-h使用）</td>
</tr>
<tr>
<td>2</td>
<td><code>du</code></td>
<td>检查磁盘空间文件具体占用的容量</td>
</tr>
<tr>
<td>3</td>
<td><code>du -sm /* </code></td>
<td>检查根目录下每个文件占用的容量</td>
</tr>
</tbody>
</table>
<h2> 7.进程管理</h2>
<table>
<thead>
<tr>
<th>序号</th>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>ps</code></td>
<td>查看当前系统中正在执行的各种进程的信息</td>
</tr>
<tr>
<td>2</td>
<td><code>ps -ef</code></td>
<td>查看父进程的信息</td>
</tr>
<tr>
<td>3</td>
<td><code>pstree -pu</code></td>
<td>显示进程目录树</td>
</tr>
<tr>
<td>4</td>
<td><code>kill -9 进程id</code></td>
<td>强制杀死进程</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>参数解释</strong></li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-a</code></td>
<td>显示当前终端运行的所有进程信息</td>
</tr>
<tr>
<td>2</td>
<td><code>-u</code></td>
<td>以用户的信息显示进程</td>
</tr>
<tr>
<td>3</td>
<td><code>-x</code></td>
<td>显示后台运行进程的参数</td>
</tr>
<tr>
<td>4</td>
<td><code>-p</code></td>
<td>显示父id</td>
</tr>
<tr>
<td>5</td>
<td><code>-u</code></td>
<td>显示用户组</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>示例</strong></li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>`ps -aux</td>
<td>grep mysql `</td>
</tr>
</tbody>
</table>
<h2> 8.环境安装</h2>
<blockquote>
<p>安装软件一般有三种方式：rpm、解压缩、yum在线安装</p>
</blockquote>
<h3> 8.1 rpm</h3>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>rpm -ivk xxx.rpm</code></td>
<td>安装程序</td>
</tr>
<tr>
<td>2</td>
<td>`rpm -qa</td>
<td>grep 需要查看的程序`</td>
</tr>
<tr>
<td>3</td>
<td><code>rpm -e --nodeps 需要删除的程序</code></td>
<td>强制删除程序</td>
</tr>
</tbody>
</table>
<h3> 8.2 解压缩</h3>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>tar -zxvf xxx.tar.gz</code></td>
<td>解压文件</td>
</tr>
</tbody>
</table>
<h3> 8.3 yum在线安装</h3>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>yum -y install 包名</code></td>
<td>在线安装并自动确认所有的提示</td>
</tr>
</tbody>
</table>
<h3> 8.4 其他</h3>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>source 配置文件的地址</code></td>
<td>让配置文件生效</td>
</tr>
</tbody>
</table>
<h2> 其他</h2>
<h3> 1.1 网络相关（CentOS 7）</h3>
<ul>
<li>网络配置所在的目录：<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code></li>
<li><code>ifconfig</code> 查看网络配置</li>
</ul>
<h3> 2.2 管道符 <code>|</code></h3>
<ul>
<li>管道符可以将前面参数执行后得到的结果传递给后面的参数操作，一般用于过滤信息</li>
</ul>
]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//linux/20230209/vim%E7%BC%96%E8%BE%91%E5%99%A8%E9%94%AE%E4%BD%8D.png" type="image/png"/>
    </item>
    <item>
      <title>Linux</title>
      <link>https://gzwrrr.github.io/article/linux/</link>
      <guid>https://gzwrrr.github.io/article/linux/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Linux</source>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Linux</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Mongodb 简单使用</title>
      <link>https://gzwrrr.github.io/article/mongodb/Mongodb.html</link>
      <guid>https://gzwrrr.github.io/article/mongodb/Mongodb.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Mongodb 简单使用</source>
      <description>Mongodb 简单使用</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>mongodb</category>
      <category>数据库</category>
      <pubDate>Fri, 15 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Mongodb 简单使用</h1>
<h1> 插入文档</h1>
<p>当向集合中插入文档时，如果没有指定文档的 <code>_id</code> 属性，数据库会自动为文档添加 <code>_id</code>，以此确保数据的唯一性</p>
<div class="language-mariadb line-numbers-mode" data-ext="mariadb"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h1> 查询文档</h1>
<div class="language-mariadb line-numbers-mode" data-ext="mariadb"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h1> 修改文档</h1>
<div class="language-mariadb line-numbers-mode" data-ext="mariadb"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h1> 删除文档</h1>
<div class="language-mariadb line-numbers-mode" data-ext="mariadb"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h1> Mongoose</h1>
<p>mongoose 中提供了几个对象：</p>
<ul>
<li>Schema：模式对象，定义约束数据库中的文档结构</li>
<li>Model：作为集合中的所有文档的表示，相当于数据库中的 Collection</li>
<li>Document：表示集合中的具体文档，相当于集中的一个具体的文档</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Mongodb</title>
      <link>https://gzwrrr.github.io/article/mongodb/</link>
      <guid>https://gzwrrr.github.io/article/mongodb/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Mongodb</source>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Mongodb</h1>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL</title>
      <link>https://gzwrrr.github.io/article/mysql/</link>
      <guid>https://gzwrrr.github.io/article/mysql/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">MySQL</source>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> MySQL</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Netty 简单使用</title>
      <link>https://gzwrrr.github.io/article/netty/Netty.html</link>
      <guid>https://gzwrrr.github.io/article/netty/Netty.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Netty 简单使用</source>
      <description>Netty 简单使用</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>netty</category>
      <category>通信</category>
      <category>中间件</category>
      <pubDate>Tue, 04 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Netty 简单使用</h1>
<h1> I/O 模型</h1>
<ul>
<li>I/O 模型简单理解：用什么样的通道进行数据的发送和接收，模型很大程度决定了程序通信的性能</li>
<li>Java BIO：同步阻塞模型，服务器实现为一个连接一个线程，客户端有连接时服务器就需要启动一个形成进行处理，如果这个连接不做任何事情就会造成不必要的线程开销；适用于连接数较小且固定的架构，对服务器资源要求比较高，但是程序简单易理解</li>
<li>Java NIO：同步非阻塞模型，服务器实现为一个线程处理多个请求，客户端发送的连接请求都会注册到「多路复用器」上，多路复用器轮询到连接有 I/O 请求就会进行处理；适用于连接数较多且连接比较短（轻操作）的架构，比如聊天服务器，弹幕系统，服务器间通讯。编程较为复杂</li>
<li>Java AIO（没有广泛使用）：异步非阻塞模型，引入了「异步通道」的概念，采用 Proactor 模式，简化了程序编写，有效的请求才启动线程，特点是由操作系统完成后才通知服务端程序启动线程处理请求，一般适用于连接数较多且连接时间较长的应用，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂</li>
</ul>
<h1> NIO</h1>
<ul>
<li>
<p>NIO 有三大核心部分：Selector：选择器、Channel：管道、Buffer：缓冲区</p>
</li>
<li>
<p>三大核心的关系：</p>
<ul>
<li>每个 Selector 都会对应一个 线程，而一个线程会对应多个 Channel</li>
<li>每个 Channel 都会对应一个 Buffer</li>
<li>程序切换到哪个 Channel 是由「事件」决定的，这里的事件 Event 也是 NIO 中很重要的概念，Selector 会根据不同的事件切换不同的 Channel</li>
<li>Buffer 本质就是一个内存块，底层都有一个数组，数据的读写都是通过 Buffer 的</li>
<li>Channel 和 Buffer 都是「双向的」，前者很好地反映了底层操作系统的情况，后者的切换需要通过 <code>flip()</code> 方法实现</li>
</ul>
</li>
<li>
<p>NIO 是面向「缓冲区」或者面向「块」编程的，数据读取到一个稍后处理的缓冲区中，需要时可在缓冲区中前后移动，这样增加了处理过程中的灵活性，使用它可以提供非阻塞式的「伸缩性网格」</p>
</li>
<li>
<p>NIO 的非阻塞模式（多路复用），使一个线程从某通道发送请求或者读取数据，但是这仅能读取到目前可用的数据，如果目前没有数据可用，就什么都不会获取，而不是保持线程阻塞，这样线程就可以处理其他事情</p>
</li>
<li>
<p>BIO 是以「流」的方式处理数据的，而 NIO 是基于 Channel 和 Buffer 进行操作的，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中；Selector 用于监听多个通道的事件，比如连接请求、数据到达等，因此使用单个线程就可以监听到多个客户端通道</p>
</li>
</ul>
<h2> Buffer</h2>
<ul>
<li>缓冲区本质上就是一个可以「读写数据」的「内存块」，可以理解成一个容器对象，底层是数组，该对象提供了一组方法，以便轻松地使用内存块</li>
<li>缓冲区对象还内置了一些「机制」，能够跟踪和记录缓冲区的「状态变化」情况</li>
<li>在 NIO 中，Buffer 是一个「顶层父类」，是一个「抽象类」，基础类型都有对应的 Buffer 类（除了布尔类型）</li>
<li>Buffer 类定义了所有缓冲区都具有的「四个属性」，这些属性用于提供关于其所包含的数据元素的「信息」，四个属性如下：
<ul>
<li>mark：标志位</li>
<li>position：下一个要被读或写的元素的「索引」，每次读写缓冲区数据时都会改变该索引的位置</li>
<li>limit：表示缓冲区的当前终点，即不能对缓冲区超过极限的位置进行读写操作，但是这个极限是可以修改的</li>
<li>capacity：容量，即可以容纳的最大数据量，在缓冲区创建时就被设定并且不能改变</li>
</ul>
</li>
<li>Buffer 可以使用方法 <code>asReadOnlyBuffer()</code> 手动转换成「只读缓冲区」，读取的时候还必须按照写入类型的顺序进行相应，否则会抛异常</li>
</ul>
<h3> 基本使用</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> MappedByteBuffer</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Channel</h2>
<ul>
<li>Channel 是双向的，可以进行读写操作，在 NIO 中是一个接口，常用的 Channel 类有：
<ul>
<li><code>FileChannel</code>：用于文件的数据读写</li>
<li><code>DatagramChannel</code>：用于 UDP 的数据读写</li>
<li><code>ServerSocketChannel</code> 和 <code>SocketChannel</code>：用于 TCP 的数据读写</li>
</ul>
</li>
</ul>
<h3> 基本使用</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ScatteringAndGathering</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Selector</h2>
<ul>
<li>
<p>Selector 是多路复用器，是 Java NIO 核心组件中的用于检查一个或者多个 Channel 的状态是否处于可读或者可写</p>
</li>
<li>
<p>使用 Selector 的好处在于，可以使用更少的线程来处理通道，避免了上下文切换带来的开销</p>
</li>
<li>
<p>但是注意，不是所有的 Channel 都可以被 Selector 复用，比如 FileChannel 就不能被复用；判断一个 Channel 是否能被复用，前提是它是否继承了抽象类 <code>SelectableChannel</code>，集成即可复用，否则不能</p>
</li>
<li>
<p><code>SelectableChannel</code> 类提供了实现通道的「可选择性」的公共方法，这是所有支持「就绪检查」的通道类的「父类」；所有的 Socket 通道都是可选择的，包括从「管道（Pipe）」对象中获得的通道</p>
</li>
<li>
<p>选择器和通道之间使用「注册」的方式完成联系；一个通道可以被注册到「多个选择器」上，但是对每个选择器而言只能被注册一次；在注册时，需要指定通道的哪些操作是选择器关心的</p>
</li>
<li>
<p>通道操作包括以下四种：</p>
<ul>
<li>可读：<code>SelectionKey.OP_READ</code></li>
<li>可写：<code>SelectionKey.OP_WRITE</code></li>
<li>连接：<code>SelectionKey.OP_CONNECT</code></li>
<li>接收：<code>SelectionKey.OP_ACCEPT</code></li>
</ul>
</li>
<li>
<p>如果通道对多操作感兴趣，那么可以通过「位或」操作符来实现，如：<code>int key = SelectionKey.OP_READ |SelectionKey.OP_WRITE </code></p>
</li>
<li>
<p>选择器查询的不是通道的「操作」，而是通道的某一个操作的一种「就绪状态」，这里的就绪状态是指，一旦通道具备完成某个操作的条件，就表示该通道的某个操作「就绪」，此时就可以被选择器查询到，程序就可以对通道进行相应的操作</p>
</li>
</ul>
<h3> 基本使用</h3>
<p><strong>服务端：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 聊天室</h3>
<p><strong>服务端：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 零拷贝</h2>
<ul>
<li>
<p>零拷贝是网络编程的关键，很多性能优化都离不开零拷贝；常用的零拷贝有 <code>mmap</code>（内存映射）和 <code>sendFile</code>，前者适合小数据量的读写，后者适合大文件的传输</p>
</li>
<li>
<p>传统 IO 操作是使用 DMA（直接内存拷贝，不使用 CPU），过程经历了 4 次拷贝 3 次切换</p>
</li>
<li>
<p>这里说的零拷贝不是真正的零拷贝，而是从操作系统的角度看的，即没有 CPU 拷贝（4 次拷贝优化成了 3 次）</p>
</li>
<li>
<p><code>mmap</code> 通过内存映射，将文件映射到「内核缓冲区」，用户空间可以直接「共享」内核空间的数据，这样在网络传输的过程中就可以减少内核空间到用户空间的拷贝</p>
</li>
<li>
<p><code>sendFile</code> 优化下，数据不会经过用户态，而是直接从内核缓冲区进入到 Socket Buffer，同时，由于与用户态完全无关，这样还可以减少一次上下文的切换，即变成了 3 次拷贝 2 次切换</p>
</li>
</ul>
<h1> Netty 简介</h1>
<ul>
<li>Netty 是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠的网络 IO 程序，简化了 NIO 的开发流程</li>
<li>Netty 主要针对在 TCP 协议下，面向 Clients 端的高并发应用，或者 Peer-to-Peer 场景下的大量数据持续传输的应用</li>
<li>Netty 本质是一个 NIO 框架，适用于服务器通讯相关的多种应用场景</li>
<li>Netty 是高性能的网络通信框架，许多高性能的 RPC 框架和大数据框架都会使用 Netty 作为通信组件</li>
<li>目前存在的线程模型有：传统阻塞 I/O 服务模型、Reactor 模式，后者又根据 Reactor 的数量和处理资源池线程的数量不同，有三种典型的表现：
<ul>
<li>单 Reactor 单线程</li>
<li>单 Reactor 多线程</li>
<li>主从 Reactor 多线程</li>
</ul>
</li>
<li>Netty 线程模式主要是从主从 Reactor 多线程模型做出了一定的改进（有多个 Reactor）</li>
</ul>
<h2> Reactor 模式</h2>
<ul>
<li>Reactor 模式又称为反应器模式、分发者模式、通知者模式</li>
<li>基于 I/O 复用模型：多个连接共用一个「阻塞对象」，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接，当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理</li>
<li>基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接业务</li>
<li>Reactor 模式使用 I/O 复用监听事件，收到事件后，分给某个线程进行处理，进而达到高并发</li>
<li>Reactor 核心组成：
<ul>
<li>Reactor：在一个单独的线程中运行，负责「监听」和「分发」事件，分发给适当的处理程序对 I/O 事件做出反应</li>
<li>Handlers：处理程序执行 I/O 事件要完成的实际事件，Reactor 通过调度适当的处理程序来相应 I/O 事件，处理程序会执行非阻塞操作</li>
</ul>
</li>
<li>优点：
<ul>
<li>响应快，不必为单个同步所阻塞（虽然 Reactor 本身依旧是同步的）</li>
<li>可以最大程度地避免复杂的多线程以及同步问题，并且避免了多线程/多进程的切换开销</li>
<li>扩展性好，可以方便地通过增加 Reactor 实例个数来充分利用 CPU 资源</li>
<li>复用性好，Reactor 模型本身与具体事件处理逻辑无关，具有很高的复用性</li>
</ul>
</li>
</ul>
<h3> 单线程模型</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//netty/20230209/单线程模型.jpg" alt="什么是Netty？_慕课手记" tabindex="0" loading="lazy"><figcaption>什么是Netty？_慕课手记</figcaption></figure>
<ul>
<li>
<p>可以实现应用程序通过一个「阻塞对象」监听「多路连接请求」</p>
</li>
<li>
<p>Reactor 对象通过监控客户端请求事件，收到事件进行分发</p>
</li>
<li>
<p>如果建立连接请求事件，则由 Acceptor 对象通过 Accept 处理连接请求，然后创建一个 Handler 对象处理连续完成后的后续业务处理</p>
</li>
<li>
<p>如果建立的不是连接事件，则 Reactor 会分发调用连接对应的 Handler 来响应事件</p>
</li>
<li>
<p>Handler 会完成 Read -&gt; 业务处理 -&gt; Send 的完整业务流程</p>
</li>
<li>
<p>这样服务端就用「一个线程」通过多路复用完成了所有的 I/O 操作（包括连接、读写等），编码简单清晰，但是如果客户端连接数量比较多的话，将无法支撑</p>
</li>
<li>
<p>优点：模型简单，没有多线程、进程通信、竞争的问题，即全部都在一个线程内完成</p>
</li>
<li>
<p>缺点：因为只有一个线程，所以会有性能问题，整个进程无法处理其他连接事件，很容易导致性能瓶颈；而且线程如果意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障（可靠性问题）</p>
</li>
<li>
<p>使用场景：客户端的数量有限，业务处理非常快的情况，比如 Redis 在业务处理时间复杂度 O(1) 的情况</p>
</li>
</ul>
<h3> 多线程模型</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//netty/20230209/多线程模型.jpeg" alt="image-20230108113811182" tabindex="0" loading="lazy"><figcaption>image-20230108113811182</figcaption></figure>
<ul>
<li>Reactor 对象通过 select 监控客户端请求事件，收到事件后通过 dispatch 进行分发</li>
<li>如果建立连接请求，则 Acceptor 对象通过 Accept 处理连接请求，然后创建一个 Handler 对象处理完成连接后的各个事件</li>
<li>如果不是连接请求，则由 Reactor 分发调用连接对应的 Handler 来处理</li>
<li>Handler 只负责响应事件，不做具体的业务处理，通过 Read 读取数据后，会分发给后面的 Worker 线程池的某个线程处理业务</li>
<li>Worker 线程池会分配独立的线程完成真正的业务，并将结果返回给 Handler，Handler 收到响应后，通过 Send 将结果返回给客户端</li>
<li>优点：可以充分地利用多核 CPU 的处理能力</li>
<li>缺点：多线程「数据共享」和「访问」比较复杂，Reactor 处理所有的事件的「监听」和「响应」，Reactor 在单线程高并发场景下容易出现瓶颈</li>
</ul>
<h3> 主从 Reactor 多线程</h3>
<img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//netty/20230209/主从Reactor多线程.jpeg" alt="什么是Netty？_慕课手记" style="zoom:50%;">
<ul>
<li>SubReactor 可以有多个，即 Reactor 主线程可以对应多个 Reactor 子线程，以此解决 Reactor 的性能瓶颈</li>
<li>MainReactor 对象通过 Select 监听连接事件，收到后通过 Acceptor 对象处理连接事件</li>
<li>当 Acceptor 对象处理连接事件后，MainReactor 会将连接分发给 SubReactor</li>
<li>SubReactor 将连接加入到连接队列进行监听，并创建 Handler 进行各种事件的处理</li>
<li>当有新事件发生时，SubReactor 就会调用对应的 Handler 处理，Handler 通过 Read 读取数据，分发给之后的 Worker 线程处理</li>
<li>Worker 线程池会分配独立的 Worker 线程进行业务处理并返回结果</li>
<li>Handler 收到响应结果后，再通过 Send 将结果返回给客户端</li>
<li>优点：父线程与子线程的数据交互职责明确，父线程只需要接收新连接，子线程则完成后续的业务处理；父子线程之间的数据交互也简单，Reactor 主线程只需要把新连接传递给子线程即可，子线程无需返回数据</li>
<li>缺点：编程复杂度较高</li>
<li>该模型再许多项目中都有应用，比如 Nginx 主从 Reactor 多线程模型、Memcahed 主从多线程、Netty 主从多线程</li>
</ul>
<h3> Netty 主从多线程</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//netty/20230209/主从多线程.jpeg" alt="使用netty手撸一个简易http服务器" tabindex="0" loading="lazy"><figcaption>使用netty手撸一个简易http服务器</figcaption></figure>
<ul>
<li>BossGroup 线程维护 Selector，只关注 Accept，接收到 Accept 事件后，会获取对应的 SocketChannel，封装成 NIOSocketChannel 注册到 Worker 线程（事件循环）并进行维护</li>
<li>当 Worker 线程监听到 Selector 中通道发生了 Worker 关心的事件时，就会进行处理（由 Handler 处理，这里的 Handler 已经加入到通道了）</li>
<li>BossGroup 相当于 MainReactor，专门复杂接收客户端的连接，而 WorkerGroup 相当于 SubReactorGroup，专门复杂网络的读写，二者的事件循环（NioEventLoop）可以有多个，以此构成 NioEventGroup</li>
<li>NioEventLoop 表示一个不断循环的执行处理任务的线程，每个 NioEventLoop 都有一个 Selector，用于监听绑定在其上的 Socket 网络通讯</li>
<li>每个 Boss NioEventLoop 执行的步骤有：
<ul>
<li>轮询 Accept 事件</li>
<li>处理 Accept 事件，与客户端建立连接，生成 NioSocketChannel，并将其注册到某个 Worker NioEventLoop 上的 Selector</li>
<li>处理任务队列的任务，即 runAllTasks</li>
</ul>
</li>
<li>每个 Worker NioEventLoop 执行的步骤有：
<ul>
<li>轮询 Read、Write 事件</li>
<li>处理 I/O 事件，即读写事件，在对应的 NioSocketChannel 中处理</li>
<li>处理任务队列的任务，即 runAllTasks</li>
</ul>
</li>
<li>每个 Worker NioEventLoop 处理业务时，会使用 Pipeline（管道），其中包含了 Channel，即通过 Pipeline 可以获得对应的管道，管道中维护了很多的 Handler</li>
<li>NioEventLoop 内部采用「串行化」设计，消息的读取、解码、处理、编码、发送，始终都由 I/O 线程 NioEventLoop 负责</li>
<li>每个 NioEventLoop 都包含一个 Selector 和一个 TaskQueue，Selector 上可以注册监听多个 NioChannel，每个 NioChannel 只会绑定在唯一的 NioEventLoop 上，而且每个 NioChannel 都绑定有一个 ChannelPipeline</li>
</ul>
<h2> Netty 简单使用</h2>
<p><strong>服务端：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务端的处理器：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端的处理器：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> Netty 模型</h1>
<h2> Netty 任务队列</h2>
<ul>
<li>当需要处理的业务非常耗时时就可以将其放入任务队列，否则会阻塞线程</li>
<li>任务队列中的 Task 有三种典型使用场景：
<ul>
<li>用户程序自定义的普通任务（会提交到 TaskQueue）</li>
<li>用户自定义的定时任务（会提交到 ScheduleTaskQueue）</li>
<li>非当前 Reactor 线程调用 Channel 的各种方法</li>
</ul>
</li>
</ul>
<h2> 异步模型</h2>
<ul>
<li>当一个异步过程调用发出后，调用者不会立即得到结果，实际处理这个调用的组件在完成后，会通过状态、通知和回调来通知调用者</li>
<li>Netty 中的 I/O 操作是异步的，包括 bind、write、connect 等操作都会简单地返回一个 ChannelFuture</li>
<li>异步模型下，调用者不能立即获得结果，但是之后可以通过 Future-Listener 机制来主动获取或者通过通知机制获得 I/O 操作结果</li>
<li>Netty 的异步模型是建立在 Future 和 Callback 上的，「拦截操作」和「转换出入栈数据」只需要用户提供 Future 或者 Callback 即可，这样可以让「业务逻辑」从网络基础应用编码中分离出来（与业务解耦，也是 Netty 的设计目标）</li>
</ul>
<h3> Future-Listener 机制</h3>
<ul>
<li>当 Future 对象刚创建时，处于非完成状态，调用者可以通过返回的 ChannelFuture 来获取操作执行的状态，注册监听函数来执行完成后的操作</li>
<li>常见的操作有：
<ul>
<li>通过方法 <code>isDone()</code> 来判断当前操作是否「完成」</li>
<li>通过方法 <code>isSuccess()</code> 来判断已完成的操作是否「成功」</li>
<li>通过方法 <code>getCause()</code> 来判断已完成的操作的「失败原因」</li>
<li>通过方法 <code>isCancelled()</code> 来判断已完成的操作是否「被取消」</li>
<li>通过方法 <code>addListener()</code>  方法来注册监听器，当操作已完成，将会通知指定的监听器</li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 简单的 HTTP 服务</h2>
<p><strong>服务端（客户端是浏览器）：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>管道初始化：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义处理器，向浏览器返回一段话：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Pipeline 与 Channel</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//netty/20230209/Pipeline与Channel.png" alt="image-20230108195118087" tabindex="0" loading="lazy"><figcaption>image-20230108195118087</figcaption></figure>
<ul>
<li>每个 Channel 都有且仅有一个 ChannelPipeline 与之对应</li>
<li>ChannelPipeline 中维护了一个由 ChannelHandlerContext 组成的双向链表，并且每个 ChannelHandlerContext 中又关联着一个 ChannelHandler</li>
<li>入栈事件和出栈事件均在一个双向链表中，入栈事件会从链表头网后传递到最后一个入栈的 Handler，出栈事件相反，两种类型的 Handler 互不干扰</li>
<li>ChannelHandlerContext 保存了 Channel 相关的所有上下文信息，ChannelHandler 是其中包含的一个具体的事件处理器，同时 ChannelHandlerContext 中也绑定了对应的 Pipeline 和 Channel 的信息，方便 ChannelHandler 进行调用</li>
<li>ChannelHandlerContext 中常用的方法有：<code>close()</code> 关闭通道、<code>flush()</code> 刷新、<code>writeAndFlush()</code> 写数据到 ChannelPipeline 中</li>
</ul>
<h2> EventLoopGroup</h2>
<ul>
<li>EventLoopGroup 是一组 EventLoop 的抽象，Netty 为了更好地利用多核 CPU 的资源，一般会有多个 EventLoop 同时工作，每个 EventLoop 维护着一个 Selector 实例</li>
<li>EventLoopGroup 提供 <code>next</code> 接口，可以从 Group 中按照一定规则获取其中一个 EventLoop 来处理任务，在 Netty 编程中，我们一般都需要提供两个 EventLoopGroup，即 BossEventLoopGroup 和 WorkerEventLoopGroup</li>
<li>通常一个服务端口，即一个 ServerSocketChannel 对应一个 Selector 和一个 EventLoop 线程；BossEventLoopGroup 负责接收客户端的连接并将 SocketChannel 交给 WorkerEventLoopGroup 来进行 I/O 处理</li>
<li>一般来说，BossEventLoopGroup 是单线程，而 WorkerEventLoopGroup 默认是 CPU 核数 * 2</li>
</ul>
<h2> Netty 心跳检测</h2>
<p><strong>服务端：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>处理器：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Netty WebSocket 长连接</h2>
<p><strong>服务端：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务端处理器：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端，浏览器页面：</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Protobuf 编解码器</h2>
<ul>
<li>网络应用程序传输的都是二进制的字节码数据，在发送数据时就需要编码，接收数据时就需要解码</li>
<li>Netty 为了解决 Java 本身序列化性能较低的缺点，引入了 Google Protocol Buffers 进行优化，使得数据传输效率提高</li>
</ul>
<p><strong>POM 加入依赖：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编写 proto 文件：</strong></p>
<div class="language-protobuf line-numbers-mode" data-ext="protobuf"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>下载 protoc.exe，使用命令 protoc.exe --java_out=. Student.proto 生成对应的类</strong></p>
<p><strong>服务端指定解码器及其类型：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务端处理器取出相应对象：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端指定编码器：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端处理器发送对象：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 入栈出栈机制</h2>
<ul>
<li>ChannelPipeline 提供 ChannelHandler 的容器链</li>
<li>如果事件运动方向是从 ChannelPipeline 到 SocketChannel，发生写操作，需要编码，称之为出栈，即 ChannelPipeline 发送给 SocketChannel 的数据会通过 Pipeline 中的一系列 ChannelOutBoundHandler 并被处理；与之相反的就称之为入栈，发生读操作，需要解码，会被一系列 ChannelInBoundHandler 处理</li>
<li>出栈或者入栈时，需要编码或者解码，由于不知道远程节点是否会一次 性发送一个完整的信息，有可能会出现「粘包拆包」的问题，Netty 中有相应的类（ByteToMessageDecoder）对入栈数据进行缓冲，直到这个数据准备好被处理</li>
<li>在编解码的时候，如果收到的消息类型与指定的类型一致才会进行编码或者解码的操作，否则就直接跳过</li>
<li>其他常用的（编）解码器：
<ul>
<li><code>ReplayingDecoder</code>：扩展了 <code>ByteToMessageDecoder</code>（但是速度可能会稍微慢点），使用该类时不需要调用 <code>readableByte()</code> 方法，而是使用泛型的形式指定用户状态管理的类型</li>
<li><code>LineBasedFrameDecoder</code>：使用行尾控制符（\n 或者 \r\n）作为分隔符来解析数据</li>
<li><code>DelimiterBasedFrameDecoder</code>：可以自定义特殊字符作为消息的分隔字符</li>
<li><code>HttpObjectDecoder</code>：解析 HTTP 数据</li>
<li><code>LengthFieldBasedFrameDecoder</code>：通过指定长度来标识整包消息，这样就可以自动处理黏包和半包的消息</li>
</ul>
</li>
</ul>
<p>[补充] 粘包拆包：TCP 是面向连接面向流的，收发两端都需要有成对的 Socket。发送端为了高效地将多个包发送给接收端，会进行优化，将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包（粘包），这样虽然能提高效率，但是面向流的通讯时没有消息保护边界的，所以接收端就需要做出额外的处理</p>
<p><strong>编码器：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解码器：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务端：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务端初始化：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端初始化：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务端处理器：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端处理器：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//netty/20230209/%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Netty</title>
      <link>https://gzwrrr.github.io/article/netty/</link>
      <guid>https://gzwrrr.github.io/article/netty/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Netty</source>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Netty</h1>
]]></content:encoded>
    </item>
    <item>
      <title>常用</title>
      <link>https://gzwrrr.github.io/article/other/</link>
      <guid>https://gzwrrr.github.io/article/other/</guid>
      <source url="https://gzwrrr.github.io/rss.xml">常用</source>
      <pubDate>Fri, 03 Feb 2023 12:06:41 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 常用</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Quartz 简单使用</title>
      <link>https://gzwrrr.github.io/article/quartz/Quartz.html</link>
      <guid>https://gzwrrr.github.io/article/quartz/Quartz.html</guid>
      <source url="https://gzwrrr.github.io/rss.xml">Quartz 简单使用</source>
      <description>Quartz 简单使用</description>
      <author>1627121193@qq.com (gzw)</author>
      <category>定时任务</category>
      <category>中间件</category>
      <pubDate>Mon, 07 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Quartz 简单使用</h1>
<h1> 概述</h1>
<ul>
<li>
<p>Quartz 是开源且具有丰富特性的任务调度库</p>
</li>
<li>
<p>能够集成于任何的 Java 应用</p>
</li>
<li>
<p>能够创建简单或复杂的调度，执行上百上千甚至上万的任务</p>
</li>
<li>
<p>任务 Job 被定义为标准的 Java 组件，能够执行任何想要的功能</p>
</li>
<li>
<p>Quartz 调度框架包含许多企业级的特性，如 JTA 事务、集群的支持</p>
</li>
</ul>
<h2> 1.Quartz 运行环境</h2>
<ul>
<li>可以运行嵌入在一个独立的应用中</li>
<li>可以在应用程序服务器内被实例化，并且参与事务</li>
<li>可以作为一个独立的程序运行，可以通过 RMI 调用</li>
<li>可以被实例化，作为独立的项目集群（负载均衡和故障转移）</li>
</ul>
<h2> 2.Quartz 设计模式</h2>
<ul>
<li>Builder 模式</li>
<li>Factory 模式</li>
<li>组件模式</li>
<li>链式编程</li>
</ul>
<h2> 3.Quartz 的核心概念</h2>
<ul>
<li>任务 Job：
<ul>
<li>就是想要实现的任务类</li>
<li>每个 Job 都必须实现 <code>org.quartz.job</code> 接口，且只需要实现接口定义的 <code>execute</code> 方法</li>
</ul>
</li>
<li>触发器 Trigger：
<ul>
<li>为执行任务的触发器</li>
<li>主要包含两种：SimpleTrigger 和 CronTrigger</li>
</ul>
</li>
<li>调度器 Scheduler：
<ul>
<li>为任务的调度器</li>
<li>会将任务 Job 以及 Trigger 整合起来，负责基于 Trigger 设定的时间来执行 Job</li>
</ul>
</li>
</ul>
<h2> 4.Quartz 的体系结构</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//quartz/20230209/Quartz的体系结构.png" alt="image-20220818193350723" tabindex="0" loading="lazy"><figcaption>image-20220818193350723</figcaption></figure>
<h2> 5.常用的 API</h2>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Scheduler</td>
<td style="text-align:center">用于与调度程序交互的主程序接口；调度程序-任务执行任务计划表，只有安排进执行计划的 Job 才会在指定时间执行</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Job</td>
<td style="text-align:center">预先定义的希望在位来某个时间点能被调度程序执行的任务类，可以自定义</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">JobDetail</td>
<td style="text-align:center">定义定时任务的实例。是通过 JobBuilder 类创建的</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">JobDataMap</td>
<td style="text-align:center">可以包含不限量的（序列化的）数据对象；在 Job 实例执行时可以使用其中的数据；是 Java Map 接口的一个实现，额外增加了一些便于存取基本类型的数据的方法</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">Trigger</td>
<td style="text-align:center">用于触发执行 Job 任务；当调度一个 Job 时，要创建一个触发器然后调整它的属性来满足 Job 执行的条件；定义一个已经被安排的任务将在什么时候执行的条件</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">JobBuilder</td>
<td style="text-align:center">用于声明一个任务实例，也可以定义关于任务的详情，比如任务名、组名等，这个实例将会作为一个实际执行的任务</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">TriggerBuilder</td>
<td style="text-align:center">触发器创建器。用于创建触发器实例</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">JobListener、TriggerListener、SchedulerListener</td>
<td style="text-align:center">监听器，用于对组件的监听</td>
</tr>
</tbody>
</table>
<h1> Quick Start</h1>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> Quartz 的使用</h1>
<h2> 1.Job 和 JobDetail</h2>
<ul>
<li>
<p>Job：</p>
<ul>
<li>工作任务调度的接口，任务类需要实现该接口</li>
<li>该接口中定义的 execute 方法，类似于 JDK 提供的 TimeTask 类的 run 方法</li>
</ul>
</li>
<li>
<p>Job 实例在 Quartz 中的生命周期：</p>
<ul>
<li>每次调度器执行 Job 时，它在调用 execute 方法前会创建一个新的 Job 实例</li>
<li>当调用完成后，关联的 Job 对象实例会被释放，释放的实例会被垃圾回收机制回收</li>
</ul>
</li>
<li>
<p>JobDetail：</p>
<ul>
<li>为 Job 提供了许多设置属性，以及 JobDateMap 曾元变量属性</li>
<li>用来存储特定的 Job 实例的状态信息，调度器需要借助 JobDatail 对象来添加 Job 实例</li>
<li>重要属性：name、group、jobClass、jobDataMap</li>
</ul>
</li>
</ul>
<h2> 2.JobExecuteContext</h2>
<ul>
<li>当 Scheduler 调用一个 Job 时，会将 JobExecutionContext 传递给 Job 的 execute 方法</li>
<li>Job 能通过 JobExecutionContext 对象访问到 Quartz 运行时环境以及 Job 本身的数据</li>
</ul>
<h2> 3.JobDataMap</h2>
<ul>
<li>在进行任务调度的时候，JobDataMap 存储在 JobExecutionContext 中，容易获取</li>
<li>JobDataMap 可以用来装载任何可序列化的数据对象，当 Job 实例对象被执行时这些参数对象会传递给它</li>
<li>JobDataMap 实现了 JDK 的 Map 接口，并且添加了非常方便的方法来存取基本数据类型</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4.有状态 Job 和无状态 Job</h2>
<ul>
<li>
<p>有状态可以理解为多次 Job 调用期间可以持有一些状态信息，这些信息存储在 JobDataMap 中</p>
</li>
<li>
<p>默认的无状态 Job 每次调用时都会创建一个新的 JobDataMap</p>
</li>
<li>
<p>类注解 <code>@PersistJobDataAfterExecution</code> 可以让任务 Job 在调用的时候进行持久化，即会保存状态信息</p>
</li>
</ul>
<h2> 5.Trigger</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//quartz/20230209/trigger.png" alt="image-20220820155844402" tabindex="0" loading="lazy"><figcaption>image-20220820155844402</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//quartz/20230209/Quartz%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" type="image/png"/>
    </item>
  </channel>
</rss>